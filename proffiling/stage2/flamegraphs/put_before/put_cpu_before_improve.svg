<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (3,349 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.03%)</title><rect x="10.0" y="931.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="915.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="899.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="10.0" y="867.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (3,347 samples, 99.94%)</title><rect x="10.4" y="931.0" width="1179.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.4" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="12.5" y="915.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="15.5" y="926.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (7 samples, 0.21%)</title><rect x="13.2" y="915.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="14.6" y="899.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="14.6" y="883.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="14.6" y="867.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="17.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.03%)</title><rect x="15.6" y="915.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.6" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (1 samples, 0.03%)</title><rect x="15.6" y="899.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (1 samples, 0.03%)</title><rect x="15.6" y="883.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (124 samples, 3.70%)</title><rect x="16.0" y="915.0" width="43.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.0" y="926.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (123 samples, 3.67%)</title><rect x="16.3" y="899.0" width="43.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="910.0">one/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.06%)</title><rect x="17.0" y="883.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="20.0" y="894.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.06%)</title><rect x="17.8" y="883.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.8" y="894.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.09%)</title><rect x="18.5" y="883.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="21.5" y="894.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.03%)</title><rect x="19.5" y="883.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="22.5" y="894.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="19.5" y="867.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="22.5" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="19.5" y="851.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="22.5" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="19.5" y="835.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.5" y="846.0"></text>
</g>
<g>
<title>epoll_wait (112 samples, 3.34%)</title><rect x="19.9" y="883.0" width="39.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="22.9" y="894.0">epo..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (106 samples, 3.17%)</title><rect x="20.9" y="867.0" width="37.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="23.9" y="878.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (106 samples, 3.17%)</title><rect x="20.9" y="851.0" width="37.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.9" y="862.0">do_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (99 samples, 2.96%)</title><rect x="23.4" y="835.0" width="34.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="26.4" y="846.0">__..</text>
</g>
<g>
<title>do_epoll_wait (99 samples, 2.96%)</title><rect x="23.4" y="819.0" width="34.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="26.4" y="830.0">do..</text>
</g>
<g>
<title>__fdget (6 samples, 0.18%)</title><rect x="23.7" y="803.0" width="2.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="26.7" y="814.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.18%)</title><rect x="23.7" y="787.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="26.7" y="798.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.18%)</title><rect x="23.7" y="771.0" width="2.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="26.7" y="782.0"></text>
</g>
<g>
<title>ep_poll (91 samples, 2.72%)</title><rect x="25.9" y="803.0" width="32.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="28.9" y="814.0">ep..</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.03%)</title><rect x="29.0" y="787.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="32.0" y="798.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (21 samples, 0.63%)</title><rect x="29.4" y="787.0" width="7.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="32.4" y="798.0"></text>
</g>
<g>
<title>ep_send_events_proc (17 samples, 0.51%)</title><rect x="30.4" y="771.0" width="6.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="33.4" y="782.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (12 samples, 0.36%)</title><rect x="31.8" y="755.0" width="4.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="34.8" y="766.0"></text>
</g>
<g>
<title>sock_poll (9 samples, 0.27%)</title><rect x="32.6" y="739.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="35.6" y="750.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.06%)</title><rect x="34.0" y="723.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="37.0" y="734.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.09%)</title><rect x="34.7" y="723.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="37.7" y="734.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.03%)</title><rect x="35.7" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="38.7" y="750.0"></text>
</g>
<g>
<title>sock_poll (1 samples, 0.03%)</title><rect x="36.1" y="755.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="39.1" y="766.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.03%)</title><rect x="36.4" y="771.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="39.4" y="782.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="36.4" y="755.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="39.4" y="766.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="36.4" y="739.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.4" y="750.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.03%)</title><rect x="36.8" y="787.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="39.8" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (58 samples, 1.73%)</title><rect x="37.1" y="787.0" width="20.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="40.1" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="37.1" y="771.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="40.1" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (57 samples, 1.70%)</title><rect x="37.5" y="771.0" width="20.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="40.5" y="782.0"></text>
</g>
<g>
<title>schedule (57 samples, 1.70%)</title><rect x="37.5" y="755.0" width="20.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="40.5" y="766.0"></text>
</g>
<g>
<title>__schedule (57 samples, 1.70%)</title><rect x="37.5" y="739.0" width="20.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="40.5" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (55 samples, 1.64%)</title><rect x="38.2" y="723.0" width="19.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="41.2" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (1 samples, 0.03%)</title><rect x="57.6" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="60.6" y="798.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="57.9" y="803.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="60.9" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="58.3" y="867.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.3" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="58.3" y="851.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="61.3" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="58.3" y="835.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="61.3" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="59.3" y="883.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="62.3" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="59.3" y="867.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="62.3" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="59.3" y="851.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="62.3" y="862.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (3,205 samples, 95.70%)</title><rect x="59.7" y="915.0" width="1129.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.7" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (3,205 samples, 95.70%)</title><rect x="59.7" y="899.0" width="1129.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.7" y="910.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (3,051 samples, 91.10%)</title><rect x="59.7" y="883.0" width="1075.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.7" y="894.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (1 samples, 0.03%)</title><rect x="63.9" y="867.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.9" y="878.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="64.3" y="867.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="67.3" y="878.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="64.6" y="867.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="67.6" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="65.0" y="867.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="68.0" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (2,956 samples, 88.27%)</title><rect x="66.0" y="867.0" width="1041.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.0" y="878.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2,956 samples, 88.27%)</title><rect x="66.0" y="851.0" width="1041.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="862.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (2,936 samples, 87.67%)</title><rect x="66.0" y="835.0" width="1034.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.0" y="846.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,210 samples, 36.13%)</title><rect x="66.0" y="819.0" width="426.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.0" y="830.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="68.1" y="803.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="71.1" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="68.1" y="787.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="71.1" y="798.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.21%)</title><rect x="68.5" y="803.0" width="2.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="71.5" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="70.6" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="73.6" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="70.6" y="771.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="73.6" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="70.6" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="73.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (30 samples, 0.90%)</title><rect x="71.0" y="803.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (30 samples, 0.90%)</title><rect x="71.0" y="787.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (30 samples, 0.90%)</title><rect x="71.0" y="771.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.0" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.12%)</title><rect x="76.2" y="755.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (4 samples, 0.12%)</title><rect x="76.2" y="739.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="79.2" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (4 samples, 0.12%)</title><rect x="76.2" y="723.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.2" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="77.3" y="707.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="80.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="77.3" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="80.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="77.3" y="675.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="80.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.15%)</title><rect x="77.7" y="755.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="80.7" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.18%)</title><rect x="79.4" y="755.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="82.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.18%)</title><rect x="79.4" y="739.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="82.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.18%)</title><rect x="79.4" y="723.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="82.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,126 samples, 33.62%)</title><rect x="81.5" y="803.0" width="396.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.5" y="814.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (41 samples, 1.22%)</title><rect x="81.5" y="787.0" width="14.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (41 samples, 1.22%)</title><rect x="81.5" y="771.0" width="14.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (41 samples, 1.22%)</title><rect x="81.5" y="755.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (41 samples, 1.22%)</title><rect x="81.5" y="739.0" width="14.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (22 samples, 0.66%)</title><rect x="81.5" y="723.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.5" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="87.9" y="707.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="90.9" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="87.9" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="90.9" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="87.9" y="675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="90.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="87.9" y="659.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="90.9" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="88.2" y="707.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="91.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="88.2" y="691.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="91.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="88.2" y="675.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="91.2" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (19 samples, 0.57%)</title><rect x="89.3" y="723.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.15%)</title><rect x="91.7" y="707.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.7" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.15%)</title><rect x="93.5" y="707.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="94.9" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="97.9" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="94.9" y="675.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="97.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="94.9" y="659.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="97.9" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="95.3" y="707.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="98.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="95.3" y="691.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="98.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="95.3" y="675.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="98.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,085 samples, 32.40%)</title><rect x="96.0" y="787.0" width="382.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.0" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,085 samples, 32.40%)</title><rect x="96.0" y="771.0" width="382.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.0" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.remaining (4 samples, 0.12%)</title><rect x="96.7" y="755.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.7" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="97.7" y="739.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="100.7" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="97.7" y="723.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="100.7" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="97.7" y="707.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="100.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,079 samples, 32.22%)</title><rect x="98.1" y="755.0" width="380.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="101.1" y="766.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,079 samples, 32.22%)</title><rect x="98.1" y="739.0" width="380.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.1" y="750.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="99.8" y="723.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="102.8" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (35 samples, 1.05%)</title><rect x="100.2" y="723.0" width="12.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="103.2" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.12%)</title><rect x="102.7" y="707.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="105.7" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="103.7" y="691.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="106.7" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="103.7" y="675.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="106.7" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="103.7" y="659.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="106.7" y="670.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.12%)</title><rect x="104.1" y="707.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.1" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (18 samples, 0.54%)</title><rect x="105.5" y="707.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="108.5" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.15%)</title><rect x="107.2" y="691.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="110.2" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (6 samples, 0.18%)</title><rect x="109.0" y="691.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="112.0" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="110.8" y="675.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="113.8" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="110.8" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="113.8" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="110.8" y="643.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="113.8" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="111.1" y="691.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="114.1" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="111.5" y="691.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="114.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="111.5" y="675.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="114.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="111.5" y="659.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="114.5" y="670.0"></text>
</g>
<g>
<title>memmove@plt (2 samples, 0.06%)</title><rect x="111.8" y="707.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="114.8" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="112.2" y="691.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="115.2" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="112.2" y="675.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="115.2" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="112.2" y="659.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="115.2" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.09%)</title><rect x="112.5" y="723.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="115.5" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="113.2" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="116.2" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="113.2" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="116.2" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="113.2" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="116.2" y="686.0"></text>
</g>
<g>
<title>send (1,033 samples, 30.85%)</title><rect x="113.6" y="723.0" width="364.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="116.6" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,017 samples, 30.37%)</title><rect x="117.5" y="707.0" width="358.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="120.5" y="718.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.06%)</title><rect x="117.5" y="691.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="120.5" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1,015 samples, 30.31%)</title><rect x="118.2" y="691.0" width="357.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="121.2" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (996 samples, 29.74%)</title><rect x="120.6" y="675.0" width="351.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="123.6" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (993 samples, 29.65%)</title><rect x="120.6" y="659.0" width="349.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="123.6" y="670.0">__sys_sendto</text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="121.0" y="643.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="124.0" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (983 samples, 29.35%)</title><rect x="121.3" y="643.0" width="346.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="124.3" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.12%)</title><rect x="121.7" y="627.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="124.7" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (975 samples, 29.11%)</title><rect x="123.1" y="627.0" width="343.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="126.1" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (973 samples, 29.05%)</title><rect x="123.1" y="611.0" width="342.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="126.1" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.03%)</title><rect x="123.5" y="595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="126.5" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.09%)</title><rect x="123.8" y="595.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="126.8" y="606.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.06%)</title><rect x="124.9" y="595.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.9" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.09%)</title><rect x="125.6" y="595.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="128.6" y="606.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.06%)</title><rect x="125.6" y="579.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="128.6" y="590.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.03%)</title><rect x="126.3" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="129.3" y="590.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="126.6" y="595.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="129.6" y="606.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="126.6" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="129.6" y="590.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.06%)</title><rect x="127.0" y="595.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="130.0" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (955 samples, 28.52%)</title><rect x="127.7" y="595.0" width="336.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="130.7" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.09%)</title><rect x="131.6" y="579.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="134.6" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.09%)</title><rect x="131.6" y="563.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="134.6" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.09%)</title><rect x="132.6" y="579.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="135.6" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.06%)</title><rect x="133.0" y="563.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="136.0" y="574.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.03%)</title><rect x="133.7" y="579.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="136.7" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (5 samples, 0.15%)</title><rect x="134.0" y="579.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="137.0" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (5 samples, 0.15%)</title><rect x="134.0" y="563.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="137.0" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (55 samples, 1.64%)</title><rect x="135.8" y="579.0" width="19.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="138.8" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (50 samples, 1.49%)</title><rect x="137.5" y="563.0" width="17.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="140.5" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (23 samples, 0.69%)</title><rect x="139.0" y="547.0" width="8.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="142.0" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (13 samples, 0.39%)</title><rect x="139.3" y="531.0" width="4.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="142.3" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.03%)</title><rect x="142.8" y="515.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="145.8" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.06%)</title><rect x="143.2" y="515.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="146.2" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.09%)</title><rect x="143.9" y="531.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="146.9" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.06%)</title><rect x="144.9" y="531.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="147.9" y="542.0"></text>
</g>
<g>
<title>memset (3 samples, 0.09%)</title><rect x="145.7" y="531.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="148.7" y="542.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.03%)</title><rect x="146.7" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="149.7" y="542.0"></text>
</g>
<g>
<title>__ksize (4 samples, 0.12%)</title><rect x="147.1" y="547.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.1" y="558.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.06%)</title><rect x="148.5" y="547.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="151.5" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (9 samples, 0.27%)</title><rect x="149.2" y="547.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="152.2" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (4 samples, 0.12%)</title><rect x="150.9" y="531.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="153.9" y="542.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.18%)</title><rect x="152.3" y="547.0" width="2.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="155.3" y="558.0"></text>
</g>
<g>
<title>__ksize (6 samples, 0.18%)</title><rect x="152.3" y="531.0" width="2.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="155.3" y="542.0"></text>
</g>
<g>
<title>memset (2 samples, 0.06%)</title><rect x="154.5" y="547.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="157.5" y="558.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.12%)</title><rect x="155.2" y="579.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="158.2" y="590.0"></text>
</g>
<g>
<title>tcp_push (860 samples, 25.68%)</title><rect x="156.6" y="579.0" width="303.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="159.6" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (859 samples, 25.65%)</title><rect x="156.6" y="563.0" width="302.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="159.6" y="574.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.03%)</title><rect x="156.6" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="159.6" y="558.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="156.9" y="547.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="159.9" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.03%)</title><rect x="157.3" y="547.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="160.3" y="558.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (1 samples, 0.03%)</title><rect x="157.6" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="160.6" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (855 samples, 25.53%)</title><rect x="158.0" y="547.0" width="301.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="161.0" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (825 samples, 24.63%)</title><rect x="159.7" y="531.0" width="290.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="162.7" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.03%)</title><rect x="165.0" y="515.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="168.0" y="526.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.06%)</title><rect x="165.4" y="515.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="168.4" y="526.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="166.1" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="169.1" y="526.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.03%)</title><rect x="166.4" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="169.4" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (793 samples, 23.68%)</title><rect x="166.8" y="515.0" width="279.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="169.8" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (790 samples, 23.59%)</title><rect x="166.8" y="499.0" width="278.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="169.8" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="168.6" y="483.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="171.6" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="168.6" y="467.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="171.6" y="478.0"></text>
</g>
<g>
<title>ip_local_out (782 samples, 23.35%)</title><rect x="168.9" y="483.0" width="275.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="171.9" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.06%)</title><rect x="168.9" y="467.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="171.9" y="478.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.03%)</title><rect x="169.3" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="172.3" y="462.0"></text>
</g>
<g>
<title>ip_output (779 samples, 23.26%)</title><rect x="169.6" y="467.0" width="274.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="172.6" y="478.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="170.3" y="451.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="173.3" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (776 samples, 23.17%)</title><rect x="170.7" y="451.0" width="273.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="173.7" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.18%)</title><rect x="171.7" y="435.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="174.7" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (767 samples, 22.90%)</title><rect x="173.8" y="435.0" width="270.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="176.8" y="446.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (765 samples, 22.84%)</title><rect x="174.5" y="419.0" width="269.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="177.5" y="430.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (692 samples, 20.66%)</title><rect x="180.5" y="403.0" width="243.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="183.5" y="414.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (691 samples, 20.63%)</title><rect x="180.9" y="387.0" width="243.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="183.9" y="398.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (690 samples, 20.60%)</title><rect x="181.2" y="371.0" width="243.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="184.2" y="382.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (689 samples, 20.57%)</title><rect x="181.2" y="355.0" width="242.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="184.2" y="366.0">__softirqentry_text_start</text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.06%)</title><rect x="183.0" y="339.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="186.0" y="350.0"></text>
</g>
<g>
<title>net_rx_action (680 samples, 20.30%)</title><rect x="183.7" y="339.0" width="239.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="186.7" y="350.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.03%)</title><rect x="185.1" y="323.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="188.1" y="334.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="185.5" y="323.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="188.5" y="334.0"></text>
</g>
<g>
<title>process_backlog (674 samples, 20.13%)</title><rect x="185.8" y="323.0" width="237.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="188.8" y="334.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (662 samples, 19.77%)</title><rect x="189.3" y="307.0" width="233.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="192.3" y="318.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_one_core (661 samples, 19.74%)</title><rect x="189.3" y="291.0" width="232.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="192.3" y="302.0">__netif_receive_skb_one_core</text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.30%)</title><rect x="190.4" y="275.0" width="3.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="193.4" y="286.0"></text>
</g>
<g>
<title>ip_rcv (647 samples, 19.32%)</title><rect x="193.9" y="275.0" width="228.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="196.9" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.09%)</title><rect x="194.6" y="259.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="197.6" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.12%)</title><rect x="195.7" y="259.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="198.7" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (638 samples, 19.05%)</title><rect x="197.1" y="259.0" width="224.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="200.1" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (633 samples, 18.90%)</title><rect x="197.4" y="243.0" width="223.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="200.4" y="254.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (631 samples, 18.84%)</title><rect x="198.2" y="227.0" width="222.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="201.2" y="238.0">ip_local_deliver_finish</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (629 samples, 18.78%)</title><rect x="198.2" y="211.0" width="221.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="201.2" y="222.0">ip_protocol_deliver_rcu</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.03%)</title><rect x="199.2" y="195.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="202.2" y="206.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="199.6" y="195.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="202.6" y="206.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="199.9" y="195.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="202.9" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (2 samples, 0.06%)</title><rect x="200.3" y="195.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="203.3" y="206.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.03%)</title><rect x="201.0" y="195.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="204.0" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (620 samples, 18.51%)</title><rect x="201.3" y="195.0" width="218.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="204.3" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (22 samples, 0.66%)</title><rect x="203.8" y="179.0" width="7.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="206.8" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.06%)</title><rect x="210.8" y="163.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="213.8" y="174.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="211.5" y="179.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="214.5" y="190.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.09%)</title><rect x="211.9" y="179.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="214.9" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.06%)</title><rect x="213.0" y="179.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="216.0" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.27%)</title><rect x="213.7" y="179.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="216.7" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.18%)</title><rect x="214.0" y="163.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="217.0" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.06%)</title><rect x="216.1" y="163.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="219.1" y="174.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="216.8" y="179.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="219.8" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (574 samples, 17.14%)</title><rect x="217.2" y="179.0" width="202.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="220.2" y="190.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.03%)</title><rect x="217.5" y="163.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="220.5" y="174.0"></text>
</g>
<g>
<title>tcp_ack (1 samples, 0.03%)</title><rect x="217.9" y="163.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="220.9" y="174.0"></text>
</g>
<g>
<title>tcp_check_space (8 samples, 0.24%)</title><rect x="218.2" y="163.0" width="2.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="221.2" y="174.0"></text>
</g>
<g>
<title>tcp_data_ready (2 samples, 0.06%)</title><rect x="221.1" y="163.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="224.1" y="174.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="221.8" y="163.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="224.8" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (560 samples, 16.72%)</title><rect x="222.1" y="163.0" width="197.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="225.1" y="174.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (8 samples, 0.24%)</title><rect x="225.6" y="147.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="228.6" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (8 samples, 0.24%)</title><rect x="225.6" y="131.0" width="2.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="228.6" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.21%)</title><rect x="226.0" y="115.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="229.0" y="126.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="226.0" y="99.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="229.0" y="110.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.18%)</title><rect x="226.3" y="99.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="229.3" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.15%)</title><rect x="226.7" y="83.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="229.7" y="94.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (2 samples, 0.06%)</title><rect x="228.5" y="147.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="231.5" y="158.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.06%)</title><rect x="229.2" y="147.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="232.2" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (1 samples, 0.03%)</title><rect x="229.9" y="147.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="232.9" y="158.0"></text>
</g>
<g>
<title>tcp_ack (77 samples, 2.30%)</title><rect x="230.2" y="147.0" width="27.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="233.2" y="158.0">t..</text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="235.9" y="131.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="238.9" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="236.2" y="131.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="239.2" y="142.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="236.6" y="131.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="239.6" y="142.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.03%)</title><rect x="236.9" y="131.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="239.9" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (49 samples, 1.46%)</title><rect x="237.3" y="131.0" width="17.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="240.3" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (30 samples, 0.90%)</title><rect x="241.8" y="115.0" width="10.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="244.8" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.24%)</title><rect x="242.2" y="99.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="245.2" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (6 samples, 0.18%)</title><rect x="242.9" y="83.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="245.9" y="94.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.06%)</title><rect x="244.3" y="67.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="247.3" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="245.0" y="99.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="248.0" y="110.0"></text>
</g>
<g>
<title>skb_release_all (17 samples, 0.51%)</title><rect x="245.4" y="99.0" width="6.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="248.4" y="110.0"></text>
</g>
<g>
<title>skb_release_data (16 samples, 0.48%)</title><rect x="245.4" y="83.0" width="5.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="248.4" y="94.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="247.8" y="67.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="250.8" y="78.0"></text>
</g>
<g>
<title>skb_free_head (8 samples, 0.24%)</title><rect x="248.2" y="67.0" width="2.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="251.2" y="78.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="248.2" y="51.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="251.2" y="62.0"></text>
</g>
<g>
<title>kfree (7 samples, 0.21%)</title><rect x="248.5" y="51.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="251.5" y="62.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.15%)</title><rect x="249.2" y="35.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="252.2" y="46.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="251.0" y="83.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="254.0" y="94.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.09%)</title><rect x="251.4" y="99.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="254.4" y="110.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="252.4" y="115.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="255.4" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="252.8" y="115.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="255.8" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.12%)</title><rect x="253.1" y="115.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="256.1" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="254.5" y="131.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="257.5" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (4 samples, 0.12%)</title><rect x="254.9" y="131.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="257.9" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.03%)</title><rect x="256.3" y="131.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="259.3" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.06%)</title><rect x="256.6" y="131.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="259.6" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (434 samples, 12.96%)</title><rect x="257.3" y="147.0" width="153.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="260.3" y="158.0">tcp_data_ready</text>
</g>
<g>
<title>sock_def_readable (434 samples, 12.96%)</title><rect x="257.3" y="131.0" width="153.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="260.3" y="142.0">sock_def_readable</text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.09%)</title><rect x="257.3" y="115.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="260.3" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (431 samples, 12.87%)</title><rect x="258.4" y="115.0" width="151.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="261.4" y="126.0">__wake_up_sync_key</text>
</g>
<g>
<title>__wake_up_common_lock (431 samples, 12.87%)</title><rect x="258.4" y="99.0" width="151.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="261.4" y="110.0">__wake_up_common_lock</text>
</g>
<g>
<title>__lock_text_start (430 samples, 12.84%)</title><rect x="258.8" y="83.0" width="151.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="261.8" y="94.0">__lock_text_start</text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.18%)</title><rect x="410.3" y="147.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="413.3" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (8 samples, 0.24%)</title><rect x="412.4" y="147.0" width="2.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="415.4" y="158.0"></text>
</g>
<g>
<title>read_tsc (8 samples, 0.24%)</title><rect x="412.4" y="131.0" width="2.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="415.4" y="142.0"></text>
</g>
<g>
<title>tcp_queue_rcv (6 samples, 0.18%)</title><rect x="415.2" y="147.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="418.2" y="158.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (3 samples, 0.09%)</title><rect x="417.3" y="147.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="420.3" y="158.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="418.4" y="147.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="421.4" y="158.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="418.7" y="147.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="421.7" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="419.1" y="147.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="422.1" y="158.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="419.4" y="179.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="422.4" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="419.8" y="211.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="422.8" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="420.1" y="211.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="423.1" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.09%)</title><rect x="420.5" y="243.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="423.5" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (1 samples, 0.03%)</title><rect x="421.5" y="243.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="424.5" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="421.9" y="275.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="424.9" y="286.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="422.2" y="291.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="425.2" y="302.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.06%)</title><rect x="422.6" y="307.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="425.6" y="318.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="423.3" y="339.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="426.3" y="350.0"></text>
</g>
<g>
<title>rcu_core_si (1 samples, 0.03%)</title><rect x="423.7" y="339.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="426.7" y="350.0"></text>
</g>
<g>
<title>note_gp_changes (1 samples, 0.03%)</title><rect x="423.7" y="323.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="426.7" y="334.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="424.0" y="355.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="427.0" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (56 samples, 1.67%)</title><rect x="424.4" y="403.0" width="19.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="427.4" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (54 samples, 1.61%)</title><rect x="424.4" y="387.0" width="19.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="427.4" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (33 samples, 0.99%)</title><rect x="428.6" y="371.0" width="11.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="431.6" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.06%)</title><rect x="428.9" y="355.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="431.9" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (24 samples, 0.72%)</title><rect x="429.6" y="355.0" width="8.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="432.6" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.12%)</title><rect x="431.1" y="339.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="434.1" y="350.0"></text>
</g>
<g>
<title>netif_rx (11 samples, 0.33%)</title><rect x="432.5" y="339.0" width="3.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="435.5" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.09%)</title><rect x="432.5" y="323.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="435.5" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (8 samples, 0.24%)</title><rect x="433.5" y="323.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="436.5" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.21%)</title><rect x="433.9" y="307.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="436.9" y="318.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.06%)</title><rect x="436.3" y="339.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="439.3" y="350.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="437.0" y="339.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="440.0" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.03%)</title><rect x="437.4" y="339.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="440.4" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.03%)</title><rect x="437.7" y="339.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="440.7" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.03%)</title><rect x="438.1" y="355.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="441.1" y="366.0"></text>
</g>
<g>
<title>tcp_wfree (5 samples, 0.15%)</title><rect x="438.5" y="355.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="441.5" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="440.2" y="371.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="443.2" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (7 samples, 0.21%)</title><rect x="440.6" y="371.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="443.6" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (2 samples, 0.06%)</title><rect x="442.0" y="355.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="445.0" y="366.0"></text>
</g>
<g>
<title>skb_network_protocol (2 samples, 0.06%)</title><rect x="442.0" y="339.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="445.0" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="442.7" y="355.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="445.7" y="366.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="443.0" y="371.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="446.0" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.06%)</title><rect x="443.4" y="387.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="446.4" y="398.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.03%)</title><rect x="444.1" y="467.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="447.1" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.06%)</title><rect x="444.4" y="483.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="447.4" y="494.0"></text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.06%)</title><rect x="445.1" y="499.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="448.1" y="510.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.03%)</title><rect x="445.8" y="499.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="448.8" y="510.0"></text>
</g>
<g>
<title>skb_clone (8 samples, 0.24%)</title><rect x="446.2" y="515.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="449.2" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.06%)</title><rect x="446.9" y="499.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="449.9" y="510.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.12%)</title><rect x="447.6" y="499.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="450.6" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="448.7" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="451.7" y="494.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="449.0" y="515.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="452.0" y="526.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="449.4" y="515.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="452.4" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.06%)</title><rect x="449.7" y="515.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="452.7" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="450.4" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="453.4" y="542.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.12%)</title><rect x="450.8" y="531.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="453.8" y="542.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="452.2" y="531.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="455.2" y="542.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="452.5" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="455.5" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.15%)</title><rect x="452.9" y="531.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="455.9" y="542.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.03%)</title><rect x="454.0" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="457.0" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="454.3" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="457.3" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="454.3" y="499.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="457.3" y="510.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="454.3" y="483.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="457.3" y="494.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.03%)</title><rect x="454.3" y="467.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="457.3" y="478.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="454.3" y="451.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="457.3" y="462.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (3 samples, 0.09%)</title><rect x="454.7" y="531.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="457.7" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (6 samples, 0.18%)</title><rect x="455.7" y="531.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="458.7" y="542.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="457.1" y="515.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="460.1" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="457.5" y="515.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="460.5" y="526.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="457.5" y="499.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="460.5" y="510.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (1 samples, 0.03%)</title><rect x="457.8" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="460.8" y="542.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.09%)</title><rect x="458.2" y="531.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="461.2" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.03%)</title><rect x="459.2" y="563.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="462.2" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.06%)</title><rect x="459.6" y="579.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="462.6" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (11 samples, 0.33%)</title><rect x="460.3" y="579.0" width="3.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="463.3" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.12%)</title><rect x="460.3" y="563.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="463.3" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.21%)</title><rect x="461.7" y="563.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="464.7" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.06%)</title><rect x="463.1" y="547.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="466.1" y="558.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="463.8" y="547.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="466.8" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.12%)</title><rect x="464.2" y="595.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="467.2" y="606.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="465.6" y="595.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="468.6" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.06%)</title><rect x="465.9" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="468.9" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.09%)</title><rect x="466.6" y="627.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="469.6" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.03%)</title><rect x="467.3" y="611.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="470.3" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="467.3" y="595.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="470.3" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.24%)</title><rect x="467.7" y="643.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="470.7" y="654.0"></text>
</g>
<g>
<title>__fdget (5 samples, 0.15%)</title><rect x="468.0" y="627.0" width="1.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="471.0" y="638.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.15%)</title><rect x="468.0" y="611.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="471.0" y="622.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.15%)</title><rect x="468.0" y="595.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.0" y="606.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.06%)</title><rect x="469.8" y="627.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="472.8" y="638.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.09%)</title><rect x="470.5" y="659.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="473.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (12 samples, 0.36%)</title><rect x="471.6" y="675.0" width="4.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="474.6" y="686.0"></text>
</g>
<g>
<title>schedule (10 samples, 0.30%)</title><rect x="472.3" y="659.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="475.3" y="670.0"></text>
</g>
<g>
<title>__schedule (9 samples, 0.27%)</title><rect x="472.6" y="643.0" width="3.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="475.6" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.24%)</title><rect x="473.0" y="627.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="476.0" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.15%)</title><rect x="475.8" y="707.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="478.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.15%)</title><rect x="475.8" y="691.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="478.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.15%)</title><rect x="475.8" y="675.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="478.8" y="686.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.06%)</title><rect x="477.6" y="723.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="480.6" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="477.9" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="480.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="477.9" y="691.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="480.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="477.9" y="675.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="480.9" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (37 samples, 1.10%)</title><rect x="478.3" y="803.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (37 samples, 1.10%)</title><rect x="478.3" y="787.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (37 samples, 1.10%)</title><rect x="478.3" y="771.0" width="13.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="481.3" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="485.0" y="755.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.0" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="485.0" y="739.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.0" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.06%)</title><rect x="485.0" y="723.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.0" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.03%)</title><rect x="485.3" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.15%)</title><rect x="485.7" y="755.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.15%)</title><rect x="485.7" y="739.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.7" y="750.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.15%)</title><rect x="485.7" y="723.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.7" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.06%)</title><rect x="486.4" y="707.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="489.4" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="486.7" y="691.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="489.7" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="486.7" y="675.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="489.7" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="486.7" y="659.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="489.7" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="487.1" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="490.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="487.1" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="490.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="487.1" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="490.1" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="487.4" y="755.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="490.4" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2 samples, 0.06%)</title><rect x="488.1" y="755.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="491.1" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="488.5" y="739.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="491.5" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="488.5" y="723.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="491.5" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="488.5" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="491.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.21%)</title><rect x="488.8" y="755.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="491.8" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 0.21%)</title><rect x="488.8" y="739.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="491.8" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.21%)</title><rect x="488.8" y="723.0" width="2.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="491.8" y="734.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="490.9" y="707.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="493.9" y="718.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="490.9" y="691.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="493.9" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="490.9" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="493.9" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="491.3" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="494.3" y="814.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="491.3" y="787.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="494.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="491.3" y="771.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="494.3" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="491.7" y="803.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="494.7" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="491.7" y="787.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="494.7" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="491.7" y="771.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="494.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (16 samples, 0.48%)</title><rect x="492.4" y="819.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="495.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.12%)</title><rect x="493.4" y="803.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.12%)</title><rect x="493.4" y="787.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.4" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="494.5" y="771.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="497.5" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="494.5" y="755.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="497.5" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="494.5" y="739.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="497.5" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="494.8" y="803.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="497.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.18%)</title><rect x="495.2" y="803.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="498.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="496.2" y="787.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="499.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="496.2" y="771.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.09%)</title><rect x="496.2" y="755.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="499.2" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="497.3" y="803.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="500.3" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="497.3" y="787.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="500.3" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="497.3" y="771.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="500.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ServiceImpl.put (1,710 samples, 51.06%)</title><rect x="498.0" y="819.0" width="602.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.0" y="830.0">ru/mail/polis/service/kovalkov/ServiceImpl.put</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 0.60%)</title><rect x="498.0" y="803.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="501.0" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (20 samples, 0.60%)</title><rect x="498.0" y="787.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (20 samples, 0.60%)</title><rect x="498.0" y="771.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (20 samples, 0.60%)</title><rect x="498.0" y="755.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="501.0" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (20 samples, 0.60%)</title><rect x="498.0" y="739.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="501.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (17 samples, 0.51%)</title><rect x="498.0" y="723.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="501.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.03%)</title><rect x="500.1" y="707.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="503.1" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.03%)</title><rect x="500.1" y="691.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="503.1" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.18%)</title><rect x="500.5" y="707.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="502.2" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="505.2" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="502.2" y="675.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="505.2" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="502.2" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="505.2" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="502.6" y="707.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="505.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="502.9" y="707.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.9" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="503.3" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="506.3" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="503.3" y="675.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="506.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="503.3" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="506.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="503.6" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="506.6" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="503.6" y="691.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="506.6" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="503.6" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="506.6" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="504.0" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="507.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.09%)</title><rect x="504.0" y="707.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.0" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.upsert (1,690 samples, 50.46%)</title><rect x="505.0" y="803.0" width="595.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.0" y="814.0">ru/mail/polis/dao/kovalkov/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,671 samples, 49.90%)</title><rect x="505.0" y="787.0" width="588.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.0" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="505.0" y="771.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="508.0" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,668 samples, 49.81%)</title><rect x="505.4" y="771.0" width="587.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="508.4" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="507.2" y="755.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="510.2" y="766.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,371 samples, 40.94%)</title><rect x="507.5" y="755.0" width="483.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="510.5" y="766.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.03%)</title><rect x="509.6" y="739.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="512.6" y="750.0"></text>
</g>
<g>
<title>__libc_malloc (7 samples, 0.21%)</title><rect x="510.0" y="739.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="513.0" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="512.1" y="723.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="515.1" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="512.1" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="515.1" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="512.1" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="515.1" y="702.0"></text>
</g>
<g>
<title>cfree (1 samples, 0.03%)</title><rect x="512.4" y="739.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="515.4" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="512.4" y="723.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="515.4" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="512.4" y="707.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="515.4" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="512.4" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="515.4" y="702.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.15%)</title><rect x="512.8" y="739.0" width="1.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="515.8" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="514.6" y="739.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="517.6" y="750.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.06%)</title><rect x="514.9" y="739.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="517.9" y="750.0"></text>
</g>
<g>
<title>operator delete[](void*) [clone .plt] (1 samples, 0.03%)</title><rect x="515.6" y="739.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="518.6" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="515.6" y="723.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="518.6" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="515.6" y="707.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="518.6" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="515.6" y="691.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="518.6" y="702.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.06%)</title><rect x="516.0" y="739.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="519.0" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="516.3" y="723.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="519.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="516.3" y="707.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="519.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="516.3" y="691.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="519.3" y="702.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (2 samples, 0.06%)</title><rect x="516.7" y="739.0" width="0.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="519.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.18%)</title><rect x="517.4" y="739.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="520.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.03%)</title><rect x="519.5" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="522.5" y="750.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,336 samples, 39.89%)</title><rect x="519.8" y="739.0" width="470.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.8" y="750.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions ..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.06%)</title><rect x="520.9" y="723.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="523.9" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="521.6" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="524.6" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (10 samples, 0.30%)</title><rect x="522.0" y="723.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="525.0" y="734.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.18%)</title><rect x="523.4" y="707.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="526.4" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.21%)</title><rect x="525.5" y="723.0" width="2.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="528.5" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.06%)</title><rect x="526.5" y="707.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="529.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="526.9" y="691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="529.9" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="526.9" y="675.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="529.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="526.9" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="529.9" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="527.2" y="707.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="530.2" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="527.6" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="530.6" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="527.6" y="675.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="530.6" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="527.6" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="530.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,306 samples, 39.00%)</title><rect x="527.9" y="723.0" width="460.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="530.9" y="734.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice c..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.09%)</title><rect x="529.0" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="532.0" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,300 samples, 38.82%)</title><rect x="530.1" y="707.0" width="458.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="533.1" y="718.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::Col..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,294 samples, 38.64%)</title><rect x="530.4" y="691.0" width="455.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="533.4" y="702.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnF..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (5 samples, 0.15%)</title><rect x="531.8" y="675.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="534.8" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="533.2" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="536.2" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="533.2" y="643.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="536.2" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="533.2" y="627.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="536.2" y="638.0"></text>
</g>
<g>
<title>cfree (6 samples, 0.18%)</title><rect x="533.6" y="675.0" width="2.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="536.6" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="534.6" y="659.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="537.6" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="534.6" y="643.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="537.6" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="534.6" y="627.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="537.6" y="638.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="535.7" y="675.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="538.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (3 samples, 0.09%)</title><rect x="536.0" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="539.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,228 samples, 36.67%)</title><rect x="537.1" y="675.0" width="432.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="540.1" y="686.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksd..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.03%)</title><rect x="537.1" y="659.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="540.1" y="670.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="537.5" y="659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.5" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.09%)</title><rect x="537.8" y="659.0" width="1.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="540.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (1 samples, 0.03%)</title><rect x="538.9" y="659.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="541.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) [clone .plt] (1 samples, 0.03%)</title><rect x="539.2" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="542.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.03%)</title><rect x="539.6" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="542.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1,184 samples, 35.35%)</title><rect x="539.9" y="659.0" width="417.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="542.9" y="670.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, ..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.03%)</title><rect x="555.8" y="643.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="558.8" y="654.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="556.1" y="643.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="559.1" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="556.1" y="627.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="559.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="556.1" y="611.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="559.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="556.1" y="595.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="559.1" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="556.8" y="643.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="559.8" y="654.0"></text>
</g>
<g>
<title>__sched_yield (138 samples, 4.12%)</title><rect x="557.2" y="643.0" width="48.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="560.2" y="654.0">__sc..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (102 samples, 3.05%)</title><rect x="568.5" y="627.0" width="35.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="571.5" y="638.0">ent..</text>
</g>
<g>
<title>__x64_sys_sched_yield (6 samples, 0.18%)</title><rect x="568.5" y="611.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="571.5" y="622.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="570.6" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="573.6" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (95 samples, 2.84%)</title><rect x="570.9" y="611.0" width="33.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="573.9" y="622.0">do..</text>
</g>
<g>
<title>__x64_sys_sched_yield (58 samples, 1.73%)</title><rect x="584.0" y="595.0" width="20.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="587.0" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (58 samples, 1.73%)</title><rect x="584.0" y="579.0" width="20.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="587.0" y="590.0"></text>
</g>
<g>
<title>schedule (57 samples, 1.70%)</title><rect x="584.3" y="563.0" width="20.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="587.3" y="574.0"></text>
</g>
<g>
<title>__schedule (57 samples, 1.70%)</title><rect x="584.3" y="547.0" width="20.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="587.3" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.09%)</title><rect x="603.3" y="531.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="606.3" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.12%)</title><rect x="604.4" y="627.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="607.4" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.12%)</title><rect x="604.4" y="611.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="607.4" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.12%)</title><rect x="604.4" y="595.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="607.4" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.15%)</title><rect x="605.8" y="643.0" width="1.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="608.8" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.06%)</title><rect x="607.6" y="643.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="610.6" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="607.9" y="627.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="610.9" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="607.9" y="611.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="610.9" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="607.9" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="610.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.03%)</title><rect x="608.3" y="643.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="611.3" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="608.3" y="627.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="611.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="608.3" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="611.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="608.3" y="595.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="611.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (7 samples, 0.21%)</title><rect x="608.6" y="643.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="611.6" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="610.4" y="627.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="613.4" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="610.7" y="627.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="613.7" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="610.7" y="611.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="613.7" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="610.7" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="613.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (1 samples, 0.03%)</title><rect x="611.1" y="643.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="614.1" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="611.1" y="627.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="614.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="611.1" y="611.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="614.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="611.1" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="614.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) [clone .plt] (1 samples, 0.03%)</title><rect x="611.5" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="614.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (426 samples, 12.72%)</title><rect x="611.8" y="643.0" width="150.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="614.8" y="654.0">rocksdb::DBImpl::Wr..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (3 samples, 0.09%)</title><rect x="613.2" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Append(rocksdb::WriteBatch*, rocksdb::WriteBatch const*, bool) (1 samples, 0.03%)</title><rect x="613.2" y="611.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="616.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (1 samples, 0.03%)</title><rect x="613.2" y="595.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="616.2" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="613.2" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="616.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="613.2" y="563.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="616.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="613.2" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="616.2" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="613.6" y="611.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="616.6" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="613.6" y="595.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="616.6" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="613.6" y="579.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="616.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (412 samples, 12.30%)</title><rect x="614.3" y="627.0" width="145.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="617.3" y="638.0">rocksdb::DBImpl::W..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (404 samples, 12.06%)</title><rect x="615.7" y="611.0" width="142.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="618.7" y="622.0">rocksdb::log::Writ..</text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (22 samples, 0.66%)</title><rect x="618.9" y="595.0" width="7.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="621.9" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.12%)</title><rect x="625.2" y="579.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="628.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.12%)</title><rect x="625.2" y="563.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="628.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.12%)</title><rect x="625.2" y="547.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="628.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (1 samples, 0.03%)</title><rect x="626.6" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="629.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="627.0" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="630.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (344 samples, 10.27%)</title><rect x="627.3" y="595.0" width="121.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="630.3" y="606.0">rocksdb::Writab..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="628.0" y="579.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="631.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.09%)</title><rect x="628.4" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="631.4" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="629.1" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="632.1" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="629.1" y="547.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="632.1" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="629.1" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="632.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="629.4" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="632.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (3 samples, 0.09%)</title><rect x="629.8" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="632.8" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="630.5" y="563.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="633.5" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="630.5" y="547.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="633.5" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="630.5" y="531.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="633.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) [clone .plt] (1 samples, 0.03%)</title><rect x="630.8" y="579.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="633.8" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="630.8" y="563.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="633.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="630.8" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="633.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="630.8" y="531.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="633.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (332 samples, 9.91%)</title><rect x="631.2" y="579.0" width="117.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.2" y="590.0">rocksdb::Writa..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.06%)</title><rect x="632.9" y="563.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="635.9" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="633.6" y="563.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="636.6" y="574.0"></text>
</g>
<g>
<title>__write (319 samples, 9.53%)</title><rect x="634.0" y="563.0" width="112.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="637.0" y="574.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (310 samples, 9.26%)</title><rect x="636.8" y="547.0" width="109.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="639.8" y="558.0">entry_SYSCALL..</text>
</g>
<g>
<title>__x64_sys_write (4 samples, 0.12%)</title><rect x="636.8" y="531.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="639.8" y="542.0"></text>
</g>
<g>
<title>do_syscall_64 (306 samples, 9.14%)</title><rect x="638.2" y="531.0" width="107.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="641.2" y="542.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (298 samples, 8.90%)</title><rect x="641.0" y="515.0" width="105.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="644.0" y="526.0">__x64_sys_wr..</text>
</g>
<g>
<title>__f_unlock_pos (3 samples, 0.09%)</title><rect x="641.0" y="499.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="644.0" y="510.0"></text>
</g>
<g>
<title>ksys_write (295 samples, 8.81%)</title><rect x="642.1" y="499.0" width="103.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="645.1" y="510.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (13 samples, 0.39%)</title><rect x="642.5" y="483.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="645.5" y="494.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.27%)</title><rect x="642.5" y="467.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="645.5" y="478.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.27%)</title><rect x="642.5" y="451.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="645.5" y="462.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.12%)</title><rect x="645.6" y="467.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="648.6" y="478.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.06%)</title><rect x="647.0" y="483.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="650.0" y="494.0"></text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.03%)</title><rect x="647.7" y="483.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="650.7" y="494.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="648.1" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="651.1" y="494.0"></text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="648.4" y="483.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="651.4" y="494.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.03%)</title><rect x="648.8" y="483.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="651.8" y="494.0"></text>
</g>
<g>
<title>vfs_write (275 samples, 8.21%)</title><rect x="649.2" y="483.0" width="96.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="652.2" y="494.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (1 samples, 0.03%)</title><rect x="650.2" y="467.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="653.2" y="478.0"></text>
</g>
<g>
<title>__sb_start_write (6 samples, 0.18%)</title><rect x="650.6" y="467.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="653.6" y="478.0"></text>
</g>
<g>
<title>__vfs_write (255 samples, 7.61%)</title><rect x="652.7" y="467.0" width="89.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="655.7" y="478.0">__vfs_write</text>
</g>
<g>
<title>ext4_file_write_iter (1 samples, 0.03%)</title><rect x="652.7" y="451.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="655.7" y="462.0"></text>
</g>
<g>
<title>new_sync_write (254 samples, 7.58%)</title><rect x="653.0" y="451.0" width="89.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="656.0" y="462.0">new_sync_w..</text>
</g>
<g>
<title>ext4_file_write_iter (249 samples, 7.44%)</title><rect x="654.4" y="435.0" width="87.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="657.4" y="446.0">ext4_file_..</text>
</g>
<g>
<title>__generic_file_write_iter (240 samples, 7.17%)</title><rect x="656.2" y="419.0" width="84.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="659.2" y="430.0">__generic_..</text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.03%)</title><rect x="656.9" y="403.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="659.9" y="414.0"></text>
</g>
<g>
<title>file_remove_privs (2 samples, 0.06%)</title><rect x="657.3" y="403.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="660.3" y="414.0"></text>
</g>
<g>
<title>file_update_time (6 samples, 0.18%)</title><rect x="658.0" y="403.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="661.0" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (1 samples, 0.03%)</title><rect x="658.3" y="387.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="661.3" y="398.0"></text>
</g>
<g>
<title>current_time (2 samples, 0.06%)</title><rect x="658.7" y="387.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="661.7" y="398.0"></text>
</g>
<g>
<title>generic_update_time (2 samples, 0.06%)</title><rect x="659.4" y="387.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="662.4" y="398.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.06%)</title><rect x="659.4" y="371.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="662.4" y="382.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.06%)</title><rect x="659.4" y="355.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="662.4" y="366.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.06%)</title><rect x="659.4" y="339.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="662.4" y="350.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.03%)</title><rect x="659.7" y="323.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="662.7" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.03%)</title><rect x="659.7" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="662.7" y="318.0"></text>
</g>
<g>
<title>generic_perform_write (225 samples, 6.72%)</title><rect x="660.1" y="403.0" width="79.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="663.1" y="414.0">generic_p..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (4 samples, 0.12%)</title><rect x="661.1" y="387.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="664.1" y="398.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.03%)</title><rect x="662.5" y="387.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="665.5" y="398.0"></text>
</g>
<g>
<title>ext4_da_write_begin (74 samples, 2.21%)</title><rect x="662.9" y="387.0" width="26.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="665.9" y="398.0">e..</text>
</g>
<g>
<title>__ext4_journal_start_sb (29 samples, 0.87%)</title><rect x="665.4" y="371.0" width="10.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="668.4" y="382.0"></text>
</g>
<g>
<title>jbd2__journal_start (28 samples, 0.84%)</title><rect x="665.7" y="355.0" width="9.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="668.7" y="366.0"></text>
</g>
<g>
<title>_raw_read_lock (1 samples, 0.03%)</title><rect x="666.4" y="339.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="669.4" y="350.0"></text>
</g>
<g>
<title>add_transaction_credits (2 samples, 0.06%)</title><rect x="666.8" y="339.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="669.8" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (4 samples, 0.12%)</title><rect x="667.5" y="339.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="670.5" y="350.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (4 samples, 0.12%)</title><rect x="668.9" y="339.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="671.9" y="350.0"></text>
</g>
<g>
<title>memset (2 samples, 0.06%)</title><rect x="670.3" y="339.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="673.3" y="350.0"></text>
</g>
<g>
<title>start_this_handle (13 samples, 0.39%)</title><rect x="671.0" y="339.0" width="4.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="674.0" y="350.0"></text>
</g>
<g>
<title>add_transaction_credits (6 samples, 0.18%)</title><rect x="673.5" y="323.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="676.5" y="334.0"></text>
</g>
<g>
<title>ext4_block_write_begin (4 samples, 0.12%)</title><rect x="675.6" y="371.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="678.6" y="382.0"></text>
</g>
<g>
<title>create_empty_buffers (1 samples, 0.03%)</title><rect x="676.3" y="355.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="679.3" y="366.0"></text>
</g>
<g>
<title>alloc_page_buffers (1 samples, 0.03%)</title><rect x="676.3" y="339.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="679.3" y="350.0"></text>
</g>
<g>
<title>alloc_buffer_head (1 samples, 0.03%)</title><rect x="676.3" y="323.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="679.3" y="334.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.03%)</title><rect x="676.3" y="307.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="679.3" y="318.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.03%)</title><rect x="676.3" y="291.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="679.3" y="302.0"></text>
</g>
<g>
<title>___slab_alloc (1 samples, 0.03%)</title><rect x="676.3" y="275.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="679.3" y="286.0"></text>
</g>
<g>
<title>new_slab (1 samples, 0.03%)</title><rect x="676.3" y="259.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="679.3" y="270.0"></text>
</g>
<g>
<title>allocate_slab (1 samples, 0.03%)</title><rect x="676.3" y="243.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="679.3" y="254.0"></text>
</g>
<g>
<title>alloc_slab_page (1 samples, 0.03%)</title><rect x="676.3" y="227.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="679.3" y="238.0"></text>
</g>
<g>
<title>ext4_da_get_block_prep (1 samples, 0.03%)</title><rect x="676.6" y="355.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="679.6" y="366.0"></text>
</g>
<g>
<title>ext4_da_map_blocks.constprop.0 (1 samples, 0.03%)</title><rect x="676.6" y="339.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="679.6" y="350.0"></text>
</g>
<g>
<title>ext4_es_lookup_extent (1 samples, 0.03%)</title><rect x="676.6" y="323.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="679.6" y="334.0"></text>
</g>
<g>
<title>ext4_nonda_switch (2 samples, 0.06%)</title><rect x="677.0" y="371.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="680.0" y="382.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (32 samples, 0.96%)</title><rect x="677.7" y="371.0" width="11.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="680.7" y="382.0"></text>
</g>
<g>
<title>pagecache_get_page (31 samples, 0.93%)</title><rect x="677.7" y="355.0" width="10.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="680.7" y="366.0"></text>
</g>
<g>
<title>__page_cache_alloc (3 samples, 0.09%)</title><rect x="677.7" y="339.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="680.7" y="350.0"></text>
</g>
<g>
<title>alloc_pages_current (3 samples, 0.09%)</title><rect x="677.7" y="323.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="680.7" y="334.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.09%)</title><rect x="677.7" y="307.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="680.7" y="318.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.06%)</title><rect x="678.0" y="291.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="681.0" y="302.0"></text>
</g>
<g>
<title>clear_page_rep (1 samples, 0.03%)</title><rect x="678.0" y="275.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="681.0" y="286.0"></text>
</g>
<g>
<title>rmqueue (1 samples, 0.03%)</title><rect x="678.4" y="275.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="681.4" y="286.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (4 samples, 0.12%)</title><rect x="678.7" y="339.0" width="1.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="681.7" y="350.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (3 samples, 0.09%)</title><rect x="678.7" y="323.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="681.7" y="334.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.03%)</title><rect x="679.1" y="307.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="682.1" y="318.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (1 samples, 0.03%)</title><rect x="679.5" y="307.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="682.5" y="318.0"></text>
</g>
<g>
<title>get_mem_cgroup_from_mm (1 samples, 0.03%)</title><rect x="679.5" y="291.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="682.5" y="302.0"></text>
</g>
<g>
<title>lru_cache_add (1 samples, 0.03%)</title><rect x="679.8" y="323.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="682.8" y="334.0"></text>
</g>
<g>
<title>__lru_cache_add (1 samples, 0.03%)</title><rect x="679.8" y="307.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="682.8" y="318.0"></text>
</g>
<g>
<title>pagevec_lru_move_fn (1 samples, 0.03%)</title><rect x="679.8" y="291.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="682.8" y="302.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="679.8" y="275.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="682.8" y="286.0"></text>
</g>
<g>
<title>find_get_entry (24 samples, 0.72%)</title><rect x="680.2" y="339.0" width="8.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="683.2" y="350.0"></text>
</g>
<g>
<title>xas_load (12 samples, 0.36%)</title><rect x="682.6" y="323.0" width="4.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="685.6" y="334.0"></text>
</g>
<g>
<title>xas_start (5 samples, 0.15%)</title><rect x="686.9" y="323.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="689.9" y="334.0"></text>
</g>
<g>
<title>wait_for_stable_page (1 samples, 0.03%)</title><rect x="688.6" y="355.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="691.6" y="366.0"></text>
</g>
<g>
<title>ext4_da_write_end (127 samples, 3.79%)</title><rect x="689.0" y="387.0" width="44.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="692.0" y="398.0">ext4..</text>
</g>
<g>
<title>__ext4_journal_stop (22 samples, 0.66%)</title><rect x="689.7" y="371.0" width="7.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="692.7" y="382.0"></text>
</g>
<g>
<title>__wake_up (2 samples, 0.06%)</title><rect x="689.7" y="355.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="692.7" y="366.0"></text>
</g>
<g>
<title>jbd2_journal_stop (20 samples, 0.60%)</title><rect x="690.4" y="355.0" width="7.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="693.4" y="366.0"></text>
</g>
<g>
<title>__wake_up (7 samples, 0.21%)</title><rect x="693.9" y="339.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="696.9" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="693.9" y="323.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="696.9" y="334.0"></text>
</g>
<g>
<title>__wake_up_common_lock (6 samples, 0.18%)</title><rect x="694.3" y="323.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="697.3" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.18%)</title><rect x="694.3" y="307.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="697.3" y="318.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.09%)</title><rect x="696.4" y="339.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="699.4" y="350.0"></text>
</g>
<g>
<title>generic_write_end (103 samples, 3.08%)</title><rect x="697.4" y="371.0" width="36.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="700.4" y="382.0">gen..</text>
</g>
<g>
<title>__block_commit_write.isra.0 (1 samples, 0.03%)</title><rect x="697.4" y="355.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="700.4" y="366.0"></text>
</g>
<g>
<title>__mark_inode_dirty (93 samples, 2.78%)</title><rect x="697.8" y="355.0" width="32.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="700.8" y="366.0">__..</text>
</g>
<g>
<title>ext4_dirty_inode (90 samples, 2.69%)</title><rect x="698.5" y="339.0" width="31.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="701.5" y="350.0">ex..</text>
</g>
<g>
<title>__ext4_journal_stop (7 samples, 0.21%)</title><rect x="698.8" y="323.0" width="2.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="701.8" y="334.0"></text>
</g>
<g>
<title>jbd2_journal_stop (3 samples, 0.09%)</title><rect x="700.2" y="307.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="703.2" y="318.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (79 samples, 2.36%)</title><rect x="701.3" y="323.0" width="27.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="704.3" y="334.0">e..</text>
</g>
<g>
<title>__ext4_get_inode_loc (1 samples, 0.03%)</title><rect x="702.0" y="307.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="705.0" y="318.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (1 samples, 0.03%)</title><rect x="702.4" y="307.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="705.4" y="318.0"></text>
</g>
<g>
<title>ext4_do_update_inode (1 samples, 0.03%)</title><rect x="702.7" y="307.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="705.7" y="318.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (58 samples, 1.73%)</title><rect x="703.1" y="307.0" width="20.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="706.1" y="318.0"></text>
</g>
<g>
<title>__brelse (2 samples, 0.06%)</title><rect x="703.4" y="291.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="706.4" y="302.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.03%)</title><rect x="704.1" y="291.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="707.1" y="302.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.06%)</title><rect x="704.5" y="291.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="707.5" y="302.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.06%)</title><rect x="705.2" y="291.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="708.2" y="302.0"></text>
</g>
<g>
<title>ext4_do_update_inode (50 samples, 1.49%)</title><rect x="705.9" y="291.0" width="17.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="708.9" y="302.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (4 samples, 0.12%)</title><rect x="711.9" y="275.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="714.9" y="286.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="712.9" y="259.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="715.9" y="270.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.06%)</title><rect x="713.3" y="275.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="716.3" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (20 samples, 0.60%)</title><rect x="714.0" y="275.0" width="7.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="717.0" y="286.0"></text>
</g>
<g>
<title>crypto_shash_update (1 samples, 0.03%)</title><rect x="714.0" y="259.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="717.0" y="270.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (19 samples, 0.57%)</title><rect x="714.3" y="259.0" width="6.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="717.3" y="270.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (3 samples, 0.09%)</title><rect x="716.4" y="243.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="719.4" y="254.0"></text>
</g>
<g>
<title>crypto_shash_update (10 samples, 0.30%)</title><rect x="717.5" y="243.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="720.5" y="254.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (9 samples, 0.27%)</title><rect x="717.9" y="227.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="720.9" y="238.0"></text>
</g>
<g>
<title>from_kgid (2 samples, 0.06%)</title><rect x="721.0" y="275.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="724.0" y="286.0"></text>
</g>
<g>
<title>map_id_up (2 samples, 0.06%)</title><rect x="721.0" y="259.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="724.0" y="270.0"></text>
</g>
<g>
<title>from_kprojid (3 samples, 0.09%)</title><rect x="721.7" y="275.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="724.7" y="286.0"></text>
</g>
<g>
<title>map_id_up (3 samples, 0.09%)</title><rect x="721.7" y="259.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="724.7" y="270.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.03%)</title><rect x="722.8" y="275.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="725.8" y="286.0"></text>
</g>
<g>
<title>map_id_up (1 samples, 0.03%)</title><rect x="723.1" y="275.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="726.1" y="286.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (16 samples, 0.48%)</title><rect x="723.5" y="307.0" width="5.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="726.5" y="318.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (13 samples, 0.39%)</title><rect x="723.8" y="291.0" width="4.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="726.8" y="302.0"></text>
</g>
<g>
<title>__getblk_gfp (8 samples, 0.24%)</title><rect x="724.2" y="275.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="727.2" y="286.0"></text>
</g>
<g>
<title>__find_get_block (7 samples, 0.21%)</title><rect x="724.2" y="259.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="727.2" y="270.0"></text>
</g>
<g>
<title>mark_page_accessed (4 samples, 0.12%)</title><rect x="725.3" y="243.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="728.3" y="254.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="726.7" y="259.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="729.7" y="270.0"></text>
</g>
<g>
<title>preempt_schedule_common (1 samples, 0.03%)</title><rect x="726.7" y="243.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="729.7" y="254.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="726.7" y="227.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="729.7" y="238.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="726.7" y="211.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="729.7" y="222.0"></text>
</g>
<g>
<title>ext4_get_group_desc (4 samples, 0.12%)</title><rect x="727.0" y="275.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="730.0" y="286.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (2 samples, 0.06%)</title><rect x="728.4" y="291.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="731.4" y="302.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.06%)</title><rect x="728.4" y="275.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="731.4" y="286.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (2 samples, 0.06%)</title><rect x="728.4" y="259.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="731.4" y="270.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (3 samples, 0.09%)</title><rect x="729.1" y="323.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="732.1" y="334.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (1 samples, 0.03%)</title><rect x="730.2" y="339.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="733.2" y="350.0"></text>
</g>
<g>
<title>block_write_end (7 samples, 0.21%)</title><rect x="730.5" y="355.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="733.5" y="366.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (4 samples, 0.12%)</title><rect x="730.5" y="339.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="733.5" y="350.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.06%)</title><rect x="731.2" y="323.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="734.2" y="334.0"></text>
</g>
<g>
<title>__set_page_dirty (1 samples, 0.03%)</title><rect x="731.6" y="307.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="734.6" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="731.6" y="291.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="734.6" y="302.0"></text>
</g>
<g>
<title>mark_buffer_dirty (3 samples, 0.09%)</title><rect x="732.0" y="339.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="735.0" y="350.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.06%)</title><rect x="733.0" y="355.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="736.0" y="366.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.03%)</title><rect x="733.7" y="387.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="736.7" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="734.1" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="737.1" y="398.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (9 samples, 0.27%)</title><rect x="734.4" y="387.0" width="3.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="737.4" y="398.0"></text>
</g>
<g>
<title>copy_user_generic_string (7 samples, 0.21%)</title><rect x="735.1" y="371.0" width="2.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="738.1" y="382.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (3 samples, 0.09%)</title><rect x="737.6" y="387.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="740.6" y="398.0"></text>
</g>
<g>
<title>unlock_page (2 samples, 0.06%)</title><rect x="738.6" y="387.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="741.6" y="398.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (4 samples, 0.12%)</title><rect x="739.4" y="403.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="742.4" y="414.0"></text>
</g>
<g>
<title>down_write_trylock (1 samples, 0.03%)</title><rect x="740.8" y="419.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="743.8" y="430.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.03%)</title><rect x="741.1" y="419.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="744.1" y="430.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (1 samples, 0.03%)</title><rect x="741.1" y="403.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="744.1" y="414.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.03%)</title><rect x="741.5" y="419.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="744.5" y="430.0"></text>
</g>
<g>
<title>generic_perform_write (1 samples, 0.03%)</title><rect x="741.8" y="419.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="744.8" y="430.0"></text>
</g>
<g>
<title>up_write (1 samples, 0.03%)</title><rect x="742.2" y="435.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="745.2" y="446.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.03%)</title><rect x="742.5" y="467.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="745.5" y="478.0"></text>
</g>
<g>
<title>rw_verify_area (9 samples, 0.27%)</title><rect x="742.9" y="467.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="745.9" y="478.0"></text>
</g>
<g>
<title>security_file_permission (8 samples, 0.24%)</title><rect x="743.2" y="451.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="746.2" y="462.0"></text>
</g>
<g>
<title>apparmor_file_permission (6 samples, 0.18%)</title><rect x="743.2" y="435.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="746.2" y="446.0"></text>
</g>
<g>
<title>common_file_perm (6 samples, 0.18%)</title><rect x="743.2" y="419.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="746.2" y="430.0"></text>
</g>
<g>
<title>aa_file_perm (3 samples, 0.09%)</title><rect x="744.3" y="403.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="747.3" y="414.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.06%)</title><rect x="745.3" y="435.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="748.3" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="746.0" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="749.0" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="746.0" y="531.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="749.0" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="746.0" y="515.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="749.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.09%)</title><rect x="746.4" y="563.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.06%)</title><rect x="747.5" y="563.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.5" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="748.2" y="579.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="751.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="748.2" y="563.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="751.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="748.2" y="547.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="751.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (2 samples, 0.06%)</title><rect x="748.5" y="595.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="751.5" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="748.9" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="751.9" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="748.9" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="751.9" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="748.9" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="751.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (22 samples, 0.66%)</title><rect x="749.2" y="595.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="752.2" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.09%)</title><rect x="749.9" y="579.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="752.9" y="590.0"></text>
</g>
<g>
<title>memcpy (2 samples, 0.06%)</title><rect x="751.0" y="579.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="754.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="751.7" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="754.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (2 samples, 0.06%)</title><rect x="752.0" y="579.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="755.0" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="752.4" y="563.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="755.4" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="752.4" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="755.4" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="752.4" y="531.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="755.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (8 samples, 0.24%)</title><rect x="752.7" y="579.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="755.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.03%)</title><rect x="754.9" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="757.9" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="755.2" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="758.2" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="755.2" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="758.2" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="755.2" y="531.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="758.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (4 samples, 0.12%)</title><rect x="755.6" y="579.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="758.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="757.0" y="595.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="760.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="757.0" y="579.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="760.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="757.0" y="563.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="760.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.06%)</title><rect x="758.0" y="611.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="761.0" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="758.7" y="611.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="761.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="758.7" y="595.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="761.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="758.7" y="579.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="761.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="759.4" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="762.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) [clone .plt] (1 samples, 0.03%)</title><rect x="759.8" y="627.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.12%)</title><rect x="760.1" y="627.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="763.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.03%)</title><rect x="761.5" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="764.5" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="761.5" y="611.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="764.5" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="761.5" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="764.5" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="761.5" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="764.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (8 samples, 0.24%)</title><rect x="761.9" y="643.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="764.9" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="764.0" y="627.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="767.0" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="764.0" y="611.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="767.0" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="764.0" y="595.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="767.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (7 samples, 0.21%)</title><rect x="764.7" y="643.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.7" y="654.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="764.7" y="627.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.7" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="764.7" y="611.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="767.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="764.7" y="595.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="767.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="764.7" y="579.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="767.7" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.15%)</title><rect x="765.1" y="627.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="768.1" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (1 samples, 0.03%)</title><rect x="766.8" y="627.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="769.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() (4 samples, 0.12%)</title><rect x="767.2" y="643.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.2" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="768.2" y="627.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="771.2" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="768.2" y="611.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="771.2" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="768.2" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="771.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::LockInternal() [clone .plt] (1 samples, 0.03%)</title><rect x="768.6" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="771.6" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="768.6" y="627.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="771.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="768.6" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="771.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="768.6" y="595.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="771.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.06%)</title><rect x="768.9" y="643.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="771.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (3 samples, 0.09%)</title><rect x="769.7" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="772.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (2 samples, 0.06%)</title><rect x="770.7" y="643.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="773.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (2 samples, 0.06%)</title><rect x="771.4" y="643.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="774.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (1 samples, 0.03%)</title><rect x="772.1" y="643.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="775.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.03%)</title><rect x="772.5" y="643.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="775.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.09%)</title><rect x="772.8" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.8" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="773.5" y="627.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="776.5" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="773.5" y="611.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="776.5" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="773.5" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="776.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const [clone .plt] (1 samples, 0.03%)</title><rect x="773.9" y="643.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="776.9" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="773.9" y="627.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="776.9" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="773.9" y="611.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="776.9" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="773.9" y="595.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="776.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (241 samples, 7.20%)</title><rect x="774.2" y="643.0" width="84.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="777.2" y="654.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (232 samples, 6.93%)</title><rect x="776.3" y="627.0" width="81.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="779.3" y="638.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.12%)</title><rect x="776.3" y="611.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="779.3" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="777.4" y="595.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="780.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="777.4" y="579.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="780.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="777.4" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="780.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.12%)</title><rect x="777.8" y="611.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="780.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (224 samples, 6.69%)</title><rect x="779.2" y="611.0" width="78.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="782.2" y="622.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (214 samples, 6.39%)</title><rect x="780.6" y="595.0" width="75.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="783.6" y="606.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (4 samples, 0.12%)</title><rect x="780.6" y="579.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="781.6" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="784.6" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="781.6" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="784.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="781.6" y="531.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="784.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.09%)</title><rect x="782.0" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (2 samples, 0.06%)</title><rect x="783.0" y="579.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.0" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="783.4" y="563.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="786.4" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="783.4" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="786.4" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="783.4" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="786.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (2 samples, 0.06%)</title><rect x="783.7" y="579.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="786.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (203 samples, 6.06%)</title><rect x="784.5" y="579.0" width="71.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="787.5" y="590.0">rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (7 samples, 0.21%)</title><rect x="784.8" y="563.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="787.8" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="786.9" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="789.9" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="786.9" y="531.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="789.9" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="786.9" y="515.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="789.9" y="526.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.06%)</title><rect x="787.3" y="563.0" width="0.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="790.3" y="574.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.06%)</title><rect x="787.3" y="547.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="790.3" y="558.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.06%)</title><rect x="787.3" y="531.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="790.3" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.06%)</title><rect x="787.3" y="515.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="790.3" y="526.0"></text>
</g>
<g>
<title>do_user_addr_fault (2 samples, 0.06%)</title><rect x="787.3" y="499.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="790.3" y="510.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="787.6" y="483.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="790.6" y="494.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="787.6" y="467.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="790.6" y="478.0"></text>
</g>
<g>
<title>do_anonymous_page (1 samples, 0.03%)</title><rect x="787.6" y="451.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="790.6" y="462.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="787.6" y="435.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="790.6" y="446.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.03%)</title><rect x="787.6" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="790.6" y="430.0"></text>
</g>
<g>
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="787.6" y="403.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="790.6" y="414.0"></text>
</g>
<g>
<title>rmqueue (1 samples, 0.03%)</title><rect x="787.6" y="387.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="790.6" y="398.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (2 samples, 0.06%)</title><rect x="788.0" y="563.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (2 samples, 0.06%)</title><rect x="788.7" y="563.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="791.7" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="789.0" y="547.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="792.0" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="789.0" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="792.0" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="789.0" y="515.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="792.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (180 samples, 5.37%)</title><rect x="789.4" y="563.0" width="63.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="792.4" y="574.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (9 samples, 0.27%)</title><rect x="794.7" y="547.0" width="3.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="797.7" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.06%)</title><rect x="794.7" y="531.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="797.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (5 samples, 0.15%)</title><rect x="795.4" y="531.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="798.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="796.1" y="515.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="799.1" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="796.8" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="799.8" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="796.8" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="799.8" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="796.8" y="483.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="799.8" y="494.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="796.8" y="467.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="799.8" y="478.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="796.8" y="451.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="799.8" y="462.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="796.8" y="435.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="799.8" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="797.1" y="531.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.1" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="797.1" y="515.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="800.1" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="797.1" y="499.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.1" y="510.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (144 samples, 4.30%)</title><rect x="797.8" y="547.0" width="50.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="800.8" y="558.0">bool ..</text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (130 samples, 3.88%)</title><rect x="801.4" y="531.0" width="45.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="804.4" y="542.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (50 samples, 1.49%)</title><rect x="820.0" y="515.0" width="17.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="823.0" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (3 samples, 0.09%)</title><rect x="821.4" y="499.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="824.4" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="822.5" y="499.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="825.5" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.21%)</title><rect x="823.2" y="499.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="826.2" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.06%)</title><rect x="825.7" y="499.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="828.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (31 samples, 0.93%)</title><rect x="826.4" y="499.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="829.4" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (3 samples, 0.09%)</title><rect x="830.3" y="483.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="833.3" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="831.0" y="467.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="834.0" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="831.0" y="451.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="834.0" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="831.0" y="435.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="834.0" y="446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (11 samples, 0.33%)</title><rect x="831.3" y="483.0" width="3.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="834.3" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="834.1" y="467.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="837.1" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="834.1" y="451.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="837.1" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="834.1" y="435.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="837.1" y="446.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.06%)</title><rect x="835.2" y="483.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="838.2" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="835.5" y="467.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="838.5" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="835.5" y="451.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="838.5" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="835.5" y="435.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="838.5" y="446.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="835.9" y="483.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="838.9" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="835.9" y="467.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="838.9" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="835.9" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="838.9" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="835.9" y="435.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="838.9" y="446.0"></text>
</g>
<g>
<title>memcmp@plt (1 samples, 0.03%)</title><rect x="836.2" y="483.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="839.2" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="836.2" y="467.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="839.2" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="836.2" y="451.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="839.2" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="836.2" y="435.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="839.2" y="446.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="836.6" y="483.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="839.6" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="836.6" y="467.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="839.6" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="836.6" y="451.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="839.6" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="837.3" y="499.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="840.3" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="837.3" y="483.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="840.3" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="837.3" y="467.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="840.3" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (11 samples, 0.33%)</title><rect x="837.7" y="515.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.7" y="526.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.21%)</title><rect x="839.1" y="499.0" width="2.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="842.1" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="841.2" y="483.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="844.2" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="841.2" y="467.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="844.2" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="841.2" y="451.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="844.2" y="462.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (16 samples, 0.48%)</title><rect x="841.5" y="515.0" width="5.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="844.5" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (16 samples, 0.48%)</title><rect x="841.5" y="499.0" width="5.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="844.5" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (16 samples, 0.48%)</title><rect x="841.5" y="483.0" width="5.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="844.5" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.09%)</title><rect x="847.2" y="531.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="850.2" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="847.9" y="515.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="850.9" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="848.2" y="531.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="851.2" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="848.2" y="515.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="851.2" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="848.2" y="499.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="851.2" y="510.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="848.6" y="547.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="851.6" y="558.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="848.6" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="851.6" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="848.6" y="515.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="851.6" y="526.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="848.6" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="851.6" y="510.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (2 samples, 0.06%)</title><rect x="848.9" y="547.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.9" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="849.3" y="531.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="852.3" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="849.3" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="852.3" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="849.3" y="499.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="852.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.03%)</title><rect x="849.6" y="547.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="852.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() [clone .plt] (1 samples, 0.03%)</title><rect x="850.0" y="547.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="853.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.09%)</title><rect x="850.3" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.3" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (1 samples, 0.03%)</title><rect x="850.3" y="531.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="853.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.06%)</title><rect x="850.7" y="531.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="853.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="851.4" y="547.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="854.4" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="851.7" y="547.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="854.7" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="851.7" y="531.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="854.7" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="851.7" y="515.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="854.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.09%)</title><rect x="852.8" y="563.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="855.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.06%)</title><rect x="853.9" y="563.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.9" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="853.9" y="547.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="856.9" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="853.9" y="531.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="856.9" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="853.9" y="515.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="856.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (3 samples, 0.09%)</title><rect x="854.6" y="563.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="857.6" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="855.6" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="858.6" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="855.6" y="547.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="858.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="855.6" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="858.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (1 samples, 0.03%)</title><rect x="856.0" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.0" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="856.0" y="579.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="859.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="856.0" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="859.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="856.0" y="547.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="859.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.06%)</title><rect x="856.3" y="595.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="857.0" y="595.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="860.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="857.0" y="579.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="860.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="857.0" y="563.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="860.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (3 samples, 0.09%)</title><rect x="858.1" y="627.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (80 samples, 2.39%)</title><rect x="859.1" y="643.0" width="28.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="862.1" y="654.0">ro..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="859.9" y="627.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="862.9" y="638.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.03%)</title><rect x="860.2" y="627.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="863.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (2 samples, 0.06%)</title><rect x="860.6" y="627.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.6" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (1 samples, 0.03%)</title><rect x="860.6" y="611.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="863.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (1 samples, 0.03%)</title><rect x="860.9" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="863.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (72 samples, 2.15%)</title><rect x="861.3" y="627.0" width="25.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="864.3" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="861.3" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (71 samples, 2.12%)</title><rect x="861.6" y="611.0" width="25.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.6" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (67 samples, 2.00%)</title><rect x="862.7" y="595.0" width="23.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="865.7" y="606.0">r..</text>
</g>
<g>
<title>__libc_malloc (1 samples, 0.03%)</title><rect x="862.7" y="579.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="865.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.03%)</title><rect x="863.0" y="579.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="866.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.03%)</title><rect x="863.4" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="866.4" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="863.4" y="563.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="866.4" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="863.4" y="547.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="866.4" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="863.4" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="866.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (63 samples, 1.88%)</title><rect x="863.7" y="579.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.7" y="590.0">r..</text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (1 samples, 0.03%)</title><rect x="864.4" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="867.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (1 samples, 0.03%)</title><rect x="864.8" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="867.8" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="864.8" y="547.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="867.8" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="864.8" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="867.8" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="864.8" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="867.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (55 samples, 1.64%)</title><rect x="865.1" y="563.0" width="19.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="868.1" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (2 samples, 0.06%)</title><rect x="867.3" y="547.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="870.3" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.03%)</title><rect x="868.0" y="547.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="871.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (44 samples, 1.31%)</title><rect x="868.3" y="547.0" width="15.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.3" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (44 samples, 1.31%)</title><rect x="868.3" y="531.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="871.3" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (40 samples, 1.19%)</title><rect x="869.7" y="515.0" width="14.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="872.7" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (11 samples, 0.33%)</title><rect x="877.8" y="499.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="880.8" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="877.8" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="880.8" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (10 samples, 0.30%)</title><rect x="878.2" y="483.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="881.2" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni12318600840717126181.so (1 samples, 0.03%)</title><rect x="879.9" y="467.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="882.9" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.12%)</title><rect x="880.3" y="467.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="883.3" y="478.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.18%)</title><rect x="881.7" y="499.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="884.7" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.18%)</title><rect x="881.7" y="483.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="884.7" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.18%)</title><rect x="881.7" y="467.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="884.7" y="478.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.03%)</title><rect x="883.8" y="547.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="886.8" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="884.2" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="887.2" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="884.2" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="887.2" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="884.2" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="887.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (1 samples, 0.03%)</title><rect x="884.5" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="887.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (3 samples, 0.09%)</title><rect x="884.9" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.9" y="574.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_unique_pos(rocksdb::MemTable* const&amp;) (1 samples, 0.03%)</title><rect x="885.9" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="888.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) [clone .plt] (1 samples, 0.03%)</title><rect x="886.3" y="595.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.03%)</title><rect x="886.6" y="627.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="889.6" y="638.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() [clone .plt] (1 samples, 0.03%)</title><rect x="887.0" y="627.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.03%)</title><rect x="887.3" y="643.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="890.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (4 samples, 0.12%)</title><rect x="887.7" y="643.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.7" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="888.4" y="627.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="891.4" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="888.4" y="611.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="891.4" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="888.4" y="595.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="891.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (69 samples, 2.06%)</title><rect x="889.1" y="643.0" width="24.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="892.1" y="654.0">r..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (1 samples, 0.03%)</title><rect x="904.2" y="627.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="907.2" y="638.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.03%)</title><rect x="904.6" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="907.6" y="638.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.03%)</title><rect x="905.0" y="627.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="908.0" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="905.0" y="611.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="908.0" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="905.0" y="595.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="908.0" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="905.0" y="579.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="908.0" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.06%)</title><rect x="905.3" y="627.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="908.3" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="905.7" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="908.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="905.7" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="908.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="905.7" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="908.7" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.09%)</title><rect x="906.0" y="627.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="909.0" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="906.4" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="909.4" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.06%)</title><rect x="906.4" y="595.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="909.4" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="906.7" y="579.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="909.7" y="590.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="906.7" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="909.7" y="574.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="906.7" y="547.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="909.7" y="558.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="906.7" y="531.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="909.7" y="542.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (1 samples, 0.03%)</title><rect x="906.7" y="515.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="909.7" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.09%)</title><rect x="907.1" y="627.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="910.1" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.06%)</title><rect x="908.1" y="627.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="911.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="908.5" y="611.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="911.5" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="908.5" y="595.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="911.5" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="908.5" y="579.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="911.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.06%)</title><rect x="908.8" y="627.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="911.8" y="638.0"></text>
</g>
<g>
<title>std::condition_variable::condition_variable() (2 samples, 0.06%)</title><rect x="909.5" y="627.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.5" y="638.0"></text>
</g>
<g>
<title>std::condition_variable::condition_variable() [clone .plt] (1 samples, 0.03%)</title><rect x="910.2" y="627.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.2" y="638.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="910.6" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="913.6" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.21%)</title><rect x="910.9" y="627.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="913.9" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 0.21%)</title><rect x="910.9" y="611.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="913.9" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.21%)</title><rect x="910.9" y="595.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="913.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.03%)</title><rect x="913.4" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (85 samples, 2.54%)</title><rect x="913.8" y="643.0" width="29.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="916.8" y="654.0">ro..</text>
</g>
<g>
<title>__sched_yield (57 samples, 1.70%)</title><rect x="914.8" y="627.0" width="20.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="917.8" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (48 samples, 1.43%)</title><rect x="918.0" y="611.0" width="16.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="921.0" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (1 samples, 0.03%)</title><rect x="918.0" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="921.0" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (47 samples, 1.40%)</title><rect x="918.3" y="595.0" width="16.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="921.3" y="606.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (31 samples, 0.93%)</title><rect x="924.0" y="579.0" width="10.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="927.0" y="590.0"></text>
</g>
<g>
<title>do_sched_yield (31 samples, 0.93%)</title><rect x="924.0" y="563.0" width="10.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="927.0" y="574.0"></text>
</g>
<g>
<title>schedule (30 samples, 0.90%)</title><rect x="924.3" y="547.0" width="10.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="927.3" y="558.0"></text>
</g>
<g>
<title>__schedule (30 samples, 0.90%)</title><rect x="924.3" y="531.0" width="10.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="927.3" y="542.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="934.6" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="937.6" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="934.9" y="627.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="937.9" y="638.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="935.3" y="627.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="938.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (21 samples, 0.63%)</title><rect x="935.6" y="627.0" width="7.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="938.6" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="941.2" y="611.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="944.2" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="941.2" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="944.2" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="941.2" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="944.2" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="941.2" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="944.2" y="574.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="941.2" y="547.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="944.2" y="558.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="941.2" y="531.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="944.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.03%)</title><rect x="941.6" y="611.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="944.6" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="941.6" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="944.6" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="941.6" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="944.6" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="941.6" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="944.6" y="574.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (1 samples, 0.03%)</title><rect x="941.9" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="944.9" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="942.3" y="611.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="945.3" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="942.3" y="595.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="945.3" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="942.3" y="579.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="945.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.03%)</title><rect x="943.0" y="627.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.0" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="943.4" y="627.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="946.4" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="943.4" y="611.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="946.4" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="943.4" y="595.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="946.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (3 samples, 0.09%)</title><rect x="943.7" y="643.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="946.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.06%)</title><rect x="944.8" y="643.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="947.8" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="945.1" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="948.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="945.1" y="611.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="948.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="945.1" y="595.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="948.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="945.5" y="643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.03%)</title><rect x="945.5" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.5" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="945.5" y="611.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="948.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (6 samples, 0.18%)</title><rect x="945.8" y="643.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.8" y="654.0"></text>
</g>
<g>
<title>pthread_cond_signal (1 samples, 0.03%)</title><rect x="946.9" y="627.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="949.9" y="638.0"></text>
</g>
<g>
<title>std::condition_variable::notify_one() (1 samples, 0.03%)</title><rect x="947.2" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="950.2" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="947.6" y="627.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="950.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="947.6" y="611.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="950.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="947.6" y="595.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="950.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (8 samples, 0.24%)</title><rect x="947.9" y="643.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="950.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (8 samples, 0.24%)</title><rect x="947.9" y="627.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="950.9" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="950.1" y="611.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="953.1" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="950.1" y="595.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="953.1" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="950.1" y="579.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="953.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (1 samples, 0.03%)</title><rect x="950.8" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="953.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.03%)</title><rect x="951.1" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) [clone .plt] (2 samples, 0.06%)</title><rect x="951.5" y="643.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.06%)</title><rect x="952.2" y="643.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.2" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="952.5" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="955.5" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="952.5" y="611.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="955.5" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="952.5" y="595.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="955.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.12%)</title><rect x="952.9" y="643.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.9" y="654.0"></text>
</g>
<g>
<title>std::chrono::_V2::steady_clock::now() (1 samples, 0.03%)</title><rect x="954.3" y="643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="957.3" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.21%)</title><rect x="954.6" y="643.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="957.6" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 0.21%)</title><rect x="954.6" y="627.0" width="2.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="957.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.21%)</title><rect x="954.6" y="611.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="957.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (7 samples, 0.21%)</title><rect x="957.1" y="659.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.1" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="958.9" y="643.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="961.9" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="958.9" y="627.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="961.9" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="958.9" y="611.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="961.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (2 samples, 0.06%)</title><rect x="959.6" y="659.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="962.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (2 samples, 0.06%)</title><rect x="960.3" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="963.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="960.6" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="963.6" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="960.6" y="627.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="963.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="960.6" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="963.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() [clone .plt] (2 samples, 0.06%)</title><rect x="961.0" y="659.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="964.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="961.7" y="659.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="964.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.03%)</title><rect x="962.4" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.4" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="962.4" y="643.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="965.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="962.4" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="965.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="962.4" y="611.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="965.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (3 samples, 0.09%)</title><rect x="962.7" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="965.7" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="963.4" y="643.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="966.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="963.4" y="627.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="966.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="963.4" y="611.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="966.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (3 samples, 0.09%)</title><rect x="963.8" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.8" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="964.1" y="643.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="967.1" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="964.1" y="627.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="967.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="964.1" y="611.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="967.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) [clone .plt] (1 samples, 0.03%)</title><rect x="964.9" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="967.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (1 samples, 0.03%)</title><rect x="965.2" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="968.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (1 samples, 0.03%)</title><rect x="965.6" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="968.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (1 samples, 0.03%)</title><rect x="965.9" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="968.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.06%)</title><rect x="966.3" y="659.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="969.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.09%)</title><rect x="967.0" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.0" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="967.3" y="643.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="970.3" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="967.3" y="627.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="970.3" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="967.3" y="611.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="970.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) [clone .plt] (2 samples, 0.06%)</title><rect x="968.0" y="659.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.06%)</title><rect x="968.7" y="659.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="971.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.03%)</title><rect x="969.4" y="659.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="972.4" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="969.4" y="643.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="972.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="969.4" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="972.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="969.4" y="611.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="972.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.06%)</title><rect x="969.8" y="675.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="972.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.12%)</title><rect x="970.5" y="675.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="973.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (26 samples, 0.78%)</title><rect x="971.9" y="675.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="974.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.03%)</title><rect x="971.9" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (8 samples, 0.24%)</title><rect x="972.3" y="659.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="974.7" y="643.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="977.7" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="974.7" y="627.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="977.7" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="974.7" y="611.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="977.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (2 samples, 0.06%)</title><rect x="975.1" y="659.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const [clone .plt] (1 samples, 0.03%)</title><rect x="975.8" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="978.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.15%)</title><rect x="976.1" y="659.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.1" y="670.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (3 samples, 0.09%)</title><rect x="976.8" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (5 samples, 0.15%)</title><rect x="977.9" y="659.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="980.9" y="670.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (3 samples, 0.09%)</title><rect x="979.7" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="982.7" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="980.4" y="643.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="983.4" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="980.4" y="627.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="983.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="980.4" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="983.4" y="622.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (1 samples, 0.03%)</title><rect x="980.7" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="983.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.06%)</title><rect x="981.1" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.09%)</title><rect x="981.8" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="984.8" y="686.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="982.8" y="675.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.8" y="686.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (6 samples, 0.18%)</title><rect x="983.2" y="675.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="986.2" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="984.9" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="987.9" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="984.9" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="987.9" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="984.9" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="987.9" y="638.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) [clone .plt] (2 samples, 0.06%)</title><rect x="985.3" y="675.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="988.3" y="686.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) [clone .plt] (1 samples, 0.03%)</title><rect x="986.0" y="675.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="989.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.09%)</title><rect x="986.3" y="691.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="989.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (1 samples, 0.03%)</title><rect x="987.4" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (1 samples, 0.03%)</title><rect x="987.8" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.06%)</title><rect x="988.1" y="723.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="991.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.03%)</title><rect x="988.8" y="723.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="991.8" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="988.8" y="707.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="991.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="988.8" y="691.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="991.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="988.8" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="991.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.12%)</title><rect x="989.2" y="723.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 1.82%)</title><rect x="990.6" y="755.0" width="21.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="993.6" y="766.0">[..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.09%)</title><rect x="990.6" y="739.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="993.6" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="991.3" y="723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="994.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="991.3" y="707.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="994.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="991.3" y="691.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="994.3" y="702.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (3 samples, 0.09%)</title><rect x="991.6" y="739.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="994.6" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="992.3" y="723.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="995.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="992.3" y="707.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="995.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="992.3" y="691.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="995.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="992.7" y="739.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="995.7" y="750.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (1 samples, 0.03%)</title><rect x="992.7" y="723.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.7" y="734.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="992.7" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="995.7" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (44 samples, 1.31%)</title><rect x="993.0" y="739.0" width="15.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="996.0" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (39 samples, 1.16%)</title><rect x="994.8" y="723.0" width="13.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="997.8" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="994.8" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="997.8" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (38 samples, 1.13%)</title><rect x="995.2" y="707.0" width="13.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="998.2" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (33 samples, 0.99%)</title><rect x="996.9" y="691.0" width="11.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="999.9" y="702.0"></text>
</g>
<g>
<title>do_futex (31 samples, 0.93%)</title><rect x="997.3" y="675.0" width="10.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1000.3" y="686.0"></text>
</g>
<g>
<title>futex_wait (30 samples, 0.90%)</title><rect x="997.6" y="659.0" width="10.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1000.6" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (22 samples, 0.66%)</title><rect x="998.0" y="643.0" width="7.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1001.0" y="654.0"></text>
</g>
<g>
<title>schedule (22 samples, 0.66%)</title><rect x="998.0" y="627.0" width="7.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1001.0" y="638.0"></text>
</g>
<g>
<title>__schedule (22 samples, 0.66%)</title><rect x="998.0" y="611.0" width="7.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1001.0" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (21 samples, 0.63%)</title><rect x="998.3" y="595.0" width="7.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1001.3" y="606.0"></text>
</g>
<g>
<title>futex_wait_setup (7 samples, 0.21%)</title><rect x="1005.7" y="643.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1008.7" y="654.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.06%)</title><rect x="1007.1" y="627.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1010.1" y="638.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.03%)</title><rect x="1007.8" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1010.8" y="638.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="1008.2" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1011.2" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="1008.5" y="739.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1011.5" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="1008.9" y="739.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1011.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.03%)</title><rect x="1009.2" y="739.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1012.2" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1009.2" y="723.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1012.2" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1009.2" y="707.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1012.2" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1009.2" y="691.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1012.2" y="702.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.03%)</title><rect x="1009.6" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.6" y="750.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (4 samples, 0.12%)</title><rect x="1010.0" y="739.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.0" y="750.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (2 samples, 0.06%)</title><rect x="1011.4" y="739.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1014.4" y="750.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (2 samples, 0.06%)</title><rect x="1011.4" y="723.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.4" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1011.7" y="707.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1014.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1011.7" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1014.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1011.7" y="675.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1014.7" y="686.0"></text>
</g>
<g>
<title>__libc_malloc (9 samples, 0.27%)</title><rect x="1012.1" y="755.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1015.1" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1014.9" y="739.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1017.9" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1014.9" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1017.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1014.9" y="707.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1017.9" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (191 samples, 5.70%)</title><rect x="1015.2" y="755.0" width="67.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1018.2" y="766.0">__pthre..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (190 samples, 5.67%)</title><rect x="1015.6" y="739.0" width="66.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1018.6" y="750.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (190 samples, 5.67%)</title><rect x="1015.6" y="723.0" width="66.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1018.6" y="734.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_futex (188 samples, 5.61%)</title><rect x="1016.3" y="707.0" width="66.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1019.3" y="718.0">__x64_s..</text>
</g>
<g>
<title>do_futex (188 samples, 5.61%)</title><rect x="1016.3" y="691.0" width="66.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1019.3" y="702.0">do_futex</text>
</g>
<g>
<title>futex_wake (187 samples, 5.58%)</title><rect x="1016.6" y="675.0" width="65.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1019.6" y="686.0">futex_w..</text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="1017.0" y="659.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1020.0" y="670.0"></text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.15%)</title><rect x="1017.4" y="659.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1020.4" y="670.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.06%)</title><rect x="1018.1" y="643.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1021.1" y="654.0"></text>
</g>
<g>
<title>plist_del (1 samples, 0.03%)</title><rect x="1018.8" y="643.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1021.8" y="654.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.03%)</title><rect x="1019.1" y="659.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1022.1" y="670.0"></text>
</g>
<g>
<title>wake_up_q (179 samples, 5.34%)</title><rect x="1019.5" y="659.0" width="63.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1022.5" y="670.0">wake_up_q</text>
</g>
<g>
<title>try_to_wake_up (178 samples, 5.32%)</title><rect x="1019.8" y="643.0" width="62.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1022.8" y="654.0">try_to..</text>
</g>
<g>
<title>__lock_text_start (178 samples, 5.32%)</title><rect x="1019.8" y="627.0" width="62.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1022.8" y="638.0">__lock..</text>
</g>
<g>
<title>clock_gettime (24 samples, 0.72%)</title><rect x="1082.5" y="755.0" width="8.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1085.5" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.06%)</title><rect x="1083.2" y="739.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1086.2" y="750.0"></text>
</g>
<g>
<title>clock_gettime (20 samples, 0.60%)</title><rect x="1083.9" y="739.0" width="7.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1086.9" y="750.0"></text>
</g>
<g>
<title>[vdso] (19 samples, 0.57%)</title><rect x="1084.3" y="723.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1087.3" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="1089.9" y="707.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1092.9" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="1089.9" y="691.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1092.9" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="1089.9" y="675.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1092.9" y="686.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (4 samples, 0.12%)</title><rect x="1091.0" y="755.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1094.0" y="766.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.03%)</title><rect x="1092.4" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1095.4" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1092.8" y="755.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1095.8" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1092.8" y="739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1095.8" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1092.8" y="723.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1095.8" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1093.1" y="771.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1096.1" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1093.1" y="755.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1096.1" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1093.1" y="739.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1096.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.unfoldToBytes (6 samples, 0.18%)</title><rect x="1093.8" y="787.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1096.8" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.18%)</title><rect x="1093.8" y="771.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1096.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="1093.8" y="755.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.8" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="1093.8" y="739.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1096.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="1093.8" y="723.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1096.8" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1093.8" y="707.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.8" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="1093.8" y="691.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1096.8" y="702.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="1093.8" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.8" y="686.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.03%)</title><rect x="1094.2" y="675.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.2" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1094.5" y="755.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1097.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1094.5" y="739.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1097.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1094.5" y="723.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1097.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1094.5" y="707.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1097.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1095.2" y="691.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1098.2" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1095.2" y="675.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1098.2" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1095.2" y="659.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1098.2" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (13 samples, 0.39%)</title><rect x="1095.9" y="787.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1098.9" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.03%)</title><rect x="1097.0" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1100.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (9 samples, 0.27%)</title><rect x="1097.3" y="771.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1100.3" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (3 samples, 0.09%)</title><rect x="1097.3" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1100.3" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.09%)</title><rect x="1097.3" y="739.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1100.3" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.09%)</title><rect x="1097.3" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1100.3" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="1098.0" y="707.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1101.0" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1098.0" y="691.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1101.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1098.0" y="675.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1101.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1098.0" y="659.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1101.0" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.18%)</title><rect x="1098.4" y="755.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1101.4" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.18%)</title><rect x="1098.4" y="739.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1101.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.18%)</title><rect x="1098.4" y="723.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1101.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1099.8" y="707.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1102.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="1100.2" y="707.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 0.60%)</title><rect x="1100.5" y="835.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 0.60%)</title><rect x="1100.5" y="819.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1103.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.18%)</title><rect x="1100.5" y="803.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1103.5" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1102.3" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1105.3" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1102.3" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1105.3" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1102.3" y="755.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1105.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (14 samples, 0.42%)</title><rect x="1102.6" y="803.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1105.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (14 samples, 0.42%)</title><rect x="1102.6" y="787.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1105.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (14 samples, 0.42%)</title><rect x="1102.6" y="771.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1105.6" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1106.8" y="755.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1109.8" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1106.8" y="739.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1109.8" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1106.8" y="723.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1109.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (31 samples, 0.93%)</title><rect x="1107.6" y="867.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.6" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6 samples, 0.18%)</title><rect x="1108.6" y="851.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.6" y="862.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="1108.6" y="835.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1111.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.15%)</title><rect x="1109.0" y="835.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.15%)</title><rect x="1109.0" y="819.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.0" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.15%)</title><rect x="1109.0" y="803.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1112.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1110.0" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1113.0" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1110.4" y="787.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1113.4" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1110.4" y="771.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1113.4" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1110.4" y="755.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1113.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.54%)</title><rect x="1110.7" y="851.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1113.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.45%)</title><rect x="1111.8" y="835.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1114.8" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.12%)</title><rect x="1115.7" y="819.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1118.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.12%)</title><rect x="1115.7" y="803.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1118.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.12%)</title><rect x="1115.7" y="787.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1118.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (4 samples, 0.12%)</title><rect x="1117.1" y="851.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1120.1" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1118.1" y="835.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1121.1" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1118.1" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1121.1" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1118.1" y="803.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1121.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (12 samples, 0.36%)</title><rect x="1118.5" y="867.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1121.5" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.21%)</title><rect x="1119.5" y="851.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1122.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.21%)</title><rect x="1119.5" y="835.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1122.5" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1122.0" y="851.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1125.0" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1122.0" y="835.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1125.0" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1122.0" y="819.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1125.0" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 0.96%)</title><rect x="1122.7" y="867.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1125.7" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.39%)</title><rect x="1128.0" y="851.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1131.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1131.9" y="835.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.9" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1131.9" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1131.9" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.9" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1132.2" y="835.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1135.2" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1132.2" y="819.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1135.2" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1132.2" y="803.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1135.2" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.12%)</title><rect x="1132.6" y="851.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1135.6" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.12%)</title><rect x="1132.6" y="835.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1135.6" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.12%)</title><rect x="1132.6" y="819.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1135.6" y="830.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1133.6" y="803.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1136.6" y="814.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="1133.6" y="787.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1136.6" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1133.6" y="771.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1136.6" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1134.0" y="867.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1137.0" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1134.0" y="851.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1137.0" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1134.0" y="835.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1137.0" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.09%)</title><rect x="1134.7" y="883.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1137.7" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (151 samples, 4.51%)</title><rect x="1135.7" y="883.0" width="53.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1138.7" y="894.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (145 samples, 4.33%)</title><rect x="1137.5" y="867.0" width="51.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1140.5" y="878.0">one/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.09%)</title><rect x="1138.9" y="851.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1141.9" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1139.6" y="835.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1142.6" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1139.6" y="819.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1142.6" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1139.6" y="803.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1142.6" y="814.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (36 samples, 1.07%)</title><rect x="1140.0" y="851.0" width="12.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1143.0" y="862.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.12%)</title><rect x="1140.7" y="835.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1143.7" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1141.7" y="819.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1144.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1141.7" y="803.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1144.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1141.7" y="787.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1144.7" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.18%)</title><rect x="1142.1" y="835.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.1" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.09%)</title><rect x="1144.2" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.2" y="846.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="1145.3" y="835.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1148.3" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (19 samples, 0.57%)</title><rect x="1145.6" y="835.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1148.6" y="846.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1147.4" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.06%)</title><rect x="1147.7" y="819.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.7" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1148.1" y="803.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1151.1" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1148.1" y="787.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1151.1" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1148.1" y="771.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1151.1" y="782.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (7 samples, 0.21%)</title><rect x="1148.4" y="819.0" width="2.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1151.4" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.09%)</title><rect x="1149.8" y="803.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1152.8" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.09%)</title><rect x="1149.8" y="787.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1152.8" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.09%)</title><rect x="1149.8" y="771.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1152.8" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.12%)</title><rect x="1150.9" y="819.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1153.9" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.12%)</title><rect x="1150.9" y="803.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1153.9" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.12%)</title><rect x="1150.9" y="787.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1153.9" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="1152.3" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.3" y="846.0"></text>
</g>
<g>
<title>__recv (99 samples, 2.96%)</title><rect x="1152.7" y="851.0" width="34.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1155.7" y="862.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (87 samples, 2.60%)</title><rect x="1156.2" y="835.0" width="30.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1159.2" y="846.0">en..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.09%)</title><rect x="1156.2" y="819.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1159.2" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (84 samples, 2.51%)</title><rect x="1157.2" y="819.0" width="29.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1160.2" y="830.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (76 samples, 2.27%)</title><rect x="1160.1" y="803.0" width="26.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1163.1" y="814.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (74 samples, 2.21%)</title><rect x="1160.1" y="787.0" width="26.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1163.1" y="798.0">_..</text>
</g>
<g>
<title>__fdget (1 samples, 0.03%)</title><rect x="1161.5" y="771.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (60 samples, 1.79%)</title><rect x="1161.8" y="771.0" width="21.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1164.8" y="782.0">s..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.06%)</title><rect x="1162.5" y="755.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1165.5" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (51 samples, 1.52%)</title><rect x="1163.2" y="755.0" width="18.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1166.2" y="766.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.03%)</title><rect x="1163.2" y="739.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1166.2" y="750.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (1 samples, 0.03%)</title><rect x="1163.6" y="739.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.6" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (49 samples, 1.46%)</title><rect x="1163.9" y="739.0" width="17.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1166.9" y="750.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.12%)</title><rect x="1167.1" y="723.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1170.1" y="734.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.09%)</title><rect x="1167.1" y="707.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1170.1" y="718.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.09%)</title><rect x="1167.1" y="691.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.09%)</title><rect x="1167.1" y="675.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.03%)</title><rect x="1168.2" y="707.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1171.2" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1168.5" y="723.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1171.5" y="734.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="1168.9" y="723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1171.9" y="734.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="1169.2" y="723.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1172.2" y="734.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.03%)</title><rect x="1169.2" y="707.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1172.2" y="718.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="1169.6" y="723.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1172.6" y="734.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1169.6" y="707.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (18 samples, 0.54%)</title><rect x="1169.9" y="723.0" width="6.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>__skb_datagram_iter (18 samples, 0.54%)</title><rect x="1169.9" y="707.0" width="6.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>_copy_to_iter (1 samples, 0.03%)</title><rect x="1172.0" y="691.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1175.0" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (11 samples, 0.33%)</title><rect x="1172.4" y="691.0" width="3.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1175.4" y="702.0"></text>
</g>
<g>
<title>__check_object_size (5 samples, 0.15%)</title><rect x="1172.4" y="675.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1175.4" y="686.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.06%)</title><rect x="1173.4" y="659.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1176.4" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.15%)</title><rect x="1174.1" y="675.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1177.1" y="686.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.12%)</title><rect x="1174.5" y="659.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>copyout (1 samples, 0.03%)</title><rect x="1175.9" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1178.9" y="686.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (5 samples, 0.15%)</title><rect x="1176.3" y="723.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1179.3" y="734.0"></text>
</g>
<g>
<title>tcp_send_ack (3 samples, 0.09%)</title><rect x="1177.0" y="707.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (3 samples, 0.09%)</title><rect x="1177.0" y="691.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1180.0" y="702.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.03%)</title><rect x="1177.0" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1180.0" y="686.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.03%)</title><rect x="1177.0" y="659.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1180.0" y="670.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.06%)</title><rect x="1177.3" y="675.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.06%)</title><rect x="1177.3" y="659.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.06%)</title><rect x="1177.3" y="643.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.06%)</title><rect x="1177.3" y="627.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1180.3" y="638.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.06%)</title><rect x="1177.3" y="611.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.06%)</title><rect x="1177.3" y="595.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.06%)</title><rect x="1177.3" y="579.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.06%)</title><rect x="1177.3" y="563.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1177.7" y="547.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>do_softirq.part.0 (1 samples, 0.03%)</title><rect x="1177.7" y="531.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1177.7" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1177.7" y="499.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="1177.7" y="483.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="1177.7" y="467.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="1177.7" y="451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.03%)</title><rect x="1177.7" y="435.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="1177.7" y="419.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="1177.7" y="403.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.03%)</title><rect x="1177.7" y="387.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="1177.7" y="371.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1180.7" y="382.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.03%)</title><rect x="1177.7" y="355.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1180.7" y="366.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="1177.7" y="339.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1180.7" y="350.0"></text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.03%)</title><rect x="1177.7" y="323.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1180.7" y="334.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (5 samples, 0.15%)</title><rect x="1178.0" y="723.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1181.0" y="734.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.12%)</title><rect x="1178.4" y="707.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.09%)</title><rect x="1178.4" y="691.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="1179.4" y="691.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.12%)</title><rect x="1179.8" y="723.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1182.8" y="734.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.15%)</title><rect x="1181.2" y="755.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.03%)</title><rect x="1181.5" y="739.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.09%)</title><rect x="1181.9" y="739.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1184.9" y="750.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.06%)</title><rect x="1182.2" y="723.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1185.2" y="734.0"></text>
</g>
<g>
<title>sockfd_lookup_light (9 samples, 0.27%)</title><rect x="1183.0" y="771.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.27%)</title><rect x="1183.0" y="755.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.03%)</title><rect x="1183.0" y="739.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.24%)</title><rect x="1183.3" y="739.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.24%)</title><rect x="1183.3" y="723.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="1186.1" y="787.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1189.1" y="798.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.03%)</title><rect x="1186.5" y="787.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.06%)</title><rect x="1186.8" y="835.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="1186.8" y="819.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.06%)</title><rect x="1186.8" y="803.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1189.8" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1187.2" y="787.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1190.2" y="798.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="1187.2" y="771.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1190.2" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1187.2" y="755.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1190.2" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.09%)</title><rect x="1187.5" y="851.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1190.5" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1188.6" y="867.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1191.6" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1188.6" y="851.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1188.6" y="835.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1188.9" y="915.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1188.9" y="899.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1191.9" y="910.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1189.3" y="899.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1192.3" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="1189.3" y="883.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1192.3" y="894.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.03%)</title><rect x="1189.6" y="931.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1192.6" y="942.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.03%)</title><rect x="1189.6" y="915.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1192.6" y="926.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.03%)</title><rect x="1189.6" y="899.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.6" y="910.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.03%)</title><rect x="1189.6" y="883.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1192.6" y="894.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.03%)</title><rect x="1189.6" y="867.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.6" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.03%)</title><rect x="1189.6" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.6" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.03%)</title><rect x="1189.6" y="835.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.6" y="846.0"></text>
</g>
</g>
</svg>
