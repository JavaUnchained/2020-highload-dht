<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (5,931 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="10.0" y="915.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="899.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>[not_walkable_Java] (14 samples, 0.24%)</title><rect x="10.8" y="915.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 0.22%)</title><rect x="10.8" y="899.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (13 samples, 0.22%)</title><rect x="10.8" y="883.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.13%)</title><rect x="10.8" y="867.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.8" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.08%)</title><rect x="11.0" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.0" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="12.0" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.08%)</title><rect x="12.4" y="867.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.4" y="878.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.05%)</title><rect x="12.8" y="851.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="12.8" y="835.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="13.6" y="915.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="16.6" y="926.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2 samples, 0.03%)</title><rect x="13.8" y="899.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="16.8" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="13.8" y="883.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="16.8" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="13.8" y="867.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="16.8" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="13.8" y="851.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="16.8" y="862.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="13.8" y="835.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="13.8" y="819.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="16.8" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.03%)</title><rect x="13.8" y="803.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="16.8" y="814.0"></text>
</g>
<g>
<title>[unknown_Java] (12 samples, 0.20%)</title><rect x="14.2" y="915.0" width="2.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="17.2" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (4 samples, 0.07%)</title><rect x="14.6" y="899.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.6" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (6 samples, 0.10%)</title><rect x="15.4" y="899.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="18.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.10%)</title><rect x="15.4" y="883.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="18.4" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.10%)</title><rect x="15.4" y="867.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="18.4" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.08%)</title><rect x="15.4" y="851.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="18.4" y="862.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.08%)</title><rect x="15.4" y="835.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.08%)</title><rect x="15.4" y="819.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="18.4" y="830.0"></text>
</g>
<g>
<title>wake_up_q (5 samples, 0.08%)</title><rect x="15.4" y="803.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="18.4" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (5 samples, 0.08%)</title><rect x="15.4" y="787.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="18.4" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.08%)</title><rect x="15.4" y="771.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="18.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,658 samples, 78.54%)</title><rect x="16.8" y="915.0" width="926.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.8" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,658 samples, 78.54%)</title><rect x="16.8" y="899.0" width="926.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.8" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,658 samples, 78.54%)</title><rect x="16.8" y="883.0" width="926.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="19.8" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.07%)</title><rect x="17.0" y="867.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.07%)</title><rect x="17.0" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (491 samples, 8.28%)</title><rect x="17.8" y="867.0" width="97.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.8" y="878.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (457 samples, 7.71%)</title><rect x="22.5" y="851.0" width="91.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.5" y="862.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.03%)</title><rect x="23.7" y="835.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (272 samples, 4.59%)</title><rect x="24.1" y="835.0" width="54.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.1" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (22 samples, 0.37%)</title><rect x="24.5" y="819.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="27.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.07%)</title><rect x="24.9" y="803.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="27.9" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="25.1" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="28.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="25.1" y="771.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="28.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="25.1" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.1" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="25.1" y="739.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="28.1" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="25.1" y="723.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.03%)</title><rect x="25.7" y="803.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (11 samples, 0.19%)</title><rect x="26.1" y="803.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.1" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LI_V (4 samples, 0.07%)</title><rect x="26.3" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (6 samples, 0.10%)</title><rect x="27.1" y="787.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.07%)</title><rect x="27.3" y="771.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.05%)</title><rect x="28.3" y="803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="28.9" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (50 samples, 0.84%)</title><rect x="29.3" y="819.0" width="9.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (49 samples, 0.83%)</title><rect x="29.5" y="803.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (49 samples, 0.83%)</title><rect x="29.5" y="787.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (49 samples, 0.83%)</title><rect x="29.5" y="771.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.5" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (49 samples, 0.83%)</title><rect x="29.5" y="755.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.5" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.03%)</title><rect x="29.7" y="739.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="32.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (46 samples, 0.78%)</title><rect x="30.1" y="739.0" width="9.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="33.1" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (45 samples, 0.76%)</title><rect x="30.3" y="723.0" width="8.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="33.3" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (45 samples, 0.76%)</title><rect x="30.3" y="707.0" width="8.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="33.3" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (45 samples, 0.76%)</title><rect x="30.3" y="691.0" width="8.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="33.3" y="702.0"></text>
</g>
<g>
<title>do_futex (45 samples, 0.76%)</title><rect x="30.3" y="675.0" width="8.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="33.3" y="686.0"></text>
</g>
<g>
<title>futex_wake (45 samples, 0.76%)</title><rect x="30.3" y="659.0" width="8.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="33.3" y="670.0"></text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.03%)</title><rect x="30.3" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="33.3" y="654.0"></text>
</g>
<g>
<title>wake_up_q (43 samples, 0.73%)</title><rect x="30.7" y="643.0" width="8.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="33.7" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (43 samples, 0.73%)</title><rect x="30.7" y="627.0" width="8.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="33.7" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (43 samples, 0.73%)</title><rect x="30.7" y="611.0" width="8.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="33.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (196 samples, 3.30%)</title><rect x="39.2" y="819.0" width="39.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.2" y="830.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (196 samples, 3.30%)</title><rect x="39.2" y="803.0" width="39.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.2" y="814.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park (39 samples, 0.66%)</title><rect x="40.4" y="787.0" width="7.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="43.4" y="798.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="40.6" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="43.6" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 0.20%)</title><rect x="41.6" y="771.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="44.6" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title><rect x="42.2" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="45.2" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.10%)</title><rect x="42.6" y="755.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="45.6" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="44.4" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="47.4" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.10%)</title><rect x="44.8" y="771.0" width="1.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="47.8" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.10%)</title><rect x="44.8" y="755.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="47.8" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.08%)</title><rect x="45.0" y="739.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="48.0" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="45.6" y="723.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.6" y="734.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="45.6" y="707.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="48.6" y="718.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="45.6" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="48.6" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="46.0" y="771.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="49.0" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (7 samples, 0.12%)</title><rect x="46.8" y="771.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="49.8" y="782.0"></text>
</g>
<g>
<title>[unknown] (148 samples, 2.50%)</title><rect x="48.2" y="787.0" width="29.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="51.2" y="798.0">[u..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="48.2" y="771.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="51.2" y="782.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.03%)</title><rect x="48.6" y="771.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="51.6" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (139 samples, 2.34%)</title><rect x="49.0" y="771.0" width="27.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="52.0" y="782.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (133 samples, 2.24%)</title><rect x="50.2" y="755.0" width="26.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="53.2" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (133 samples, 2.24%)</title><rect x="50.2" y="739.0" width="26.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="53.2" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (130 samples, 2.19%)</title><rect x="50.6" y="723.0" width="25.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="53.6" y="734.0">_..</text>
</g>
<g>
<title>do_futex (129 samples, 2.18%)</title><rect x="50.6" y="707.0" width="25.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="53.6" y="718.0">d..</text>
</g>
<g>
<title>futex_wait (129 samples, 2.18%)</title><rect x="50.6" y="691.0" width="25.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="53.6" y="702.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (118 samples, 1.99%)</title><rect x="51.2" y="675.0" width="23.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="54.2" y="686.0">f..</text>
</g>
<g>
<title>schedule (118 samples, 1.99%)</title><rect x="51.2" y="659.0" width="23.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="54.2" y="670.0">s..</text>
</g>
<g>
<title>__sched_text_start (117 samples, 1.97%)</title><rect x="51.4" y="643.0" width="23.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="54.4" y="654.0">_..</text>
</g>
<g>
<title>finish_task_switch (115 samples, 1.94%)</title><rect x="51.8" y="627.0" width="22.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="54.8" y="638.0">f..</text>
</g>
<g>
<title>futex_wait_setup (5 samples, 0.08%)</title><rect x="74.7" y="675.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="77.7" y="686.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.05%)</title><rect x="75.7" y="675.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="78.7" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.07%)</title><rect x="76.6" y="771.0" width="0.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="79.6" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.05%)</title><rect x="77.6" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="80.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (9 samples, 0.15%)</title><rect x="78.2" y="835.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="81.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.12%)</title><rect x="78.6" y="819.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="81.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.03%)</title><rect x="78.6" y="803.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.05%)</title><rect x="79.0" y="803.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.05%)</title><rect x="79.0" y="787.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="82.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="79.0" y="771.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="82.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="79.0" y="755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="82.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="79.0" y="739.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="82.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.05%)</title><rect x="79.0" y="723.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="82.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="79.0" y="707.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="82.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="79.0" y="691.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="82.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.05%)</title><rect x="79.0" y="675.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="82.0" y="686.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.05%)</title><rect x="79.0" y="659.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="82.0" y="670.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.05%)</title><rect x="79.0" y="643.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="82.0" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.03%)</title><rect x="79.0" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="82.0" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="79.0" y="611.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="82.0" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="79.0" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="82.0" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="79.0" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="82.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="79.6" y="803.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="79.6" y="787.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="79.6" y="771.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.6" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="79.6" y="755.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.6" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="79.6" y="739.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="82.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (168 samples, 2.83%)</title><rect x="80.0" y="835.0" width="33.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.0" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (168 samples, 2.83%)</title><rect x="80.0" y="819.0" width="33.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.0" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (168 samples, 2.83%)</title><rect x="80.0" y="803.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.0" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (168 samples, 2.83%)</title><rect x="80.0" y="787.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="83.0" y="798.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (168 samples, 2.83%)</title><rect x="80.0" y="771.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.0" y="782.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark (13 samples, 0.22%)</title><rect x="80.2" y="755.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="83.2" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="80.2" y="739.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="83.2" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.10%)</title><rect x="81.2" y="739.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="84.2" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (151 samples, 2.55%)</title><rect x="82.8" y="755.0" width="30.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="85.8" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (150 samples, 2.53%)</title><rect x="83.0" y="739.0" width="29.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="86.0" y="750.0">en..</text>
</g>
<g>
<title>do_syscall_64 (150 samples, 2.53%)</title><rect x="83.0" y="723.0" width="29.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="86.0" y="734.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (147 samples, 2.48%)</title><rect x="83.2" y="707.0" width="29.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="86.2" y="718.0">__..</text>
</g>
<g>
<title>do_futex (147 samples, 2.48%)</title><rect x="83.2" y="691.0" width="29.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="86.2" y="702.0">do..</text>
</g>
<g>
<title>futex_wake (146 samples, 2.46%)</title><rect x="83.2" y="675.0" width="29.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="86.2" y="686.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.03%)</title><rect x="84.2" y="659.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="87.2" y="670.0"></text>
</g>
<g>
<title>wake_up_q (139 samples, 2.34%)</title><rect x="84.6" y="659.0" width="27.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="87.6" y="670.0">w..</text>
</g>
<g>
<title>try_to_wake_up (139 samples, 2.34%)</title><rect x="84.6" y="643.0" width="27.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="87.6" y="654.0">t..</text>
</g>
<g>
<title>__lock_text_start (139 samples, 2.34%)</title><rect x="84.6" y="627.0" width="27.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="87.6" y="638.0">_..</text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="112.5" y="707.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="115.5" y="718.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="112.5" y="691.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="115.5" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="112.5" y="675.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="115.5" y="686.0"></text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="113.1" y="755.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="116.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$78/1266216553.run (3 samples, 0.05%)</title><rect x="113.7" y="851.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.7" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$82/44403649.run (6 samples, 0.10%)</title><rect x="114.3" y="851.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$78/1266216553.run (1,611 samples, 27.16%)</title><rect x="115.4" y="867.0" width="320.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.4" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="115.4" y="851.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="118.4" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="115.4" y="835.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="118.4" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="115.4" y="819.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="118.4" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="115.4" y="803.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="118.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$1 (1,609 samples, 27.13%)</title><rect x="115.8" y="851.0" width="320.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="118.8" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (640 samples, 10.79%)</title><rect x="115.8" y="835.0" width="127.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="118.8" y="846.0">one/nio/http/Htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.12%)</title><rect x="118.0" y="819.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="121.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.12%)</title><rect x="118.0" y="803.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.12%)</title><rect x="118.0" y="787.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="121.0" y="798.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="118.2" y="771.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="121.2" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="118.8" y="771.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="121.8" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="118.8" y="755.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="121.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="118.8" y="739.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="121.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (614 samples, 10.35%)</title><rect x="119.4" y="819.0" width="122.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="122.4" y="830.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (12 samples, 0.20%)</title><rect x="119.4" y="803.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="122.4" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.05%)</title><rect x="120.6" y="787.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="123.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="120.6" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="123.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="120.6" y="755.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.05%)</title><rect x="120.6" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="123.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.05%)</title><rect x="120.6" y="723.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="123.6" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="121.2" y="787.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="124.2" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="121.2" y="771.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="124.2" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="121.2" y="755.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="124.2" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (602 samples, 10.15%)</title><rect x="121.8" y="803.0" width="119.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="124.8" y="814.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (602 samples, 10.15%)</title><rect x="121.8" y="787.0" width="119.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="124.8" y="798.0">one/nio/net/Ses..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="123.0" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="126.0" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (593 samples, 10.00%)</title><rect x="123.6" y="771.0" width="118.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="126.6" y="782.0">one/nio/net/Se..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (593 samples, 10.00%)</title><rect x="123.6" y="755.0" width="118.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.6" y="766.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (6 samples, 0.10%)</title><rect x="124.2" y="739.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="127.2" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="124.8" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="127.8" y="734.0"></text>
</g>
<g>
<title>send (583 samples, 9.83%)</title><rect x="125.6" y="739.0" width="116.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="128.6" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (578 samples, 9.75%)</title><rect x="126.6" y="723.0" width="115.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="129.6" y="734.0">entry_SYSCALL_..</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.03%)</title><rect x="126.6" y="707.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="129.6" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (576 samples, 9.71%)</title><rect x="127.0" y="707.0" width="114.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="130.0" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (563 samples, 9.49%)</title><rect x="127.4" y="691.0" width="112.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="130.4" y="702.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (557 samples, 9.39%)</title><rect x="127.8" y="675.0" width="110.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="130.8" y="686.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.05%)</title><rect x="128.6" y="659.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="131.6" y="670.0"></text>
</g>
<g>
<title>sock_sendmsg (537 samples, 9.05%)</title><rect x="129.2" y="659.0" width="106.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="132.2" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.08%)</title><rect x="129.4" y="643.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="132.4" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (521 samples, 8.78%)</title><rect x="130.4" y="643.0" width="103.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="133.4" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (519 samples, 8.75%)</title><rect x="130.4" y="627.0" width="103.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="133.4" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (511 samples, 8.62%)</title><rect x="131.6" y="611.0" width="101.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="134.6" y="622.0">tcp_sendmsg_..</text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.07%)</title><rect x="133.2" y="595.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="136.2" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.07%)</title><rect x="133.2" y="579.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="136.2" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (3 samples, 0.05%)</title><rect x="133.9" y="595.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="136.9" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.05%)</title><rect x="133.9" y="579.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="136.9" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (27 samples, 0.46%)</title><rect x="134.5" y="595.0" width="5.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="137.5" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (26 samples, 0.44%)</title><rect x="134.7" y="579.0" width="5.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="137.7" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.12%)</title><rect x="135.1" y="563.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="138.1" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.07%)</title><rect x="135.1" y="547.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="138.1" y="558.0"></text>
</g>
<g>
<title>memset (3 samples, 0.05%)</title><rect x="135.9" y="547.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="138.9" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 0.13%)</title><rect x="136.7" y="563.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="139.7" y="574.0"></text>
</g>
<g>
<title>ksize (3 samples, 0.05%)</title><rect x="138.3" y="563.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="141.3" y="574.0"></text>
</g>
<g>
<title>__ksize (3 samples, 0.05%)</title><rect x="138.3" y="547.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="141.3" y="558.0"></text>
</g>
<g>
<title>memset (4 samples, 0.07%)</title><rect x="139.1" y="563.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="142.1" y="574.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.07%)</title><rect x="139.9" y="595.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="142.9" y="606.0"></text>
</g>
<g>
<title>tcp_push (457 samples, 7.71%)</title><rect x="140.7" y="595.0" width="90.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="143.7" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (456 samples, 7.69%)</title><rect x="140.7" y="579.0" width="90.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="143.7" y="590.0">__tcp_push..</text>
</g>
<g>
<title>tcp_write_xmit (455 samples, 7.67%)</title><rect x="140.9" y="563.0" width="90.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="143.9" y="574.0">tcp_write_..</text>
</g>
<g>
<title>__tcp_transmit_skb (431 samples, 7.27%)</title><rect x="142.5" y="547.0" width="85.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="145.5" y="558.0">__tcp_tran..</text>
</g>
<g>
<title>ip_queue_xmit (428 samples, 7.22%)</title><rect x="142.9" y="531.0" width="85.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="145.9" y="542.0">ip_queue_x..</text>
</g>
<g>
<title>__ip_queue_xmit (428 samples, 7.22%)</title><rect x="142.9" y="515.0" width="85.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="145.9" y="526.0">__ip_queue..</text>
</g>
<g>
<title>ip_local_out (419 samples, 7.06%)</title><rect x="143.5" y="499.0" width="83.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="146.5" y="510.0">ip_local_..</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="143.5" y="483.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="146.5" y="494.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="143.5" y="467.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="146.5" y="478.0"></text>
</g>
<g>
<title>ip_output (417 samples, 7.03%)</title><rect x="143.9" y="483.0" width="83.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.9" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (415 samples, 7.00%)</title><rect x="144.3" y="467.0" width="82.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="147.3" y="478.0">ip_finish..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="144.5" y="451.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="147.5" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (412 samples, 6.95%)</title><rect x="144.9" y="451.0" width="82.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="147.9" y="462.0">__ip_fini..</text>
</g>
<g>
<title>ip_finish_output2 (409 samples, 6.90%)</title><rect x="145.3" y="435.0" width="81.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="148.3" y="446.0">ip_finish..</text>
</g>
<g>
<title>__local_bh_enable_ip (383 samples, 6.46%)</title><rect x="146.7" y="419.0" width="76.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="149.7" y="430.0">__local_..</text>
</g>
<g>
<title>do_softirq.part.0 (382 samples, 6.44%)</title><rect x="146.9" y="403.0" width="76.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="149.9" y="414.0">do_softi..</text>
</g>
<g>
<title>do_softirq_own_stack (382 samples, 6.44%)</title><rect x="146.9" y="387.0" width="76.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="149.9" y="398.0">do_softi..</text>
</g>
<g>
<title>__softirqentry_text_start (382 samples, 6.44%)</title><rect x="146.9" y="371.0" width="76.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="149.9" y="382.0">__softir..</text>
</g>
<g>
<title>net_rx_action (376 samples, 6.34%)</title><rect x="147.9" y="355.0" width="74.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="150.9" y="366.0">net_rx_a..</text>
</g>
<g>
<title>process_backlog (374 samples, 6.31%)</title><rect x="148.3" y="339.0" width="74.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="151.3" y="350.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (372 samples, 6.27%)</title><rect x="148.7" y="323.0" width="74.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="151.7" y="334.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (372 samples, 6.27%)</title><rect x="148.7" y="307.0" width="74.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="151.7" y="318.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.03%)</title><rect x="148.9" y="291.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="151.9" y="302.0"></text>
</g>
<g>
<title>ip_rcv (368 samples, 6.20%)</title><rect x="149.3" y="291.0" width="73.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="152.3" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="149.3" y="275.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="152.3" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (365 samples, 6.15%)</title><rect x="149.9" y="275.0" width="72.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="152.9" y="286.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (362 samples, 6.10%)</title><rect x="149.9" y="259.0" width="72.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="152.9" y="270.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (362 samples, 6.10%)</title><rect x="149.9" y="243.0" width="72.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="152.9" y="254.0">ip_local..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (362 samples, 6.10%)</title><rect x="149.9" y="227.0" width="72.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="152.9" y="238.0">ip_proto..</text>
</g>
<g>
<title>tcp_v4_rcv (361 samples, 6.09%)</title><rect x="150.1" y="211.0" width="71.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="153.1" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (13 samples, 0.22%)</title><rect x="153.0" y="195.0" width="2.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="156.0" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.05%)</title><rect x="156.2" y="195.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="159.2" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="156.2" y="179.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="159.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (327 samples, 5.51%)</title><rect x="156.8" y="195.0" width="65.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="159.8" y="206.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.05%)</title><rect x="157.2" y="179.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="160.2" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (320 samples, 5.40%)</title><rect x="158.2" y="179.0" width="63.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="161.2" y="190.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.08%)</title><rect x="159.4" y="163.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="162.4" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.07%)</title><rect x="159.6" y="147.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="162.6" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.07%)</title><rect x="159.6" y="131.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="162.6" y="142.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="159.8" y="115.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="162.8" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="160.0" y="99.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="163.0" y="110.0"></text>
</g>
<g>
<title>tcp_ack (53 samples, 0.89%)</title><rect x="160.6" y="163.0" width="10.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="163.6" y="174.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="162.8" y="147.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="165.8" y="158.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.05%)</title><rect x="163.4" y="147.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="166.4" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (29 samples, 0.49%)</title><rect x="164.0" y="147.0" width="5.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="167.0" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (25 samples, 0.42%)</title><rect x="164.4" y="131.0" width="5.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="167.4" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.05%)</title><rect x="164.4" y="115.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="167.4" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.05%)</title><rect x="164.4" y="99.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="167.4" y="110.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="164.4" y="83.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="167.4" y="94.0"></text>
</g>
<g>
<title>skb_release_all (22 samples, 0.37%)</title><rect x="165.0" y="115.0" width="4.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="168.0" y="126.0"></text>
</g>
<g>
<title>skb_release_data (20 samples, 0.34%)</title><rect x="165.2" y="99.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="168.2" y="110.0"></text>
</g>
<g>
<title>skb_free_head (10 samples, 0.17%)</title><rect x="167.2" y="83.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="170.2" y="94.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.15%)</title><rect x="167.4" y="67.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="170.4" y="78.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.08%)</title><rect x="168.2" y="51.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="171.2" y="62.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="169.8" y="147.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="172.8" y="158.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.03%)</title><rect x="170.2" y="147.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="173.2" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="170.8" y="147.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="173.8" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (247 samples, 4.16%)</title><rect x="171.2" y="163.0" width="49.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="174.2" y="174.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (247 samples, 4.16%)</title><rect x="171.2" y="147.0" width="49.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="174.2" y="158.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (246 samples, 4.15%)</title><rect x="171.4" y="131.0" width="48.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="174.4" y="142.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (246 samples, 4.15%)</title><rect x="171.4" y="115.0" width="48.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="174.4" y="126.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (246 samples, 4.15%)</title><rect x="171.4" y="99.0" width="48.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="174.4" y="110.0">__lo..</text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.07%)</title><rect x="220.5" y="163.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="223.5" y="174.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="220.5" y="147.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="223.5" y="158.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="220.9" y="147.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="223.9" y="158.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.03%)</title><rect x="222.1" y="259.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="225.1" y="270.0"></text>
</g>
<g>
<title>dev_queue_xmit (19 samples, 0.32%)</title><rect x="222.9" y="419.0" width="3.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="225.9" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (19 samples, 0.32%)</title><rect x="222.9" y="403.0" width="3.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="225.9" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.19%)</title><rect x="223.3" y="387.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="226.3" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.13%)</title><rect x="223.9" y="371.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="226.9" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.05%)</title><rect x="224.5" y="355.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="227.5" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.07%)</title><rect x="225.9" y="387.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="228.9" y="398.0"></text>
</g>
<g>
<title>ip_output (3 samples, 0.05%)</title><rect x="226.9" y="499.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="229.9" y="510.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.05%)</title><rect x="227.5" y="499.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="230.5" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="228.5" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="231.5" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (6 samples, 0.10%)</title><rect x="228.9" y="547.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="231.9" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.08%)</title><rect x="229.0" y="531.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="232.0" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.08%)</title><rect x="229.0" y="515.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="232.0" y="526.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.08%)</title><rect x="229.0" y="499.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="232.0" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.07%)</title><rect x="229.2" y="483.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="232.2" y="494.0"></text>
</g>
<g>
<title>tcp_mtu_probe (3 samples, 0.05%)</title><rect x="230.0" y="547.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="233.0" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.05%)</title><rect x="230.6" y="547.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="233.6" y="558.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="230.8" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="233.8" y="542.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="230.8" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="233.8" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.12%)</title><rect x="231.6" y="595.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="234.6" y="606.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.12%)</title><rect x="231.6" y="579.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="234.6" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="232.4" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="235.4" y="574.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.03%)</title><rect x="233.6" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="236.6" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (10 samples, 0.17%)</title><rect x="234.0" y="643.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="237.0" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.17%)</title><rect x="234.0" y="627.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="237.0" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.17%)</title><rect x="234.0" y="611.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="237.0" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (7 samples, 0.12%)</title><rect x="234.6" y="595.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="237.6" y="606.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.05%)</title><rect x="235.4" y="579.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="238.4" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.22%)</title><rect x="236.0" y="659.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="239.0" y="670.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.15%)</title><rect x="236.2" y="643.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="239.2" y="654.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.15%)</title><rect x="236.2" y="627.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="239.2" y="638.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.15%)</title><rect x="236.2" y="611.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="239.2" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="238.0" y="643.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="241.0" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.05%)</title><rect x="238.8" y="675.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="241.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (11 samples, 0.19%)</title><rect x="239.4" y="691.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="242.4" y="702.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.19%)</title><rect x="239.4" y="675.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="242.4" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (11 samples, 0.19%)</title><rect x="239.4" y="659.0" width="2.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="242.4" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.15%)</title><rect x="239.8" y="643.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="242.8" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="241.6" y="819.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="241.6" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="241.6" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.6" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="241.6" y="771.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="244.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="241.6" y="755.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="244.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="241.6" y="739.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="244.6" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.10%)</title><rect x="242.0" y="819.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="245.0" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.10%)</title><rect x="242.0" y="803.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="245.0" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.10%)</title><rect x="242.0" y="787.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="245.0" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (969 samples, 16.34%)</title><rect x="243.2" y="835.0" width="192.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.2" y="846.0">ru/mail/polis/service/kov..</text>
</g>
<g>
<title>java/util/HashMap.get (22 samples, 0.37%)</title><rect x="243.6" y="819.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.13%)</title><rect x="243.6" y="803.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="246.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="244.8" y="787.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="247.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (14 samples, 0.24%)</title><rect x="245.2" y="803.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="248.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (14 samples, 0.24%)</title><rect x="245.2" y="787.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="248.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (14 samples, 0.24%)</title><rect x="245.2" y="771.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.2" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="247.0" y="755.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="250.0" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="247.0" y="739.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="250.0" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="247.0" y="723.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="250.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (945 samples, 15.93%)</title><rect x="247.9" y="819.0" width="188.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.9" y="830.0">one/nio/http/HttpClient...</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (945 samples, 15.93%)</title><rect x="247.9" y="803.0" width="188.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.9" y="814.0">one/nio/http/HttpClient...</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (160 samples, 2.70%)</title><rect x="250.3" y="787.0" width="31.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.3" y="798.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (9 samples, 0.15%)</title><rect x="252.3" y="771.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="255.3" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.12%)</title><rect x="252.7" y="755.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="255.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.12%)</title><rect x="252.7" y="739.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="255.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.12%)</title><rect x="252.7" y="723.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="255.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.10%)</title><rect x="252.9" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="255.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="253.5" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="256.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (141 samples, 2.38%)</title><rect x="254.1" y="771.0" width="28.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="257.1" y="782.0">on..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.07%)</title><rect x="254.3" y="755.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="257.3" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 0.20%)</title><rect x="255.1" y="755.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="258.1" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.12%)</title><rect x="255.9" y="739.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="258.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.05%)</title><rect x="256.5" y="723.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="259.5" y="734.0"></text>
</g>
<g>
<title>__recv (123 samples, 2.07%)</title><rect x="257.5" y="755.0" width="24.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="260.5" y="766.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (117 samples, 1.97%)</title><rect x="258.7" y="739.0" width="23.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="261.7" y="750.0">e..</text>
</g>
<g>
<title>do_syscall_64 (117 samples, 1.97%)</title><rect x="258.7" y="723.0" width="23.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="261.7" y="734.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (113 samples, 1.91%)</title><rect x="258.7" y="707.0" width="22.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="261.7" y="718.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (113 samples, 1.91%)</title><rect x="258.7" y="691.0" width="22.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="261.7" y="702.0">_..</text>
</g>
<g>
<title>sock_recvmsg (109 samples, 1.84%)</title><rect x="259.3" y="675.0" width="21.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="262.3" y="686.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (107 samples, 1.80%)</title><rect x="259.3" y="659.0" width="21.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="262.3" y="670.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (104 samples, 1.75%)</title><rect x="259.9" y="643.0" width="20.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="262.9" y="654.0"></text>
</g>
<g>
<title>sk_wait_data (85 samples, 1.43%)</title><rect x="261.7" y="627.0" width="16.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="264.7" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="261.9" y="611.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="264.9" y="622.0"></text>
</g>
<g>
<title>wait_woken (81 samples, 1.37%)</title><rect x="262.5" y="611.0" width="16.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="265.5" y="622.0"></text>
</g>
<g>
<title>schedule_timeout (80 samples, 1.35%)</title><rect x="262.7" y="595.0" width="15.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="265.7" y="606.0"></text>
</g>
<g>
<title>__mod_timer (6 samples, 0.10%)</title><rect x="262.7" y="579.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="265.7" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.10%)</title><rect x="262.7" y="563.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="265.7" y="574.0"></text>
</g>
<g>
<title>schedule (74 samples, 1.25%)</title><rect x="263.9" y="579.0" width="14.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="266.9" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (74 samples, 1.25%)</title><rect x="263.9" y="563.0" width="14.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="266.9" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (73 samples, 1.23%)</title><rect x="264.1" y="547.0" width="14.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="267.1" y="558.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (5 samples, 0.08%)</title><rect x="278.6" y="627.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="281.6" y="638.0"></text>
</g>
<g>
<title>__skb_datagram_iter (5 samples, 0.08%)</title><rect x="278.6" y="611.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="281.6" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.05%)</title><rect x="279.0" y="595.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="282.0" y="606.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.05%)</title><rect x="279.0" y="579.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="282.0" y="590.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (4 samples, 0.07%)</title><rect x="279.6" y="627.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="282.6" y="638.0"></text>
</g>
<g>
<title>tcp_send_ack (4 samples, 0.07%)</title><rect x="279.6" y="611.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="282.6" y="622.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (4 samples, 0.07%)</title><rect x="279.6" y="595.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="282.6" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.05%)</title><rect x="279.8" y="579.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="282.8" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.05%)</title><rect x="279.8" y="563.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="282.8" y="574.0"></text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.05%)</title><rect x="279.8" y="547.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="282.8" y="558.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 0.05%)</title><rect x="279.8" y="531.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="282.8" y="542.0"></text>
</g>
<g>
<title>ip_output (3 samples, 0.05%)</title><rect x="279.8" y="515.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="282.8" y="526.0"></text>
</g>
<g>
<title>ip_finish_output (3 samples, 0.05%)</title><rect x="279.8" y="499.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="282.8" y="510.0"></text>
</g>
<g>
<title>__ip_finish_output (3 samples, 0.05%)</title><rect x="279.8" y="483.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="282.8" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (3 samples, 0.05%)</title><rect x="279.8" y="467.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="282.8" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="279.8" y="451.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="282.8" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (2 samples, 0.03%)</title><rect x="279.8" y="435.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="282.8" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.03%)</title><rect x="279.8" y="419.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="282.8" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="279.8" y="403.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.8" y="414.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="279.8" y="387.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="282.8" y="398.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="279.8" y="371.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="282.8" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb (2 samples, 0.03%)</title><rect x="279.8" y="355.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="282.8" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.03%)</title><rect x="279.8" y="339.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="282.8" y="350.0"></text>
</g>
<g>
<title>ip_rcv (2 samples, 0.03%)</title><rect x="279.8" y="323.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="282.8" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.03%)</title><rect x="279.8" y="307.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="282.8" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="279.8" y="291.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="282.8" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.03%)</title><rect x="279.8" y="275.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="282.8" y="286.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.03%)</title><rect x="279.8" y="259.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="282.8" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (2 samples, 0.03%)</title><rect x="279.8" y="243.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="282.8" y="254.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.03%)</title><rect x="280.6" y="659.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="283.6" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.03%)</title><rect x="280.6" y="643.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="283.6" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="280.6" y="627.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="283.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="281.2" y="707.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="284.2" y="718.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="281.2" y="691.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="284.2" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="281.2" y="675.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="284.2" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="281.2" y="659.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="284.2" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (40 samples, 0.67%)</title><rect x="282.2" y="787.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="285.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="282.6" y="771.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.6" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="283.2" y="771.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="286.2" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="283.2" y="755.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="286.2" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="283.2" y="739.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="286.2" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="283.2" y="723.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="286.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (11 samples, 0.19%)</title><rect x="283.6" y="771.0" width="2.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.19%)</title><rect x="283.6" y="755.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="286.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.19%)</title><rect x="283.6" y="739.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.08%)</title><rect x="285.8" y="771.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="288.8" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="286.3" y="755.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="289.3" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="286.3" y="739.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="289.3" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="286.3" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="289.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (16 samples, 0.27%)</title><rect x="286.9" y="771.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.12%)</title><rect x="288.1" y="755.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="291.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.12%)</title><rect x="288.1" y="739.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="291.1" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="289.1" y="723.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="292.1" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="289.1" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="292.1" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="289.1" y="691.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="292.1" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="289.5" y="755.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.5" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="289.5" y="739.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.5" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="289.5" y="723.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="292.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (22 samples, 0.37%)</title><rect x="290.1" y="787.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="293.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.08%)</title><rect x="290.5" y="771.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.24%)</title><rect x="291.5" y="771.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.03%)</title><rect x="292.3" y="755.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="292.9" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="292.9" y="739.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="292.9" y="723.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.03%)</title><rect x="293.5" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="293.5" y="707.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.5" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="293.9" y="755.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="296.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="293.9" y="739.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="296.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="293.9" y="723.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="296.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="294.5" y="787.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.5" y="798.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (63 samples, 1.06%)</title><rect x="294.9" y="787.0" width="12.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="297.9" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.03%)</title><rect x="295.5" y="771.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="298.5" y="782.0"></text>
</g>
<g>
<title>setsockopt (58 samples, 0.98%)</title><rect x="295.9" y="771.0" width="11.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="298.9" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (54 samples, 0.91%)</title><rect x="296.5" y="755.0" width="10.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="299.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (54 samples, 0.91%)</title><rect x="296.5" y="739.0" width="10.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="299.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (39 samples, 0.66%)</title><rect x="297.3" y="723.0" width="7.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.3" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (38 samples, 0.64%)</title><rect x="297.3" y="707.0" width="7.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="300.3" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (4 samples, 0.07%)</title><rect x="298.1" y="691.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="301.1" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (5 samples, 0.08%)</title><rect x="299.1" y="691.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="302.1" y="702.0"></text>
</g>
<g>
<title>security_socket_setsockopt (5 samples, 0.08%)</title><rect x="300.1" y="691.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.1" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (5 samples, 0.08%)</title><rect x="300.1" y="675.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="303.1" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.07%)</title><rect x="300.3" y="659.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.3" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="300.7" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="303.7" y="654.0"></text>
</g>
<g>
<title>sock_setsockopt (11 samples, 0.19%)</title><rect x="301.1" y="691.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="304.1" y="702.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.07%)</title><rect x="301.9" y="675.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="304.9" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.05%)</title><rect x="302.1" y="659.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="305.1" y="670.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (3 samples, 0.05%)</title><rect x="302.1" y="643.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="305.1" y="654.0"></text>
</g>
<g>
<title>sock_set_timeout (3 samples, 0.05%)</title><rect x="302.7" y="675.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="305.7" y="686.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.03%)</title><rect x="302.9" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="305.9" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.13%)</title><rect x="303.3" y="691.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="306.3" y="702.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.05%)</title><rect x="303.7" y="675.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="306.7" y="686.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="303.7" y="659.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="306.7" y="670.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.05%)</title><rect x="303.7" y="643.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="306.7" y="654.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="304.3" y="675.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="307.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (11 samples, 0.19%)</title><rect x="305.0" y="723.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="308.0" y="734.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.19%)</title><rect x="305.0" y="707.0" width="2.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="308.0" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (11 samples, 0.19%)</title><rect x="305.0" y="691.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="308.0" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (11 samples, 0.19%)</title><rect x="305.0" y="675.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="308.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (635 samples, 10.71%)</title><rect x="307.4" y="787.0" width="126.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.4" y="798.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (7 samples, 0.12%)</title><rect x="308.2" y="771.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="311.2" y="782.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.10%)</title><rect x="308.4" y="755.0" width="1.2" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="311.4" y="766.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="308.8" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="311.8" y="750.0"></text>
</g>
<g>
<title>send (624 samples, 10.52%)</title><rect x="309.6" y="771.0" width="124.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="312.6" y="782.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (621 samples, 10.47%)</title><rect x="310.0" y="755.0" width="123.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="313.0" y="766.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (621 samples, 10.47%)</title><rect x="310.0" y="739.0" width="123.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="313.0" y="750.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (595 samples, 10.03%)</title><rect x="310.2" y="723.0" width="118.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="313.2" y="734.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (594 samples, 10.02%)</title><rect x="310.2" y="707.0" width="118.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="313.2" y="718.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (594 samples, 10.02%)</title><rect x="310.2" y="691.0" width="118.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="313.2" y="702.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (587 samples, 9.90%)</title><rect x="310.6" y="675.0" width="116.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="313.6" y="686.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (587 samples, 9.90%)</title><rect x="310.6" y="659.0" width="116.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="313.6" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="311.0" y="643.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="314.0" y="654.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.03%)</title><rect x="311.4" y="643.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="314.4" y="654.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="311.8" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="314.8" y="654.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (579 samples, 9.76%)</title><rect x="312.2" y="643.0" width="115.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="315.2" y="654.0">tcp_sendmsg_lo..</text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.07%)</title><rect x="313.2" y="627.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="316.2" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.07%)</title><rect x="313.2" y="611.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="316.2" y="622.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (31 samples, 0.52%)</title><rect x="314.0" y="627.0" width="6.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="317.0" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (30 samples, 0.51%)</title><rect x="314.2" y="611.0" width="6.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="317.2" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (14 samples, 0.24%)</title><rect x="314.6" y="595.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="317.6" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.08%)</title><rect x="314.6" y="579.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="317.6" y="590.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.05%)</title><rect x="315.6" y="579.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="318.6" y="590.0"></text>
</g>
<g>
<title>memset (6 samples, 0.10%)</title><rect x="316.2" y="579.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="319.2" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (3 samples, 0.05%)</title><rect x="317.4" y="595.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="320.4" y="606.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.03%)</title><rect x="318.0" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="321.0" y="606.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.03%)</title><rect x="318.0" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="321.0" y="590.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.05%)</title><rect x="318.4" y="595.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="321.4" y="606.0"></text>
</g>
<g>
<title>memset (6 samples, 0.10%)</title><rect x="319.0" y="595.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="322.0" y="606.0"></text>
</g>
<g>
<title>tcp_push (531 samples, 8.95%)</title><rect x="320.4" y="627.0" width="105.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="323.4" y="638.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (531 samples, 8.95%)</title><rect x="320.4" y="611.0" width="105.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="323.4" y="622.0">__tcp_push_pe..</text>
</g>
<g>
<title>tcp_write_xmit (529 samples, 8.92%)</title><rect x="320.8" y="595.0" width="105.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="323.8" y="606.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (510 samples, 8.60%)</title><rect x="321.6" y="579.0" width="101.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="324.6" y="590.0">__tcp_transm..</text>
</g>
<g>
<title>ip_queue_xmit (503 samples, 8.48%)</title><rect x="322.8" y="563.0" width="100.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="325.8" y="574.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (501 samples, 8.45%)</title><rect x="322.8" y="547.0" width="99.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="325.8" y="558.0">__ip_queue_x..</text>
</g>
<g>
<title>ip_local_out (493 samples, 8.31%)</title><rect x="323.8" y="531.0" width="98.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="326.8" y="542.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="323.8" y="515.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="326.8" y="526.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="323.8" y="499.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="326.8" y="510.0"></text>
</g>
<g>
<title>ip_output (491 samples, 8.28%)</title><rect x="324.1" y="515.0" width="97.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="327.1" y="526.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (489 samples, 8.24%)</title><rect x="324.5" y="499.0" width="97.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="327.5" y="510.0">ip_finish_o..</text>
</g>
<g>
<title>__ip_finish_output (488 samples, 8.23%)</title><rect x="324.5" y="483.0" width="97.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="327.5" y="494.0">__ip_finish..</text>
</g>
<g>
<title>ip_finish_output2 (484 samples, 8.16%)</title><rect x="325.3" y="467.0" width="96.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="328.3" y="478.0">ip_finish_o..</text>
</g>
<g>
<title>__local_bh_enable_ip (471 samples, 7.94%)</title><rect x="325.9" y="451.0" width="93.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="328.9" y="462.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (471 samples, 7.94%)</title><rect x="325.9" y="435.0" width="93.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="328.9" y="446.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (470 samples, 7.92%)</title><rect x="326.1" y="419.0" width="93.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="329.1" y="430.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (470 samples, 7.92%)</title><rect x="326.1" y="403.0" width="93.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="329.1" y="414.0">__softirqen..</text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="326.7" y="387.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="329.7" y="398.0"></text>
</g>
<g>
<title>net_rx_action (465 samples, 7.84%)</title><rect x="327.1" y="387.0" width="92.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="330.1" y="398.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (463 samples, 7.81%)</title><rect x="327.5" y="371.0" width="92.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="330.5" y="382.0">process_bac..</text>
</g>
<g>
<title>__netif_receive_skb (461 samples, 7.77%)</title><rect x="327.9" y="355.0" width="91.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="330.9" y="366.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (461 samples, 7.77%)</title><rect x="327.9" y="339.0" width="91.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="330.9" y="350.0">__netif_rec..</text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.03%)</title><rect x="328.1" y="323.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="331.1" y="334.0"></text>
</g>
<g>
<title>ip_rcv (458 samples, 7.72%)</title><rect x="328.5" y="323.0" width="91.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="331.5" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (458 samples, 7.72%)</title><rect x="328.5" y="307.0" width="91.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="331.5" y="318.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (454 samples, 7.65%)</title><rect x="329.1" y="291.0" width="90.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="332.1" y="302.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (454 samples, 7.65%)</title><rect x="329.1" y="275.0" width="90.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="332.1" y="286.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (452 samples, 7.62%)</title><rect x="329.1" y="259.0" width="90.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="332.1" y="270.0">ip_protoco..</text>
</g>
<g>
<title>tcp_v4_rcv (449 samples, 7.57%)</title><rect x="329.7" y="243.0" width="89.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="332.7" y="254.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.12%)</title><rect x="330.7" y="227.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="333.7" y="238.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="332.5" y="227.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.5" y="238.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="332.5" y="211.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="335.5" y="222.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (433 samples, 7.30%)</title><rect x="332.9" y="227.0" width="86.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="335.9" y="238.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.03%)</title><rect x="333.3" y="211.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="336.3" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (429 samples, 7.23%)</title><rect x="333.7" y="211.0" width="85.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="336.7" y="222.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.05%)</title><rect x="334.3" y="195.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="337.3" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.05%)</title><rect x="334.3" y="179.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="337.3" y="190.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.05%)</title><rect x="334.3" y="163.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="337.3" y="174.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="334.3" y="147.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="337.3" y="158.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="334.3" y="131.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="337.3" y="142.0"></text>
</g>
<g>
<title>tcp_ack (32 samples, 0.54%)</title><rect x="335.3" y="195.0" width="6.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="338.3" y="206.0"></text>
</g>
<g>
<title>rb_first (4 samples, 0.07%)</title><rect x="336.3" y="179.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="339.3" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (21 samples, 0.35%)</title><rect x="337.1" y="179.0" width="4.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="340.1" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (19 samples, 0.32%)</title><rect x="337.3" y="163.0" width="3.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="340.3" y="174.0"></text>
</g>
<g>
<title>skb_release_all (17 samples, 0.29%)</title><rect x="337.5" y="147.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="340.5" y="158.0"></text>
</g>
<g>
<title>skb_release_data (17 samples, 0.29%)</title><rect x="337.5" y="131.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="340.5" y="142.0"></text>
</g>
<g>
<title>skb_free_head (8 samples, 0.13%)</title><rect x="339.3" y="115.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="342.3" y="126.0"></text>
</g>
<g>
<title>kfree (8 samples, 0.13%)</title><rect x="339.3" y="99.0" width="1.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="342.3" y="110.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.07%)</title><rect x="340.1" y="83.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="343.1" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (384 samples, 6.47%)</title><rect x="341.7" y="195.0" width="76.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.7" y="206.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (384 samples, 6.47%)</title><rect x="341.7" y="179.0" width="76.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="344.7" y="190.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (383 samples, 6.46%)</title><rect x="341.9" y="163.0" width="76.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="344.9" y="174.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (383 samples, 6.46%)</title><rect x="341.9" y="147.0" width="76.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="344.9" y="158.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (382 samples, 6.44%)</title><rect x="342.1" y="131.0" width="76.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="345.1" y="142.0">__lock_t..</text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.07%)</title><rect x="418.1" y="195.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="421.1" y="206.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="418.1" y="179.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="421.1" y="190.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="418.3" y="163.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="421.3" y="174.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.03%)</title><rect x="418.3" y="147.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="421.3" y="158.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.17%)</title><rect x="419.6" y="451.0" width="2.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="422.6" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.17%)</title><rect x="419.6" y="435.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="422.6" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (5 samples, 0.08%)</title><rect x="420.0" y="419.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="423.0" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.07%)</title><rect x="420.2" y="403.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="423.2" y="414.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.03%)</title><rect x="420.6" y="387.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="423.6" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.05%)</title><rect x="421.0" y="419.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="424.0" y="430.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.03%)</title><rect x="421.8" y="531.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="424.8" y="542.0"></text>
</g>
<g>
<title>ip_copy_addrs (2 samples, 0.03%)</title><rect x="422.4" y="547.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="425.4" y="558.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="423.2" y="579.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="426.2" y="590.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="423.6" y="579.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="426.6" y="590.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (3 samples, 0.05%)</title><rect x="423.6" y="563.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="426.6" y="574.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (3 samples, 0.05%)</title><rect x="423.6" y="547.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="426.6" y="558.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="424.2" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="427.2" y="590.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.05%)</title><rect x="424.8" y="579.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="427.8" y="590.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="425.6" y="579.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="428.6" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (5 samples, 0.08%)</title><rect x="426.2" y="627.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="429.2" y="638.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.07%)</title><rect x="426.4" y="611.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="429.4" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (5 samples, 0.08%)</title><rect x="427.4" y="675.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="430.4" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.07%)</title><rect x="427.6" y="659.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="430.6" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.07%)</title><rect x="427.6" y="643.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="430.6" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (3 samples, 0.05%)</title><rect x="427.8" y="627.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="430.8" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (25 samples, 0.42%)</title><rect x="428.6" y="723.0" width="5.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="431.6" y="734.0"></text>
</g>
<g>
<title>schedule (25 samples, 0.42%)</title><rect x="428.6" y="707.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="431.6" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (25 samples, 0.42%)</title><rect x="428.6" y="691.0" width="5.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="431.6" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (25 samples, 0.42%)</title><rect x="428.6" y="675.0" width="5.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="431.6" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (7 samples, 0.12%)</title><rect x="433.8" y="787.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.8" y="798.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (3 samples, 0.05%)</title><rect x="435.2" y="787.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$82/44403649.run (2,551 samples, 43.01%)</title><rect x="436.0" y="867.0" width="507.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.0" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$82/44403..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncGet$2 (2,550 samples, 42.99%)</title><rect x="436.2" y="851.0" width="507.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.2" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncGet$2</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.getInternal (2,550 samples, 42.99%)</title><rect x="436.2" y="835.0" width="507.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="439.2" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.getInternal</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (909 samples, 15.33%)</title><rect x="436.2" y="819.0" width="180.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.2" y="830.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (14 samples, 0.24%)</title><rect x="440.9" y="803.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.24%)</title><rect x="440.9" y="787.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.24%)</title><rect x="440.9" y="771.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.9" y="782.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="441.9" y="755.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="444.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.08%)</title><rect x="442.7" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="445.7" y="766.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.08%)</title><rect x="442.7" y="739.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="445.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.08%)</title><rect x="442.7" y="723.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="445.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (861 samples, 14.52%)</title><rect x="443.7" y="803.0" width="171.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="446.7" y="814.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (27 samples, 0.46%)</title><rect x="443.7" y="787.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="446.5" y="771.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="449.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="446.5" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="449.5" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="446.5" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="449.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="446.5" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="449.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="446.5" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="449.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.15%)</title><rect x="446.9" y="771.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.15%)</title><rect x="446.9" y="755.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.15%)</title><rect x="446.9" y="739.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="449.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.15%)</title><rect x="446.9" y="723.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.13%)</title><rect x="447.1" y="707.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="450.1" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="448.1" y="691.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="451.1" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="448.7" y="771.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="451.7" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="448.7" y="755.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="451.7" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="448.7" y="739.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="451.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (834 samples, 14.06%)</title><rect x="449.1" y="787.0" width="165.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="452.1" y="798.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="449.1" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="452.1" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="449.1" y="755.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="452.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="449.1" y="739.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="452.1" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="449.1" y="723.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="452.1" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (831 samples, 14.01%)</title><rect x="449.7" y="771.0" width="165.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.7" y="782.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (827 samples, 13.94%)</title><rect x="450.5" y="755.0" width="164.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.5" y="766.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.05%)</title><rect x="451.7" y="739.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="454.7" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (818 samples, 13.79%)</title><rect x="452.3" y="739.0" width="162.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.3" y="750.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (21 samples, 0.35%)</title><rect x="454.1" y="723.0" width="4.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="457.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.12%)</title><rect x="456.9" y="707.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="459.9" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="457.1" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="460.1" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.07%)</title><rect x="457.4" y="691.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="460.4" y="702.0"></text>
</g>
<g>
<title>send (788 samples, 13.29%)</title><rect x="458.2" y="723.0" width="156.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="461.2" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (776 samples, 13.08%)</title><rect x="460.2" y="707.0" width="154.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="463.2" y="718.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.03%)</title><rect x="460.2" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="463.2" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (774 samples, 13.05%)</title><rect x="460.6" y="691.0" width="154.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="463.6" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (764 samples, 12.88%)</title><rect x="462.2" y="675.0" width="152.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="465.2" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (764 samples, 12.88%)</title><rect x="462.2" y="659.0" width="152.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="465.2" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (738 samples, 12.44%)</title><rect x="464.6" y="643.0" width="146.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="467.6" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.08%)</title><rect x="465.0" y="627.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="468.0" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (715 samples, 12.06%)</title><rect x="466.0" y="627.0" width="142.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="469.0" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (715 samples, 12.06%)</title><rect x="466.0" y="611.0" width="142.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="469.0" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>sock_zerocopy_put (2 samples, 0.03%)</title><rect x="466.6" y="595.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="469.6" y="606.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.05%)</title><rect x="467.0" y="595.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="470.0" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.10%)</title><rect x="467.6" y="595.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="470.6" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (697 samples, 11.75%)</title><rect x="469.0" y="595.0" width="138.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="472.0" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.08%)</title><rect x="470.6" y="579.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="473.6" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.07%)</title><rect x="470.8" y="563.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="473.8" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (7 samples, 0.12%)</title><rect x="471.6" y="579.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="474.6" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (7 samples, 0.12%)</title><rect x="471.6" y="563.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="474.6" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (46 samples, 0.78%)</title><rect x="473.0" y="579.0" width="9.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="476.0" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (45 samples, 0.76%)</title><rect x="473.2" y="563.0" width="8.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="476.2" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (20 samples, 0.34%)</title><rect x="473.6" y="547.0" width="3.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="476.6" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.12%)</title><rect x="473.8" y="531.0" width="1.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="476.8" y="542.0"></text>
</g>
<g>
<title>memset (12 samples, 0.20%)</title><rect x="475.2" y="531.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="478.2" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (13 samples, 0.22%)</title><rect x="477.5" y="547.0" width="2.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="480.5" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="479.7" y="531.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="482.7" y="542.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.07%)</title><rect x="480.1" y="547.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="483.1" y="558.0"></text>
</g>
<g>
<title>__ksize (4 samples, 0.07%)</title><rect x="480.1" y="531.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="483.1" y="542.0"></text>
</g>
<g>
<title>memset (6 samples, 0.10%)</title><rect x="480.9" y="547.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="483.9" y="558.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.05%)</title><rect x="482.1" y="579.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="485.1" y="590.0"></text>
</g>
<g>
<title>tcp_chrono_start (3 samples, 0.05%)</title><rect x="482.7" y="579.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="485.7" y="590.0"></text>
</g>
<g>
<title>tcp_push (615 samples, 10.37%)</title><rect x="483.3" y="579.0" width="122.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="486.3" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (615 samples, 10.37%)</title><rect x="483.3" y="563.0" width="122.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="486.3" y="574.0">__tcp_push_pend..</text>
</g>
<g>
<title>tcp_write_xmit (613 samples, 10.34%)</title><rect x="483.7" y="547.0" width="122.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="486.7" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (592 samples, 9.98%)</title><rect x="484.1" y="531.0" width="117.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="487.1" y="542.0">__tcp_transmit..</text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="485.3" y="515.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="488.3" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (581 samples, 9.80%)</title><rect x="485.7" y="515.0" width="115.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="488.7" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (579 samples, 9.76%)</title><rect x="485.7" y="499.0" width="115.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="488.7" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (573 samples, 9.66%)</title><rect x="486.5" y="483.0" width="114.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="489.5" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.10%)</title><rect x="486.7" y="467.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="489.7" y="478.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.05%)</title><rect x="487.3" y="451.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="490.3" y="462.0"></text>
</g>
<g>
<title>ip_output (566 samples, 9.54%)</title><rect x="487.9" y="467.0" width="112.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="490.9" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (564 samples, 9.51%)</title><rect x="488.3" y="451.0" width="112.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="491.3" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.07%)</title><rect x="488.7" y="435.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="491.7" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (557 samples, 9.39%)</title><rect x="489.5" y="435.0" width="110.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="492.5" y="446.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (554 samples, 9.34%)</title><rect x="490.1" y="419.0" width="110.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="493.1" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (517 samples, 8.72%)</title><rect x="492.3" y="403.0" width="102.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="495.3" y="414.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.0 (516 samples, 8.70%)</title><rect x="492.5" y="387.0" width="102.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="495.5" y="398.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (513 samples, 8.65%)</title><rect x="493.1" y="371.0" width="102.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="496.1" y="382.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (512 samples, 8.63%)</title><rect x="493.1" y="355.0" width="101.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="496.1" y="366.0">__softirqent..</text>
</g>
<g>
<title>net_rx_action (505 samples, 8.51%)</title><rect x="494.3" y="339.0" width="100.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="497.3" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (500 samples, 8.43%)</title><rect x="495.3" y="323.0" width="99.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="498.3" y="334.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb (494 samples, 8.33%)</title><rect x="496.0" y="307.0" width="98.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="499.0" y="318.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (494 samples, 8.33%)</title><rect x="496.0" y="291.0" width="98.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="499.0" y="302.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.10%)</title><rect x="496.2" y="275.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="499.2" y="286.0"></text>
</g>
<g>
<title>ip_rcv (486 samples, 8.19%)</title><rect x="497.4" y="275.0" width="96.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="500.4" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.05%)</title><rect x="497.6" y="259.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="500.6" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (482 samples, 8.13%)</title><rect x="498.2" y="259.0" width="95.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="501.2" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (481 samples, 8.11%)</title><rect x="498.2" y="243.0" width="95.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="501.2" y="254.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (481 samples, 8.11%)</title><rect x="498.2" y="227.0" width="95.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="501.2" y="238.0">ip_local_de..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (479 samples, 8.08%)</title><rect x="498.4" y="211.0" width="95.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="501.4" y="222.0">ip_protocol..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="499.4" y="195.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="502.4" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (471 samples, 7.94%)</title><rect x="500.0" y="195.0" width="93.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="503.0" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (19 samples, 0.32%)</title><rect x="501.6" y="179.0" width="3.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="504.6" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.05%)</title><rect x="505.8" y="179.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="508.8" y="190.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="506.0" y="163.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="509.0" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (437 samples, 7.37%)</title><rect x="506.6" y="179.0" width="86.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="509.6" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.03%)</title><rect x="506.6" y="163.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="509.6" y="174.0"></text>
</g>
<g>
<title>tcp_check_space (7 samples, 0.12%)</title><rect x="507.0" y="163.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="510.0" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (427 samples, 7.20%)</title><rect x="508.6" y="163.0" width="84.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="511.6" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.05%)</title><rect x="509.8" y="147.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="512.8" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.03%)</title><rect x="510.0" y="131.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="513.0" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="510.0" y="115.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="513.0" y="126.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="510.0" y="99.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="513.0" y="110.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="510.4" y="147.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="513.4" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (2 samples, 0.03%)</title><rect x="511.2" y="147.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="514.2" y="158.0"></text>
</g>
<g>
<title>tcp_ack (71 samples, 1.20%)</title><rect x="511.6" y="147.0" width="14.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="514.6" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="514.2" y="131.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="517.2" y="142.0"></text>
</g>
<g>
<title>rb_first (7 samples, 0.12%)</title><rect x="514.5" y="131.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="517.5" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (40 samples, 0.67%)</title><rect x="516.1" y="131.0" width="8.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="519.1" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (32 samples, 0.54%)</title><rect x="517.3" y="115.0" width="6.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="520.3" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (10 samples, 0.17%)</title><rect x="517.3" y="99.0" width="2.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="520.3" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (9 samples, 0.15%)</title><rect x="517.5" y="83.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="520.5" y="94.0"></text>
</g>
<g>
<title>skb_release_all (22 samples, 0.37%)</title><rect x="519.3" y="99.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="522.3" y="110.0"></text>
</g>
<g>
<title>skb_release_data (22 samples, 0.37%)</title><rect x="519.3" y="83.0" width="4.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="522.3" y="94.0"></text>
</g>
<g>
<title>skb_free_head (5 samples, 0.08%)</title><rect x="522.7" y="67.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="525.7" y="78.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.07%)</title><rect x="522.9" y="51.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="525.9" y="62.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="523.1" y="35.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="526.1" y="46.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="524.1" y="131.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="527.1" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.05%)</title><rect x="525.1" y="131.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="528.1" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (332 samples, 5.60%)</title><rect x="525.7" y="147.0" width="66.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="528.7" y="158.0">tcp_dat..</text>
</g>
<g>
<title>sock_def_readable (332 samples, 5.60%)</title><rect x="525.7" y="131.0" width="66.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="528.7" y="142.0">sock_de..</text>
</g>
<g>
<title>__wake_up_sync_key (331 samples, 5.58%)</title><rect x="525.9" y="115.0" width="65.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="528.9" y="126.0">__wake_..</text>
</g>
<g>
<title>__wake_up_common_lock (330 samples, 5.56%)</title><rect x="525.9" y="99.0" width="65.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="528.9" y="110.0">__wake_..</text>
</g>
<g>
<title>__lock_text_start (330 samples, 5.56%)</title><rect x="525.9" y="83.0" width="65.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="528.9" y="94.0">__lock_..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.05%)</title><rect x="591.7" y="147.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="594.7" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.10%)</title><rect x="592.3" y="147.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="595.3" y="158.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.08%)</title><rect x="592.5" y="131.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="595.5" y="142.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (5 samples, 0.08%)</title><rect x="592.5" y="115.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="595.5" y="126.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (5 samples, 0.08%)</title><rect x="592.5" y="99.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="595.5" y="110.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.03%)</title><rect x="594.3" y="307.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="597.3" y="318.0"></text>
</g>
<g>
<title>dev_queue_xmit (26 samples, 0.44%)</title><rect x="595.1" y="403.0" width="5.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="598.1" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (25 samples, 0.42%)</title><rect x="595.1" y="387.0" width="5.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="598.1" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.19%)</title><rect x="596.1" y="371.0" width="2.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="599.1" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (10 samples, 0.17%)</title><rect x="596.1" y="355.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="599.1" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="596.5" y="339.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="599.5" y="350.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.07%)</title><rect x="596.9" y="339.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="599.9" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.07%)</title><rect x="596.9" y="323.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="599.9" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.07%)</title><rect x="596.9" y="307.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="599.9" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.07%)</title><rect x="598.3" y="371.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="601.3" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (5 samples, 0.08%)</title><rect x="599.1" y="371.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="602.1" y="382.0"></text>
</g>
<g>
<title>ip_copy_addrs (2 samples, 0.03%)</title><rect x="600.9" y="499.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="603.9" y="510.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.03%)</title><rect x="601.3" y="515.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="604.3" y="526.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="601.3" y="499.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="604.3" y="510.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.08%)</title><rect x="602.1" y="531.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="605.1" y="542.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (4 samples, 0.07%)</title><rect x="602.3" y="515.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="605.3" y="526.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (4 samples, 0.07%)</title><rect x="602.3" y="499.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="605.3" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.08%)</title><rect x="603.3" y="531.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="606.3" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.08%)</title><rect x="603.3" y="515.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="606.3" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.08%)</title><rect x="603.3" y="499.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="606.3" y="510.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.07%)</title><rect x="603.5" y="483.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="606.5" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="603.7" y="467.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="606.7" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="604.5" y="531.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="607.5" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="604.9" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="607.9" y="542.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="605.7" y="579.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="608.7" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.13%)</title><rect x="606.1" y="579.0" width="1.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="609.1" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="606.1" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="609.1" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.10%)</title><rect x="606.5" y="563.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="609.5" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="607.7" y="595.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="610.7" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (16 samples, 0.27%)</title><rect x="608.3" y="627.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="611.3" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (15 samples, 0.25%)</title><rect x="608.5" y="611.0" width="2.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="611.5" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (15 samples, 0.25%)</title><rect x="608.5" y="595.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="611.5" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (10 samples, 0.17%)</title><rect x="609.5" y="579.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="612.5" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (6 samples, 0.10%)</title><rect x="610.2" y="563.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="613.2" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (14 samples, 0.24%)</title><rect x="611.4" y="643.0" width="2.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="614.4" y="654.0"></text>
</g>
<g>
<title>__fdget (8 samples, 0.13%)</title><rect x="611.4" y="627.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="614.4" y="638.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.13%)</title><rect x="611.4" y="611.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="614.4" y="622.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.13%)</title><rect x="611.4" y="595.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="614.4" y="606.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.10%)</title><rect x="613.0" y="627.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="616.0" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="614.2" y="675.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="617.2" y="686.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="614.2" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="617.2" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="614.2" y="643.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="617.2" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="614.2" y="627.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="617.2" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="614.6" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="617.6" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="614.6" y="691.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="617.6" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="614.6" y="675.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="617.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.15%)</title><rect x="615.0" y="803.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="618.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.08%)</title><rect x="615.8" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="615.8" y="771.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="618.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (10 samples, 0.17%)</title><rect x="617.0" y="819.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="620.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.15%)</title><rect x="617.2" y="803.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="620.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.get (1,628 samples, 27.45%)</title><rect x="619.0" y="819.0" width="323.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="622.0" y="830.0">ru/mail/polis/dao/kovalkov/DAOImpl.get</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="619.2" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="622.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="619.2" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="619.2" y="771.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="622.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="619.2" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="622.2" y="766.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,611 samples, 27.16%)</title><rect x="619.6" y="803.0" width="320.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="622.6" y="814.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,611 samples, 27.16%)</title><rect x="619.6" y="787.0" width="320.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="622.6" y="798.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,546 samples, 26.07%)</title><rect x="620.6" y="771.0" width="307.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="623.6" y="782.0">Java_org_rocksdb_RocksDB_get__J_3BII</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (3 samples, 0.05%)</title><rect x="620.6" y="755.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="623.6" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.03%)</title><rect x="621.4" y="755.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="624.4" y="766.0"></text>
</g>
<g>
<title>cfree (5 samples, 0.08%)</title><rect x="622.0" y="755.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="625.0" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="623.0" y="755.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="626.0" y="766.0"></text>
</g>
<g>
<title>operator delete(void*) (4 samples, 0.07%)</title><rect x="623.4" y="755.0" width="0.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="626.4" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (4 samples, 0.07%)</title><rect x="624.2" y="755.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="627.2" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (6 samples, 0.10%)</title><rect x="625.0" y="755.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="628.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (2 samples, 0.03%)</title><rect x="626.2" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="629.2" y="766.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="626.6" y="755.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.6" y="766.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,510 samples, 25.46%)</title><rect x="627.0" y="755.0" width="300.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.0" y="766.0">rocksdb_get_helper(JNIEnv_*, rocksdb::DB..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.03%)</title><rect x="627.2" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="630.2" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.15%)</title><rect x="627.6" y="739.0" width="1.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="630.6" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (4 samples, 0.07%)</title><rect x="628.5" y="723.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="631.5" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.08%)</title><rect x="629.3" y="739.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="632.3" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.05%)</title><rect x="629.7" y="723.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="632.7" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (5 samples, 0.08%)</title><rect x="630.3" y="739.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="633.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (3 samples, 0.05%)</title><rect x="631.5" y="739.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="634.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1,424 samples, 24.01%)</title><rect x="632.1" y="739.0" width="283.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="635.1" y="750.0">rocksdb::DB::Get(rocksdb::ReadOptions ..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="632.3" y="723.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="635.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1,415 samples, 23.86%)</title><rect x="632.9" y="723.0" width="281.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="635.9" y="734.0">rocksdb::DB::Get(rocksdb::ReadOptions ..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (10 samples, 0.17%)</title><rect x="633.7" y="707.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="636.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (8 samples, 0.13%)</title><rect x="634.1" y="691.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="637.1" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.07%)</title><rect x="634.3" y="675.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="637.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (3 samples, 0.05%)</title><rect x="635.1" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="638.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1,398 samples, 23.57%)</title><rect x="635.7" y="707.0" width="278.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="638.7" y="718.0">rocksdb::DBImpl::Get(rocksdb::ReadOpt..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (1,386 samples, 23.37%)</title><rect x="636.1" y="691.0" width="275.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="639.1" y="702.0">rocksdb::DBImpl::Get(rocksdb::ReadOpt..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.07%)</title><rect x="636.7" y="675.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="639.7" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.15%)</title><rect x="637.7" y="675.0" width="1.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="640.7" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="639.1" y="659.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="642.1" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="639.1" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="642.1" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="639.1" y="627.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="642.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (3 samples, 0.05%)</title><rect x="639.5" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="642.5" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="639.7" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="642.7" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="639.7" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="642.7" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="639.7" y="627.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="642.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (4 samples, 0.07%)</title><rect x="640.1" y="675.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="643.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (3 samples, 0.05%)</title><rect x="640.9" y="675.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="643.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (3 samples, 0.05%)</title><rect x="641.5" y="675.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="644.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1,337 samples, 22.54%)</title><rect x="642.1" y="675.0" width="266.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="645.1" y="686.0">rocksdb::DBImpl::GetImpl(rocksdb::Re..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.07%)</title><rect x="646.3" y="659.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="649.3" y="670.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (6 samples, 0.10%)</title><rect x="647.3" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="650.3" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (12 samples, 0.20%)</title><rect x="648.4" y="659.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="651.4" y="670.0"></text>
</g>
<g>
<title>memcpy (2 samples, 0.03%)</title><rect x="651.0" y="659.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="654.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (30 samples, 0.51%)</title><rect x="651.6" y="659.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="654.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="652.6" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="655.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (20 samples, 0.34%)</title><rect x="653.0" y="643.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="656.0" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="655.8" y="627.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="658.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (4 samples, 0.07%)</title><rect x="656.2" y="627.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="659.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (2 samples, 0.03%)</title><rect x="657.0" y="643.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="660.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="657.0" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="660.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="657.6" y="659.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="660.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (13 samples, 0.22%)</title><rect x="658.2" y="659.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (8 samples, 0.13%)</title><rect x="658.2" y="643.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="658.6" y="627.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="661.6" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="658.6" y="611.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="661.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (4 samples, 0.07%)</title><rect x="659.0" y="627.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="662.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (5 samples, 0.08%)</title><rect x="659.8" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="662.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.05%)</title><rect x="660.8" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="663.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (2 samples, 0.03%)</title><rect x="661.6" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="664.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.03%)</title><rect x="662.0" y="659.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="665.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (285 samples, 4.81%)</title><rect x="662.4" y="659.0" width="56.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="665.4" y="670.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (6 samples, 0.10%)</title><rect x="664.6" y="643.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="667.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (264 samples, 4.45%)</title><rect x="666.0" y="643.0" width="52.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="669.0" y="654.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (260 samples, 4.38%)</title><rect x="666.4" y="627.0" width="51.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="669.4" y="638.0">/tmp/..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (6 samples, 0.10%)</title><rect x="666.9" y="611.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="669.9" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="667.7" y="595.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="670.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (235 samples, 3.96%)</title><rect x="668.1" y="611.0" width="46.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="671.1" y="622.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (12 samples, 0.20%)</title><rect x="689.0" y="595.0" width="2.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="692.0" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.10%)</title><rect x="690.2" y="579.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="693.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.10%)</title><rect x="690.2" y="563.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="693.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.10%)</title><rect x="690.2" y="547.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="693.2" y="558.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (11 samples, 0.19%)</title><rect x="691.4" y="595.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="694.4" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (30 samples, 0.51%)</title><rect x="693.6" y="595.0" width="6.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="696.6" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="699.2" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="702.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="699.2" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="702.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="699.2" y="547.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="702.2" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (3 samples, 0.05%)</title><rect x="699.6" y="595.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="702.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (69 samples, 1.16%)</title><rect x="700.2" y="595.0" width="13.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="703.2" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (3 samples, 0.05%)</title><rect x="704.4" y="579.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="707.4" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (26 samples, 0.44%)</title><rect x="704.9" y="579.0" width="5.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="707.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="709.7" y="563.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="712.7" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="709.7" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="712.7" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="709.7" y="531.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="712.7" y="542.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="710.1" y="579.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="713.1" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (13 samples, 0.22%)</title><rect x="710.7" y="579.0" width="2.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="713.7" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="712.9" y="563.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="715.9" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="712.9" y="547.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="715.9" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="712.9" y="531.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="715.9" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="713.3" y="579.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="716.3" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="713.9" y="595.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="716.9" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="713.9" y="579.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="716.9" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="713.9" y="563.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="716.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (15 samples, 0.25%)</title><rect x="714.9" y="611.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="717.9" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="717.3" y="595.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="720.3" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="717.3" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="720.3" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="717.3" y="563.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="720.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (2 samples, 0.03%)</title><rect x="718.1" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="721.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="718.7" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="721.7" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="718.7" y="627.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="721.7" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="718.7" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="721.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (3 samples, 0.05%)</title><rect x="719.1" y="659.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="722.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="719.9" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="722.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="719.9" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="722.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTableListVersion::GetFromList(std::list&lt;rocksdb::MemTable*, std::allocator&lt;rocksdb::MemTable*&gt; &gt;*, rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.03%)</title><rect x="720.3" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="723.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="720.7" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="723.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (3 samples, 0.05%)</title><rect x="721.1" y="659.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="724.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::StopWatchNano::StopWatchNano(rocksdb::Env*, bool) (3 samples, 0.05%)</title><rect x="721.9" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="724.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (926 samples, 15.61%)</title><rect x="722.7" y="659.0" width="184.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="725.7" y="670.0">rocksdb::Version::Get(ro..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (5 samples, 0.08%)</title><rect x="727.4" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="730.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (3 samples, 0.05%)</title><rect x="728.4" y="643.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="731.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::GetContext::GetContext(rocksdb::Comparator const*, rocksdb::MergeOperator const*, rocksdb::Logger*, rocksdb::Statistics*, rocksdb::GetContext::GetState, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*, bool*, rocksdb::MergeContext*, bool, unsigned long*, rocksdb::Env*, unsigned long*, rocksdb::PinnedIteratorsManager*, rocksdb::ReadCallback*, bool*, unsigned long) (3 samples, 0.05%)</title><rect x="729.0" y="643.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.0" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="729.2" y="627.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="732.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.03%)</title><rect x="729.6" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="732.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (884 samples, 14.90%)</title><rect x="730.0" y="643.0" width="175.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="733.0" y="654.0">rocksdb::TableCache::Ge..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (816 samples, 13.76%)</title><rect x="732.8" y="627.0" width="162.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="735.8" y="638.0">rocksdb::BlockBasedTa..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (25 samples, 0.42%)</title><rect x="740.4" y="611.0" width="4.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="743.4" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="744.9" y="595.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="747.9" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="744.9" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="747.9" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="744.9" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="747.9" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="745.5" y="611.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="748.5" y="622.0"></text>
</g>
<g>
<title>cfree (9 samples, 0.15%)</title><rect x="746.5" y="611.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="749.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (27 samples, 0.46%)</title><rect x="748.3" y="611.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="751.3" y="622.0"></text>
</g>
<g>
<title>__libc_malloc (3 samples, 0.05%)</title><rect x="749.9" y="595.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="752.9" y="606.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="750.5" y="595.0" width="0.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="753.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (8 samples, 0.13%)</title><rect x="750.9" y="595.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="753.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (6 samples, 0.10%)</title><rect x="752.5" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (5 samples, 0.08%)</title><rect x="753.9" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="756.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (4 samples, 0.07%)</title><rect x="754.9" y="611.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="757.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (3 samples, 0.05%)</title><rect x="755.9" y="611.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="758.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (2 samples, 0.03%)</title><rect x="756.9" y="611.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (223 samples, 3.76%)</title><rect x="757.3" y="611.0" width="44.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.3" y="622.0">rock..</text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (2 samples, 0.03%)</title><rect x="759.7" y="595.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="762.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (6 samples, 0.10%)</title><rect x="760.1" y="595.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="763.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (6 samples, 0.10%)</title><rect x="760.1" y="579.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="763.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (5 samples, 0.08%)</title><rect x="761.3" y="595.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (195 samples, 3.29%)</title><rect x="762.2" y="595.0" width="38.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="765.2" y="606.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (2 samples, 0.03%)</title><rect x="762.6" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="765.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.03%)</title><rect x="763.2" y="579.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="766.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (184 samples, 3.10%)</title><rect x="763.6" y="579.0" width="36.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.6" y="590.0">roc..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (6 samples, 0.10%)</title><rect x="764.8" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.8" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.03%)</title><rect x="766.0" y="563.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="769.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (31 samples, 0.52%)</title><rect x="766.4" y="563.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="769.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::RandomAccessFileReader::Read(rocksdb::IOOptions const&amp;, unsigned long, unsigned long, rocksdb::Slice*, char*, std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;*, bool) const (8 samples, 0.13%)</title><rect x="767.4" y="547.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="770.4" y="558.0"></text>
</g>
<g>
<title>__libc_pread (7 samples, 0.12%)</title><rect x="767.6" y="531.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="770.6" y="542.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.12%)</title><rect x="767.6" y="515.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="770.6" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.12%)</title><rect x="767.6" y="499.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="770.6" y="510.0"></text>
</g>
<g>
<title>__x64_sys_pread64 (7 samples, 0.12%)</title><rect x="767.6" y="483.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="770.6" y="494.0"></text>
</g>
<g>
<title>ksys_pread64 (7 samples, 0.12%)</title><rect x="767.6" y="467.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="770.6" y="478.0"></text>
</g>
<g>
<title>vfs_read (5 samples, 0.08%)</title><rect x="768.0" y="451.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="771.0" y="462.0"></text>
</g>
<g>
<title>__vfs_read (5 samples, 0.08%)</title><rect x="768.0" y="435.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="771.0" y="446.0"></text>
</g>
<g>
<title>new_sync_read (5 samples, 0.08%)</title><rect x="768.0" y="419.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="771.0" y="430.0"></text>
</g>
<g>
<title>ext4_file_read_iter (5 samples, 0.08%)</title><rect x="768.0" y="403.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="771.0" y="414.0"></text>
</g>
<g>
<title>generic_file_read_iter (5 samples, 0.08%)</title><rect x="768.0" y="387.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="771.0" y="398.0"></text>
</g>
<g>
<title>generic_file_buffered_read (4 samples, 0.07%)</title><rect x="768.0" y="371.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="771.0" y="382.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (18 samples, 0.30%)</title><rect x="769.0" y="547.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="772.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (18 samples, 0.30%)</title><rect x="769.0" y="531.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.0" y="542.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (17 samples, 0.29%)</title><rect x="769.2" y="515.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="772.2" y="526.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (15 samples, 0.25%)</title><rect x="769.2" y="499.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="772.2" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (15 samples, 0.25%)</title><rect x="769.2" y="483.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="772.2" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (15 samples, 0.25%)</title><rect x="769.2" y="467.0" width="3.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="772.2" y="478.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="769.2" y="451.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="772.2" y="462.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (13 samples, 0.22%)</title><rect x="769.6" y="451.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.6" y="462.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (2 samples, 0.03%)</title><rect x="769.8" y="435.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="772.8" y="446.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::AppendFromSelf(unsigned long, unsigned long) (7 samples, 0.12%)</title><rect x="770.2" y="435.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="773.2" y="446.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (2 samples, 0.03%)</title><rect x="771.0" y="419.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="774.0" y="430.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (2 samples, 0.03%)</title><rect x="771.0" y="403.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="774.0" y="414.0"></text>
</g>
<g>
<title>snappy::SnappyArrayWriter::TryFastAppend(char const*, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="771.6" y="435.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="774.6" y="446.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() (3 samples, 0.05%)</title><rect x="772.6" y="563.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (130 samples, 2.19%)</title><rect x="773.2" y="563.0" width="25.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="776.2" y="574.0">r..</text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (117 samples, 1.97%)</title><rect x="774.2" y="547.0" width="23.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="777.2" y="558.0">r..</text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (12 samples, 0.20%)</title><rect x="774.2" y="531.0" width="2.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="777.2" y="542.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits@plt (2 samples, 0.03%)</title><rect x="776.6" y="531.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="779.6" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="777.0" y="531.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="780.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (6 samples, 0.10%)</title><rect x="777.6" y="531.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="780.6" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="778.2" y="515.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="781.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetShard(int) (2 samples, 0.03%)</title><rect x="778.8" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="781.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (2 samples, 0.03%)</title><rect x="779.2" y="531.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="782.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (83 samples, 1.40%)</title><rect x="779.6" y="531.0" width="16.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="782.6" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.12%)</title><rect x="780.4" y="515.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="783.4" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.12%)</title><rect x="780.4" y="499.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="783.4" y="510.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.12%)</title><rect x="780.4" y="483.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="783.4" y="494.0"></text>
</g>
<g>
<title>__x64_sys_futex (7 samples, 0.12%)</title><rect x="780.4" y="467.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="783.4" y="478.0"></text>
</g>
<g>
<title>do_futex (7 samples, 0.12%)</title><rect x="780.4" y="451.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="783.4" y="462.0"></text>
</g>
<g>
<title>futex_wake (7 samples, 0.12%)</title><rect x="780.4" y="435.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="783.4" y="446.0"></text>
</g>
<g>
<title>wake_up_q (6 samples, 0.10%)</title><rect x="780.6" y="419.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="783.6" y="430.0"></text>
</g>
<g>
<title>try_to_wake_up (6 samples, 0.10%)</title><rect x="780.6" y="403.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="783.6" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.10%)</title><rect x="780.6" y="387.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="783.6" y="398.0"></text>
</g>
<g>
<title>malloc_usable_size (4 samples, 0.07%)</title><rect x="781.7" y="515.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="784.7" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.22%)</title><rect x="782.5" y="515.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="785.5" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="785.1" y="515.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="788.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (11 samples, 0.19%)</title><rect x="785.5" y="515.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="788.5" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="787.1" y="499.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="790.1" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="787.1" y="483.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="790.1" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="787.1" y="467.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="790.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (4 samples, 0.07%)</title><rect x="787.7" y="515.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (38 samples, 0.64%)</title><rect x="788.5" y="515.0" width="7.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="791.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (37 samples, 0.62%)</title><rect x="788.7" y="499.0" width="7.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="791.7" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="795.7" y="483.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="798.7" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="795.7" y="467.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="798.7" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="795.7" y="451.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="798.7" y="462.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (3 samples, 0.05%)</title><rect x="796.1" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (3 samples, 0.05%)</title><rect x="796.7" y="531.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="799.7" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (3 samples, 0.05%)</title><rect x="797.9" y="547.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="800.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (2 samples, 0.03%)</title><rect x="798.5" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="801.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::PutDataBlockToCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockContents*, rocksdb::CompressionType, rocksdb::UncompressionDict const&amp;, rocksdb::MemoryAllocator*, rocksdb::BlockType, rocksdb::GetContext*) const (5 samples, 0.08%)</title><rect x="799.1" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="802.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Insert(rocksdb::Slice const&amp;, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (5 samples, 0.08%)</title><rect x="799.1" y="547.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="802.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Insert(rocksdb::Slice const&amp;, unsigned int, void*, unsigned long, void (*)(rocksdb::Slice const&amp;, void*), rocksdb::Cache::Handle**, rocksdb::Cache::Priority) (4 samples, 0.07%)</title><rect x="799.3" y="531.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="802.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::EvictFromLRU(unsigned long, rocksdb::autovector&lt;rocksdb::LRUHandle*, 8ul&gt;*) (2 samples, 0.03%)</title><rect x="799.5" y="515.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="802.5" y="526.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.03%)</title><rect x="800.2" y="579.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="803.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.03%)</title><rect x="801.0" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="804.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (183 samples, 3.09%)</title><rect x="801.6" y="611.0" width="36.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="804.6" y="622.0">roc..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.07%)</title><rect x="807.2" y="595.0" width="0.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="810.2" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.05%)</title><rect x="808.0" y="595.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="811.0" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.15%)</title><rect x="808.6" y="595.0" width="1.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="811.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (99 samples, 1.67%)</title><rect x="810.6" y="595.0" width="19.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="813.6" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (8 samples, 0.13%)</title><rect x="811.4" y="579.0" width="1.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="814.4" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (9 samples, 0.15%)</title><rect x="813.0" y="579.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="816.0" y="590.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (8 samples, 0.13%)</title><rect x="814.8" y="579.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="817.8" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (20 samples, 0.34%)</title><rect x="816.4" y="579.0" width="3.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="819.4" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="819.9" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="822.9" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="819.9" y="547.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="822.9" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="819.9" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="822.9" y="542.0"></text>
</g>
<g>
<title>memcpy (6 samples, 0.10%)</title><rect x="820.3" y="579.0" width="1.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="823.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (12 samples, 0.20%)</title><rect x="821.5" y="579.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="824.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (31 samples, 0.52%)</title><rect x="823.9" y="579.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="826.9" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (3 samples, 0.05%)</title><rect x="825.1" y="563.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="828.1" y="574.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (13 samples, 0.22%)</title><rect x="825.7" y="563.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="828.7" y="574.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="828.3" y="563.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="831.3" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.10%)</title><rect x="828.7" y="563.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="831.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (11 samples, 0.19%)</title><rect x="830.3" y="595.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="833.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="832.1" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="835.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="832.1" y="563.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="835.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="832.1" y="547.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="835.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (26 samples, 0.44%)</title><rect x="832.5" y="595.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="835.5" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.17%)</title><rect x="834.7" y="579.0" width="2.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="837.7" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="836.9" y="579.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="839.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="837.7" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="840.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="837.7" y="579.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="840.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="837.7" y="563.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="840.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (14 samples, 0.24%)</title><rect x="838.0" y="611.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="841.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (10 samples, 0.17%)</title><rect x="838.6" y="595.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="841.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (2 samples, 0.03%)</title><rect x="838.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="841.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (6 samples, 0.10%)</title><rect x="839.0" y="579.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="842.0" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="839.0" y="563.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="842.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (3 samples, 0.05%)</title><rect x="839.6" y="563.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="842.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (12 samples, 0.20%)</title><rect x="840.8" y="611.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="843.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::RegisterCleanup(void (*)(void*, void*), void*, void*) (2 samples, 0.03%)</title><rect x="842.8" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (240 samples, 4.05%)</title><rect x="843.2" y="611.0" width="47.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="846.2" y="622.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.07%)</title><rect x="864.5" y="595.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="867.5" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (34 samples, 0.57%)</title><rect x="865.3" y="595.0" width="6.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="868.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="871.5" y="579.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="874.5" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="871.5" y="563.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="874.5" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="871.5" y="547.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="874.5" y="558.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (11 samples, 0.19%)</title><rect x="872.1" y="595.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="875.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (34 samples, 0.57%)</title><rect x="874.3" y="595.0" width="6.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="877.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.07%)</title><rect x="880.2" y="579.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="883.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.07%)</title><rect x="880.2" y="563.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="883.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.07%)</title><rect x="880.2" y="547.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="883.2" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (3 samples, 0.05%)</title><rect x="881.0" y="595.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="884.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (3 samples, 0.05%)</title><rect x="881.8" y="595.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (9 samples, 0.15%)</title><rect x="882.4" y="595.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="885.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockHandle::DecodeFrom(rocksdb::Slice*) (2 samples, 0.03%)</title><rect x="883.0" y="579.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="886.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) (4 samples, 0.07%)</title><rect x="883.4" y="579.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (31 samples, 0.52%)</title><rect x="884.2" y="595.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="887.2" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="886.0" y="579.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="889.0" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.29%)</title><rect x="886.4" y="579.0" width="3.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="889.4" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="889.8" y="579.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="892.8" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="890.4" y="595.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="893.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="890.4" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="893.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="890.4" y="563.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="893.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.03%)</title><rect x="891.0" y="611.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (7 samples, 0.12%)</title><rect x="891.4" y="611.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (8 samples, 0.13%)</title><rect x="893.2" y="611.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="896.2" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="894.8" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="897.8" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="894.8" y="595.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="897.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="894.8" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="897.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIndexIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (9 samples, 0.15%)</title><rect x="895.1" y="627.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (5 samples, 0.08%)</title><rect x="896.9" y="627.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="899.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (3 samples, 0.05%)</title><rect x="897.9" y="627.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="900.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::IndexValue&gt;::status() const (4 samples, 0.07%)</title><rect x="898.5" y="627.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (3 samples, 0.05%)</title><rect x="899.3" y="627.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (3 samples, 0.05%)</title><rect x="899.9" y="627.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="902.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (2 samples, 0.03%)</title><rect x="900.5" y="627.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="900.9" y="627.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="903.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) [clone .plt] (2 samples, 0.03%)</title><rect x="901.5" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="904.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::value() const (4 samples, 0.07%)</title><rect x="901.9" y="627.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="904.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (4 samples, 0.07%)</title><rect x="902.7" y="627.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="905.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="903.9" y="627.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="906.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.07%)</title><rect x="904.5" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="907.5" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="905.3" y="627.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="908.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="905.3" y="611.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="908.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="905.3" y="595.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="908.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="905.9" y="643.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="908.9" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="905.9" y="627.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="908.9" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="905.9" y="611.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="908.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::Version::IsFilterSkipped(int, bool) (3 samples, 0.05%)</title><rect x="906.9" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="909.9" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="907.5" y="659.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="910.5" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="907.5" y="643.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="910.5" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="907.5" y="627.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="910.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (2 samples, 0.03%)</title><rect x="908.1" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="911.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (2 samples, 0.03%)</title><rect x="908.5" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (3 samples, 0.05%)</title><rect x="908.9" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="911.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (2 samples, 0.03%)</title><rect x="909.7" y="675.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="912.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (8 samples, 0.13%)</title><rect x="910.3" y="675.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="913.3" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="911.3" y="659.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="914.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="911.3" y="643.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="914.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="911.3" y="627.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="914.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (10 samples, 0.17%)</title><rect x="911.9" y="691.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (3 samples, 0.05%)</title><rect x="913.9" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="916.9" y="718.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (5 samples, 0.08%)</title><rect x="914.4" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="917.4" y="734.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (59 samples, 0.99%)</title><rect x="915.6" y="739.0" width="11.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="918.6" y="750.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="916.2" y="723.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="919.2" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="916.6" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="919.6" y="734.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="917.2" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="920.2" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="917.6" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="920.6" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (5 samples, 0.08%)</title><rect x="918.0" y="723.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="921.0" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (37 samples, 0.62%)</title><rect x="919.0" y="723.0" width="7.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="922.0" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.05%)</title><rect x="919.8" y="707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="922.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.07%)</title><rect x="920.4" y="707.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="923.4" y="718.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="921.2" y="707.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="924.2" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (24 samples, 0.40%)</title><rect x="921.6" y="707.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="924.6" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (18 samples, 0.30%)</title><rect x="922.4" y="691.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="925.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (11 samples, 0.19%)</title><rect x="922.4" y="675.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="925.4" y="686.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="922.8" y="659.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="925.8" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (6 samples, 0.10%)</title><rect x="923.4" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="926.4" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="924.6" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.6" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="925.0" y="675.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="928.0" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="926.0" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.0" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.08%)</title><rect x="926.4" y="723.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="929.4" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.05%)</title><rect x="926.6" y="707.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="929.6" y="718.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (4 samples, 0.07%)</title><rect x="927.4" y="755.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.4" y="766.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.24%)</title><rect x="928.2" y="771.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="931.2" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.12%)</title><rect x="928.2" y="755.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="931.2" y="766.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (6 samples, 0.10%)</title><rect x="929.6" y="755.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="932.6" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (33 samples, 0.56%)</title><rect x="931.0" y="771.0" width="6.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="934.0" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="936.9" y="755.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="939.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="936.9" y="739.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="939.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="936.9" y="723.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="939.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (5 samples, 0.08%)</title><rect x="937.7" y="771.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="940.7" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (4 samples, 0.07%)</title><rect x="938.7" y="771.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="941.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (14 samples, 0.24%)</title><rect x="940.1" y="803.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (10 samples, 0.17%)</title><rect x="940.9" y="787.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="943.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.03%)</title><rect x="941.3" y="771.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="941.3" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="944.3" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkBounds (2 samples, 0.03%)</title><rect x="941.3" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="944.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.10%)</title><rect x="941.7" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="944.7" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="942.1" y="755.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="945.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="942.1" y="739.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="945.1" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.07%)</title><rect x="942.1" y="723.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="945.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.07%)</title><rect x="942.1" y="707.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="945.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (3 samples, 0.05%)</title><rect x="942.9" y="819.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="945.9" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.03%)</title><rect x="943.1" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="946.1" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="943.1" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="946.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="943.1" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="946.1" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="943.1" y="755.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="946.1" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,230 samples, 20.74%)</title><rect x="943.5" y="915.0" width="244.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="946.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (11 samples, 0.19%)</title><rect x="944.3" y="899.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="947.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (11 samples, 0.19%)</title><rect x="944.3" y="883.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="947.3" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (8 samples, 0.13%)</title><rect x="944.9" y="867.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="947.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (447 samples, 7.54%)</title><rect x="946.5" y="899.0" width="88.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="949.5" y="910.0">one/nio/ne..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="949.7" y="883.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="952.7" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="949.7" y="867.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="949.7" y="851.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.7" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="949.7" y="835.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="952.7" y="846.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="949.7" y="819.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="952.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (427 samples, 7.20%)</title><rect x="950.5" y="883.0" width="84.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="953.5" y="894.0">one/nio/ne..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.07%)</title><rect x="953.8" y="867.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="956.8" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.03%)</title><rect x="954.6" y="867.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="957.6" y="878.0"></text>
</g>
<g>
<title>clock_gettime (15 samples, 0.25%)</title><rect x="955.0" y="867.0" width="3.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="958.0" y="878.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="957.6" y="851.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="960.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="957.6" y="835.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="960.6" y="846.0"></text>
</g>
<g>
<title>epoll_wait (389 samples, 6.56%)</title><rect x="958.0" y="867.0" width="77.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="961.0" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (364 samples, 6.14%)</title><rect x="963.0" y="851.0" width="72.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="966.0" y="862.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.03%)</title><rect x="963.0" y="835.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="966.0" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (362 samples, 6.10%)</title><rect x="963.4" y="835.0" width="72.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="966.4" y="846.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (352 samples, 5.93%)</title><rect x="964.6" y="819.0" width="70.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="967.6" y="830.0">__x64_sy..</text>
</g>
<g>
<title>do_epoll_wait (351 samples, 5.92%)</title><rect x="964.8" y="803.0" width="69.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="967.8" y="814.0">do_epol..</text>
</g>
<g>
<title>__fdget (9 samples, 0.15%)</title><rect x="965.8" y="787.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="968.8" y="798.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.15%)</title><rect x="965.8" y="771.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="968.8" y="782.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.15%)</title><rect x="965.8" y="755.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="968.8" y="766.0"></text>
</g>
<g>
<title>ep_poll (327 samples, 5.51%)</title><rect x="967.8" y="787.0" width="65.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="970.8" y="798.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (48 samples, 0.81%)</title><rect x="969.2" y="771.0" width="9.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="972.2" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (41 samples, 0.69%)</title><rect x="970.4" y="755.0" width="8.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="973.4" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (32 samples, 0.54%)</title><rect x="971.7" y="739.0" width="6.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="974.7" y="750.0"></text>
</g>
<g>
<title>sock_poll (28 samples, 0.47%)</title><rect x="972.5" y="723.0" width="5.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="975.5" y="734.0"></text>
</g>
<g>
<title>tcp_poll (9 samples, 0.15%)</title><rect x="975.5" y="707.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="978.5" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (4 samples, 0.07%)</title><rect x="977.3" y="707.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="980.3" y="718.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.03%)</title><rect x="978.1" y="739.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="981.1" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (268 samples, 4.52%)</title><rect x="978.9" y="771.0" width="53.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="981.9" y="782.0">sched..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (268 samples, 4.52%)</title><rect x="978.9" y="755.0" width="53.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="981.9" y="766.0">sched..</text>
</g>
<g>
<title>schedule (267 samples, 4.50%)</title><rect x="979.1" y="739.0" width="53.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="982.1" y="750.0">sched..</text>
</g>
<g>
<title>__sched_text_start (267 samples, 4.50%)</title><rect x="979.1" y="723.0" width="53.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="982.1" y="734.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (254 samples, 4.28%)</title><rect x="981.7" y="707.0" width="50.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="984.7" y="718.0">finis..</text>
</g>
<g>
<title>apic_timer_interrupt (5 samples, 0.08%)</title><rect x="1031.2" y="691.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1034.2" y="702.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (5 samples, 0.08%)</title><rect x="1031.2" y="675.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1034.2" y="686.0"></text>
</g>
<g>
<title>irq_exit (5 samples, 0.08%)</title><rect x="1031.2" y="659.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1034.2" y="670.0"></text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 0.08%)</title><rect x="1031.2" y="643.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1034.2" y="654.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.05%)</title><rect x="1032.2" y="771.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1035.2" y="782.0"></text>
</g>
<g>
<title>fput_many (7 samples, 0.12%)</title><rect x="1032.8" y="787.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1035.8" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.03%)</title><rect x="1034.2" y="787.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1037.2" y="798.0"></text>
</g>
<g>
<title>do_epoll_wait (4 samples, 0.07%)</title><rect x="1034.6" y="819.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1037.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (768 samples, 12.95%)</title><rect x="1035.4" y="899.0" width="152.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1038.4" y="910.0">one/nio/net/Session..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="1039.6" y="883.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1042.6" y="894.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1040.0" y="883.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1043.0" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (736 samples, 12.41%)</title><rect x="1040.6" y="883.0" width="146.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1043.6" y="894.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (529 samples, 8.92%)</title><rect x="1040.8" y="867.0" width="105.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1043.8" y="878.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (372 samples, 6.27%)</title><rect x="1042.0" y="851.0" width="74.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1045.0" y="862.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (372 samples, 6.27%)</title><rect x="1042.0" y="835.0" width="74.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1045.0" y="846.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (360 samples, 6.07%)</title><rect x="1042.0" y="819.0" width="71.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1045.0" y="830.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (21 samples, 0.35%)</title><rect x="1042.2" y="803.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1045.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (18 samples, 0.30%)</title><rect x="1042.8" y="787.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1045.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.12%)</title><rect x="1044.4" y="771.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1047.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.12%)</title><rect x="1044.4" y="755.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1047.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.08%)</title><rect x="1044.8" y="739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.8" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1045.8" y="771.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1048.8" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.entity (338 samples, 5.70%)</title><rect x="1046.4" y="803.0" width="67.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1049.4" y="814.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (7 samples, 0.12%)</title><rect x="1047.3" y="787.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1050.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (6 samples, 0.10%)</title><rect x="1047.3" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1050.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (6 samples, 0.10%)</title><rect x="1047.3" y="755.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1050.3" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.10%)</title><rect x="1047.3" y="739.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1050.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="1047.5" y="723.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1050.5" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1047.5" y="707.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.5" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1047.5" y="691.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1050.5" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="1047.5" y="675.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.5" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="1047.5" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.5" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1047.7" y="643.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.7" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.19%)</title><rect x="1048.7" y="787.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1051.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.19%)</title><rect x="1048.7" y="771.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1051.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1048.9" y="755.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1048.9" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1048.9" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1049.3" y="755.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1052.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1049.3" y="739.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.3" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1049.3" y="723.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1052.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.12%)</title><rect x="1049.5" y="707.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1052.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (5 samples, 0.08%)</title><rect x="1049.9" y="691.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1052.9" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="1050.3" y="675.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1053.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncGet (262 samples, 4.42%)</title><rect x="1051.3" y="787.0" width="52.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.3" y="798.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (262 samples, 4.42%)</title><rect x="1051.3" y="771.0" width="52.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.3" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (262 samples, 4.42%)</title><rect x="1051.3" y="755.0" width="52.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1054.3" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.12%)</title><rect x="1053.7" y="739.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1056.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.12%)</title><rect x="1053.7" y="723.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1056.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.12%)</title><rect x="1053.7" y="707.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1056.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.12%)</title><rect x="1053.7" y="691.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1056.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.08%)</title><rect x="1055.1" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1058.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.08%)</title><rect x="1055.1" y="723.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (5 samples, 0.08%)</title><rect x="1055.1" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (5 samples, 0.08%)</title><rect x="1055.1" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1058.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (5 samples, 0.08%)</title><rect x="1055.1" y="675.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1058.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.07%)</title><rect x="1055.1" y="659.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1058.1" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="1055.1" y="643.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1058.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1055.5" y="643.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1058.5" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="1055.5" y="627.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1058.5" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="1055.5" y="611.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1058.5" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="1055.5" y="595.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1058.5" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="1055.5" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1058.5" y="590.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="1055.5" y="563.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1058.5" y="574.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="1055.5" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1058.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (238 samples, 4.01%)</title><rect x="1056.1" y="739.0" width="47.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1059.1" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (238 samples, 4.01%)</title><rect x="1056.1" y="723.0" width="47.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.1" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (238 samples, 4.01%)</title><rect x="1056.1" y="707.0" width="47.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1059.1" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (238 samples, 4.01%)</title><rect x="1056.1" y="691.0" width="47.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1059.1" y="702.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (237 samples, 4.00%)</title><rect x="1056.3" y="675.0" width="47.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1059.3" y="686.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (16 samples, 0.27%)</title><rect x="1056.5" y="659.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1059.5" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="1057.9" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.9" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="1058.3" y="643.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.3" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.08%)</title><rect x="1058.7" y="643.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1061.7" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (215 samples, 3.63%)</title><rect x="1059.7" y="659.0" width="42.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1062.7" y="670.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (213 samples, 3.59%)</title><rect x="1060.1" y="643.0" width="42.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1063.1" y="654.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (213 samples, 3.59%)</title><rect x="1060.1" y="627.0" width="42.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1063.1" y="638.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (210 samples, 3.54%)</title><rect x="1060.7" y="611.0" width="41.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1063.7" y="622.0">__x..</text>
</g>
<g>
<title>do_futex (209 samples, 3.52%)</title><rect x="1060.7" y="595.0" width="41.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1063.7" y="606.0">do_..</text>
</g>
<g>
<title>futex_wake (209 samples, 3.52%)</title><rect x="1060.7" y="579.0" width="41.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1063.7" y="590.0">fut..</text>
</g>
<g>
<title>wake_up_q (203 samples, 3.42%)</title><rect x="1061.9" y="563.0" width="40.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1064.9" y="574.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (203 samples, 3.42%)</title><rect x="1061.9" y="547.0" width="40.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1064.9" y="558.0">try..</text>
</g>
<g>
<title>__lock_text_start (202 samples, 3.41%)</title><rect x="1062.1" y="531.0" width="40.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1065.1" y="542.0">__l..</text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.07%)</title><rect x="1102.5" y="659.0" width="0.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1105.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncPut (8 samples, 0.13%)</title><rect x="1103.5" y="787.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1106.5" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.13%)</title><rect x="1103.5" y="771.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.5" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 0.13%)</title><rect x="1103.5" y="755.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$80/729377274.get$Lambda (8 samples, 0.13%)</title><rect x="1103.5" y="739.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1106.5" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$80/729377274.&lt;init&gt; (8 samples, 0.13%)</title><rect x="1103.5" y="723.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1106.5" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (11 samples, 0.19%)</title><rect x="1105.0" y="787.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1108.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1105.2" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1108.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="1105.2" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.03%)</title><rect x="1105.2" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1108.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="1105.2" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1108.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (8 samples, 0.13%)</title><rect x="1105.6" y="771.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1108.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (8 samples, 0.13%)</title><rect x="1105.6" y="755.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1108.6" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (8 samples, 0.13%)</title><rect x="1105.6" y="739.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1108.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (32 samples, 0.54%)</title><rect x="1107.2" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1110.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (32 samples, 0.54%)</title><rect x="1107.2" y="771.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1110.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (32 samples, 0.54%)</title><rect x="1107.2" y="755.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1110.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="1108.6" y="739.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1111.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="1108.6" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1111.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.05%)</title><rect x="1108.6" y="707.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.05%)</title><rect x="1108.6" y="691.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1111.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="1108.6" y="675.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1111.6" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="1108.6" y="659.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1111.6" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="1108.6" y="643.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1111.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 0.37%)</title><rect x="1109.2" y="739.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.37%)</title><rect x="1109.2" y="723.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.37%)</title><rect x="1109.2" y="707.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 0.37%)</title><rect x="1109.2" y="691.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1112.2" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (22 samples, 0.37%)</title><rect x="1109.2" y="675.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.2" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (21 samples, 0.35%)</title><rect x="1109.4" y="659.0" width="4.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1112.4" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.35%)</title><rect x="1109.4" y="643.0" width="4.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1112.4" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (21 samples, 0.35%)</title><rect x="1109.4" y="627.0" width="4.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1112.4" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (21 samples, 0.35%)</title><rect x="1109.4" y="611.0" width="4.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1112.4" y="622.0"></text>
</g>
<g>
<title>do_futex (21 samples, 0.35%)</title><rect x="1109.4" y="595.0" width="4.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1112.4" y="606.0"></text>
</g>
<g>
<title>futex_wake (21 samples, 0.35%)</title><rect x="1109.4" y="579.0" width="4.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1112.4" y="590.0"></text>
</g>
<g>
<title>wake_up_q (21 samples, 0.35%)</title><rect x="1109.4" y="563.0" width="4.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1112.4" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (21 samples, 0.35%)</title><rect x="1109.4" y="547.0" width="4.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1112.4" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (21 samples, 0.35%)</title><rect x="1109.4" y="531.0" width="4.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1112.4" y="542.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (7 samples, 0.12%)</title><rect x="1113.6" y="819.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.12%)</title><rect x="1113.6" y="803.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.03%)</title><rect x="1113.8" y="787.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.07%)</title><rect x="1114.2" y="787.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1117.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.07%)</title><rect x="1114.2" y="771.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1117.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.07%)</title><rect x="1114.2" y="755.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1117.2" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.08%)</title><rect x="1115.0" y="819.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1118.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.08%)</title><rect x="1115.0" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1118.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.08%)</title><rect x="1115.0" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1118.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (71 samples, 1.20%)</title><rect x="1116.0" y="851.0" width="14.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1119.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (31 samples, 0.52%)</title><rect x="1117.0" y="835.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.10%)</title><rect x="1119.0" y="819.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.0" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (6 samples, 0.10%)</title><rect x="1119.0" y="803.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.08%)</title><rect x="1119.0" y="787.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.08%)</title><rect x="1119.0" y="771.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.0" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.05%)</title><rect x="1119.0" y="755.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.0" y="766.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (2 samples, 0.03%)</title><rect x="1119.0" y="739.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1119.6" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.25%)</title><rect x="1120.2" y="819.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1123.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (15 samples, 0.25%)</title><rect x="1120.2" y="803.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1123.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.12%)</title><rect x="1121.8" y="787.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1124.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.canEncode (3 samples, 0.05%)</title><rect x="1122.6" y="771.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1125.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.37%)</title><rect x="1123.2" y="835.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1126.2" y="846.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (2 samples, 0.03%)</title><rect x="1123.2" y="819.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1126.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.entity (2 samples, 0.03%)</title><rect x="1123.2" y="803.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1126.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1123.2" y="787.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (20 samples, 0.34%)</title><rect x="1123.5" y="819.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1126.5" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (13 samples, 0.22%)</title><rect x="1127.5" y="835.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1130.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (9 samples, 0.15%)</title><rect x="1130.1" y="851.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1133.1" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.13%)</title><rect x="1130.3" y="835.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1133.3" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (8 samples, 0.13%)</title><rect x="1130.3" y="819.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1133.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.07%)</title><rect x="1130.5" y="803.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1133.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="1131.3" y="803.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1134.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (41 samples, 0.69%)</title><rect x="1131.9" y="851.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1134.9" y="862.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (13 samples, 0.22%)</title><rect x="1133.3" y="835.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1136.3" y="846.0"></text>
</g>
<g>
<title>itable stub (19 samples, 0.32%)</title><rect x="1135.9" y="835.0" width="3.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1138.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (13 samples, 0.22%)</title><rect x="1140.1" y="851.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1143.1" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="1142.3" y="835.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1145.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1142.3" y="819.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1145.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (17 samples, 0.29%)</title><rect x="1142.6" y="851.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1145.6" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.27%)</title><rect x="1142.8" y="835.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1145.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.12%)</title><rect x="1144.0" y="819.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.0" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.12%)</title><rect x="1144.0" y="803.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.0" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.12%)</title><rect x="1144.0" y="787.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.10%)</title><rect x="1144.0" y="771.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.0" y="782.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.07%)</title><rect x="1144.2" y="755.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="1144.2" y="739.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.2" y="750.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.03%)</title><rect x="1144.2" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1145.4" y="819.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1148.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.05%)</title><rect x="1145.4" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1148.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.05%)</title><rect x="1145.4" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1148.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="1145.4" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.4" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1145.6" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1145.6" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (205 samples, 3.46%)</title><rect x="1146.2" y="867.0" width="40.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1149.2" y="878.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (205 samples, 3.46%)</title><rect x="1146.2" y="851.0" width="40.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1149.2" y="862.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (51 samples, 0.86%)</title><rect x="1147.2" y="835.0" width="10.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1150.2" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (9 samples, 0.15%)</title><rect x="1147.6" y="819.0" width="1.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1150.6" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="1149.4" y="819.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.4" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="1150.2" y="819.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.2" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (29 samples, 0.49%)</title><rect x="1150.8" y="819.0" width="5.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (7 samples, 0.12%)</title><rect x="1152.2" y="803.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (15 samples, 0.25%)</title><rect x="1153.6" y="803.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1156.6" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.07%)</title><rect x="1156.6" y="819.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.6" y="830.0"></text>
</g>
<g>
<title>__recv (148 samples, 2.50%)</title><rect x="1157.4" y="835.0" width="29.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1160.4" y="846.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (140 samples, 2.36%)</title><rect x="1159.0" y="819.0" width="27.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1162.0" y="830.0">e..</text>
</g>
<g>
<title>__x64_sys_recvfrom (2 samples, 0.03%)</title><rect x="1159.0" y="803.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1162.0" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (138 samples, 2.33%)</title><rect x="1159.4" y="803.0" width="27.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1162.4" y="814.0">d..</text>
</g>
<g>
<title>__sys_recvfrom (2 samples, 0.03%)</title><rect x="1159.8" y="787.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1162.8" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (134 samples, 2.26%)</title><rect x="1160.2" y="787.0" width="26.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1163.2" y="798.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (132 samples, 2.23%)</title><rect x="1160.2" y="771.0" width="26.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1163.2" y="782.0">_..</text>
</g>
<g>
<title>sock_recvmsg (114 samples, 1.92%)</title><rect x="1161.0" y="755.0" width="22.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1164.0" y="766.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (91 samples, 1.53%)</title><rect x="1161.0" y="739.0" width="18.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1164.0" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (90 samples, 1.52%)</title><rect x="1161.2" y="723.0" width="17.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1164.2" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (15 samples, 0.25%)</title><rect x="1164.9" y="707.0" width="3.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.9" y="718.0"></text>
</g>
<g>
<title>skb_release_all (12 samples, 0.20%)</title><rect x="1165.3" y="691.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1168.3" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (8 samples, 0.13%)</title><rect x="1165.7" y="675.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1168.7" y="686.0"></text>
</g>
<g>
<title>dst_release (6 samples, 0.10%)</title><rect x="1166.1" y="659.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1169.1" y="670.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="1167.3" y="675.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1170.3" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.10%)</title><rect x="1168.3" y="707.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1171.3" y="718.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (3 samples, 0.05%)</title><rect x="1168.3" y="691.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1171.3" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="1168.9" y="691.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1171.9" y="702.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (3 samples, 0.05%)</title><rect x="1168.9" y="675.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.9" y="686.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.07%)</title><rect x="1169.5" y="707.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.05%)</title><rect x="1169.7" y="691.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1172.7" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (29 samples, 0.49%)</title><rect x="1170.3" y="707.0" width="5.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1173.3" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (29 samples, 0.49%)</title><rect x="1170.3" y="691.0" width="5.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1173.3" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (19 samples, 0.32%)</title><rect x="1172.3" y="675.0" width="3.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1175.3" y="686.0"></text>
</g>
<g>
<title>__check_object_size (13 samples, 0.22%)</title><rect x="1172.3" y="659.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1175.3" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.05%)</title><rect x="1174.3" y="643.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1177.3" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.08%)</title><rect x="1175.1" y="659.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1178.1" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.07%)</title><rect x="1175.3" y="643.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.12%)</title><rect x="1176.1" y="707.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1179.1" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (8 samples, 0.13%)</title><rect x="1177.5" y="707.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1180.5" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.08%)</title><rect x="1178.1" y="691.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="1178.1" y="675.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="1178.7" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1181.7" y="686.0"></text>
</g>
<g>
<title>security_socket_recvmsg (23 samples, 0.39%)</title><rect x="1179.1" y="739.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1182.1" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (20 samples, 0.34%)</title><rect x="1179.7" y="723.0" width="3.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (19 samples, 0.32%)</title><rect x="1179.9" y="707.0" width="3.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (9 samples, 0.15%)</title><rect x="1181.8" y="691.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>aa_profile_af_perm (6 samples, 0.10%)</title><rect x="1182.4" y="675.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1185.4" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (14 samples, 0.24%)</title><rect x="1183.6" y="755.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>__fdget (7 samples, 0.12%)</title><rect x="1183.8" y="739.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1186.8" y="750.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.12%)</title><rect x="1183.8" y="723.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1186.8" y="734.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.12%)</title><rect x="1183.8" y="707.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1186.8" y="718.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.10%)</title><rect x="1185.2" y="739.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.10%)</title><rect x="1187.0" y="883.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="894.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1187.8" y="867.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1190.8" y="878.0"></text>
</g>
<g>
<title>start_thread (9 samples, 0.15%)</title><rect x="1188.2" y="915.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.2" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (9 samples, 0.15%)</title><rect x="1188.2" y="899.0" width="1.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1191.2" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (9 samples, 0.15%)</title><rect x="1188.2" y="883.0" width="1.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.2" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 0.12%)</title><rect x="1188.2" y="867.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.08%)</title><rect x="1188.2" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.2" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.03%)</title><rect x="1188.2" y="835.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.8" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1188.8" y="819.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1188.8" y="803.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1188.8" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1189.6" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.6" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1189.6" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.6" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="1189.6" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.6" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1189.6" y="819.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.6" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1189.6" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1189.6" y="787.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.6" y="798.0"></text>
</g>
</g>
</svg>
