<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (6,748 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (8 samples, 0.12%)</title><rect x="10.0" y="915.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (8 samples, 0.12%)</title><rect x="10.0" y="899.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (8 samples, 0.12%)</title><rect x="10.0" y="883.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title><rect x="10.0" y="867.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (3 samples, 0.04%)</title><rect x="10.9" y="867.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>[no_Java_frame] (2 samples, 0.03%)</title><rect x="11.4" y="915.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.4" y="926.0"></text>
</g>
<g>
<title>[not_walkable_Java] (23 samples, 0.34%)</title><rect x="11.7" y="915.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (20 samples, 0.30%)</title><rect x="11.9" y="899.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.9" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (19 samples, 0.28%)</title><rect x="12.1" y="883.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.1" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (6 samples, 0.09%)</title><rect x="12.4" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="15.4" y="878.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title><rect x="12.6" y="851.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.6" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="13.1" y="851.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.1" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (10 samples, 0.15%)</title><rect x="13.7" y="867.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.7" y="878.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (2 samples, 0.03%)</title><rect x="13.8" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="16.8" y="862.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.03%)</title><rect x="14.2" y="851.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.2" y="862.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.03%)</title><rect x="14.7" y="851.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="14.7" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title><rect x="15.1" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.15%)</title><rect x="15.8" y="915.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.8" y="926.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (9 samples, 0.13%)</title><rect x="15.9" y="899.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="18.9" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.12%)</title><rect x="16.1" y="883.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="19.1" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 0.12%)</title><rect x="16.1" y="867.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="19.1" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (8 samples, 0.12%)</title><rect x="16.1" y="851.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="19.1" y="862.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.12%)</title><rect x="16.1" y="835.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="19.1" y="846.0"></text>
</g>
<g>
<title>futex_wait (8 samples, 0.12%)</title><rect x="16.1" y="819.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="19.1" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (6 samples, 0.09%)</title><rect x="16.1" y="803.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="19.1" y="814.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.07%)</title><rect x="16.3" y="787.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="19.3" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.07%)</title><rect x="16.3" y="771.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="19.3" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.06%)</title><rect x="16.5" y="755.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="19.5" y="766.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.03%)</title><rect x="17.2" y="803.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="20.2" y="814.0"></text>
</g>
<g>
<title>[unknown_Java] (16 samples, 0.24%)</title><rect x="17.5" y="915.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.5" y="926.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.03%)</title><rect x="17.5" y="899.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="20.5" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (11 samples, 0.16%)</title><rect x="18.4" y="899.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.16%)</title><rect x="18.4" y="883.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.16%)</title><rect x="18.4" y="867.0" width="1.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="21.4" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.15%)</title><rect x="18.4" y="851.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="21.4" y="862.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.15%)</title><rect x="18.4" y="835.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="21.4" y="846.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.15%)</title><rect x="18.4" y="819.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="21.4" y="830.0"></text>
</g>
<g>
<title>wake_up_q (9 samples, 0.13%)</title><rect x="18.6" y="803.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="21.6" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (9 samples, 0.13%)</title><rect x="18.6" y="787.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="21.6" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.13%)</title><rect x="18.6" y="771.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="21.6" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.03%)</title><rect x="20.3" y="915.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.3" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="20.3" y="899.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="23.3" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="20.3" y="883.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="23.3" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="20.3" y="867.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="23.3" y="878.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="20.3" y="851.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="20.3" y="835.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="23.3" y="846.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.03%)</title><rect x="20.3" y="819.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="23.3" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.03%)</title><rect x="20.3" y="803.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="23.3" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="20.3" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="23.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,184 samples, 76.82%)</title><rect x="20.7" y="915.0" width="906.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.7" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,184 samples, 76.82%)</title><rect x="20.7" y="899.0" width="906.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.7" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,184 samples, 76.82%)</title><rect x="20.7" y="883.0" width="906.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.7" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.06%)</title><rect x="20.8" y="867.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.06%)</title><rect x="20.8" y="851.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (500 samples, 7.41%)</title><rect x="21.5" y="867.0" width="87.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.5" y="878.0">java/util/..</text>
</g>
<g>
<title>itable stub (2 samples, 0.03%)</title><rect x="25.7" y="851.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="28.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (463 samples, 6.86%)</title><rect x="26.1" y="851.0" width="81.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.1" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (258 samples, 3.82%)</title><rect x="26.8" y="835.0" width="45.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.8" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title><rect x="27.1" y="819.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)</title><rect x="27.1" y="803.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title><rect x="27.1" y="787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="27.3" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.3" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="27.3" y="755.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="30.3" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="27.3" y="739.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="30.3" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="27.3" y="723.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="30.3" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="27.3" y="707.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="30.3" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="27.3" y="691.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="30.3" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="27.3" y="675.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="30.3" y="686.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="27.3" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="30.3" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.03%)</title><rect x="27.3" y="643.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="30.3" y="654.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="27.3" y="627.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="30.3" y="638.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="27.3" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="30.3" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="27.3" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="30.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (93 samples, 1.38%)</title><rect x="27.7" y="819.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 1.38%)</title><rect x="27.7" y="803.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 1.30%)</title><rect x="28.4" y="787.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 1.30%)</title><rect x="28.4" y="771.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="28.4" y="755.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.4" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (86 samples, 1.27%)</title><rect x="28.7" y="755.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (85 samples, 1.26%)</title><rect x="28.9" y="739.0" width="14.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="31.9" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (85 samples, 1.26%)</title><rect x="28.9" y="723.0" width="14.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="31.9" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (85 samples, 1.26%)</title><rect x="28.9" y="707.0" width="14.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="31.9" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (85 samples, 1.26%)</title><rect x="28.9" y="691.0" width="14.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="31.9" y="702.0"></text>
</g>
<g>
<title>do_futex (84 samples, 1.24%)</title><rect x="29.1" y="675.0" width="14.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="32.1" y="686.0"></text>
</g>
<g>
<title>futex_wake (84 samples, 1.24%)</title><rect x="29.1" y="659.0" width="14.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="32.1" y="670.0"></text>
</g>
<g>
<title>wake_up_q (80 samples, 1.19%)</title><rect x="29.8" y="643.0" width="13.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="32.8" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (80 samples, 1.19%)</title><rect x="29.8" y="627.0" width="13.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="32.8" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (80 samples, 1.19%)</title><rect x="29.8" y="611.0" width="13.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="32.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (159 samples, 2.36%)</title><rect x="43.9" y="819.0" width="27.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.9" y="830.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (159 samples, 2.36%)</title><rect x="43.9" y="803.0" width="27.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.9" y="814.0">j..</text>
</g>
<g>
<title>Unsafe_Park (34 samples, 0.50%)</title><rect x="44.8" y="787.0" width="5.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="47.8" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (9 samples, 0.13%)</title><rect x="46.0" y="771.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.0" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.04%)</title><rect x="46.7" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="49.7" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="47.2" y="755.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="50.2" y="766.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (4 samples, 0.06%)</title><rect x="47.6" y="771.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="50.6" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (9 samples, 0.13%)</title><rect x="48.3" y="771.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="51.3" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.10%)</title><rect x="48.6" y="755.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="51.6" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.10%)</title><rect x="48.6" y="739.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="51.6" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 0.09%)</title><rect x="48.8" y="723.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.8" y="734.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.09%)</title><rect x="48.8" y="707.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="51.8" y="718.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 0.09%)</title><rect x="48.8" y="691.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="51.8" y="702.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.06%)</title><rect x="49.2" y="675.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.2" y="686.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (3 samples, 0.04%)</title><rect x="49.3" y="659.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="52.3" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="50.4" y="771.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="53.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (118 samples, 1.75%)</title><rect x="50.7" y="787.0" width="20.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="53.7" y="798.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.04%)</title><rect x="50.7" y="771.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="53.7" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (111 samples, 1.64%)</title><rect x="51.3" y="771.0" width="19.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="54.3" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (107 samples, 1.59%)</title><rect x="52.0" y="755.0" width="18.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="55.0" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (107 samples, 1.59%)</title><rect x="52.0" y="739.0" width="18.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="55.0" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (106 samples, 1.57%)</title><rect x="52.1" y="723.0" width="18.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="55.1" y="734.0"></text>
</g>
<g>
<title>do_futex (105 samples, 1.56%)</title><rect x="52.1" y="707.0" width="18.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="55.1" y="718.0"></text>
</g>
<g>
<title>futex_wait (104 samples, 1.54%)</title><rect x="52.1" y="691.0" width="18.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="55.1" y="702.0"></text>
</g>
<g>
<title>futex_wait_queue_me (88 samples, 1.30%)</title><rect x="52.8" y="675.0" width="15.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="55.8" y="686.0"></text>
</g>
<g>
<title>schedule (87 samples, 1.29%)</title><rect x="53.0" y="659.0" width="15.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="56.0" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (87 samples, 1.29%)</title><rect x="53.0" y="643.0" width="15.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="56.0" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (83 samples, 1.23%)</title><rect x="53.7" y="627.0" width="14.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="56.7" y="638.0"></text>
</g>
<g>
<title>futex_wait_setup (9 samples, 0.13%)</title><rect x="68.2" y="675.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="71.2" y="686.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.03%)</title><rect x="69.8" y="675.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="72.8" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="70.7" y="771.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="73.7" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="71.4" y="787.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="74.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.19%)</title><rect x="71.9" y="835.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="74.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 0.19%)</title><rect x="71.9" y="819.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.19%)</title><rect x="71.9" y="803.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="73.8" y="787.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="73.8" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.8" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="73.8" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.8" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="73.8" y="739.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="76.8" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="73.8" y="723.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="76.8" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="73.8" y="707.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="76.8" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="73.8" y="691.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="76.8" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="73.8" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.8" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="73.8" y="659.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="76.8" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="73.8" y="643.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="76.8" y="654.0"></text>
</g>
<g>
<title>futex_wait_queue_me (2 samples, 0.03%)</title><rect x="73.8" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="76.8" y="638.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="73.8" y="611.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="76.8" y="622.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="73.8" y="595.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="76.8" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="73.8" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="76.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (188 samples, 2.79%)</title><rect x="74.2" y="835.0" width="32.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.2" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (188 samples, 2.79%)</title><rect x="74.2" y="819.0" width="32.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.2" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (188 samples, 2.79%)</title><rect x="74.2" y="803.0" width="32.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="77.2" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (188 samples, 2.79%)</title><rect x="74.2" y="787.0" width="32.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="77.2" y="798.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (185 samples, 2.74%)</title><rect x="74.5" y="771.0" width="32.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="77.5" y="782.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.07%)</title><rect x="74.5" y="755.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="77.5" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="74.5" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="77.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (179 samples, 2.65%)</title><rect x="75.4" y="755.0" width="31.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="78.4" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (176 samples, 2.61%)</title><rect x="75.9" y="739.0" width="30.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="78.9" y="750.0">en..</text>
</g>
<g>
<title>do_syscall_64 (176 samples, 2.61%)</title><rect x="75.9" y="723.0" width="30.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="78.9" y="734.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (172 samples, 2.55%)</title><rect x="76.4" y="707.0" width="30.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="79.4" y="718.0">__..</text>
</g>
<g>
<title>do_futex (172 samples, 2.55%)</title><rect x="76.4" y="691.0" width="30.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="79.4" y="702.0">do..</text>
</g>
<g>
<title>futex_wake (172 samples, 2.55%)</title><rect x="76.4" y="675.0" width="30.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="79.4" y="686.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (6 samples, 0.09%)</title><rect x="77.5" y="659.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="80.5" y="670.0"></text>
</g>
<g>
<title>wake_up_q (160 samples, 2.37%)</title><rect x="78.5" y="659.0" width="28.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="81.5" y="670.0">w..</text>
</g>
<g>
<title>try_to_wake_up (159 samples, 2.36%)</title><rect x="78.7" y="643.0" width="27.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="81.7" y="654.0">t..</text>
</g>
<g>
<title>__lock_text_start (159 samples, 2.36%)</title><rect x="78.7" y="627.0" width="27.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="81.7" y="638.0">_..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (3 samples, 0.04%)</title><rect x="107.1" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="110.1" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$76/128399682.run (2 samples, 0.03%)</title><rect x="107.6" y="851.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="110.6" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$81/1457816816.run (4 samples, 0.06%)</title><rect x="107.9" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="110.9" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="108.6" y="851.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="111.6" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="108.6" y="835.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="111.6" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="108.6" y="819.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="111.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$76/128399682.run (2,471 samples, 36.62%)</title><rect x="109.0" y="867.0" width="432.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="112.0" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$1 (2,470 samples, 36.60%)</title><rect x="109.1" y="851.0" width="432.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.1" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambd..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (990 samples, 14.67%)</title><rect x="109.5" y="835.0" width="173.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.5" y="846.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (17 samples, 0.25%)</title><rect x="110.9" y="819.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.25%)</title><rect x="110.9" y="803.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.25%)</title><rect x="110.9" y="787.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.9" y="798.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="112.3" y="771.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="115.3" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.07%)</title><rect x="113.0" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="116.0" y="782.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.07%)</title><rect x="113.0" y="755.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="116.0" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.06%)</title><rect x="113.2" y="739.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="116.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (950 samples, 14.08%)</title><rect x="113.9" y="819.0" width="166.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="116.9" y="830.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (20 samples, 0.30%)</title><rect x="113.9" y="803.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (10 samples, 0.15%)</title><rect x="114.7" y="787.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.15%)</title><rect x="114.7" y="771.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="117.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.15%)</title><rect x="114.7" y="755.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (10 samples, 0.15%)</title><rect x="114.7" y="739.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (10 samples, 0.15%)</title><rect x="114.7" y="723.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.7" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="114.7" y="707.0" width="0.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="117.7" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="115.1" y="707.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="118.1" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="115.8" y="707.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="118.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="115.8" y="691.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="118.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="115.8" y="675.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="118.8" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.07%)</title><rect x="116.5" y="787.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="119.5" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.07%)</title><rect x="116.5" y="771.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="119.5" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="116.5" y="755.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="119.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (929 samples, 13.77%)</title><rect x="117.4" y="803.0" width="162.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.4" y="814.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (929 samples, 13.77%)</title><rect x="117.4" y="787.0" width="162.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.4" y="798.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (925 samples, 13.71%)</title><rect x="118.1" y="771.0" width="161.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="121.1" y="782.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title><rect x="118.2" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.2" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (922 samples, 13.66%)</title><rect x="118.6" y="755.0" width="161.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="121.6" y="766.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.12%)</title><rect x="118.8" y="739.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="121.8" y="750.0"></text>
</g>
<g>
<title>send (913 samples, 13.53%)</title><rect x="120.2" y="739.0" width="159.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="123.2" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (907 samples, 13.44%)</title><rect x="121.0" y="723.0" width="158.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="124.0" y="734.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>do_syscall_64 (906 samples, 13.43%)</title><rect x="121.2" y="707.0" width="158.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="124.2" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (893 samples, 13.23%)</title><rect x="122.6" y="691.0" width="156.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="125.6" y="702.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (890 samples, 13.19%)</title><rect x="122.6" y="675.0" width="155.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="125.6" y="686.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (866 samples, 12.83%)</title><rect x="123.8" y="659.0" width="151.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="126.8" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.15%)</title><rect x="124.4" y="643.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="127.4" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (842 samples, 12.48%)</title><rect x="126.1" y="643.0" width="147.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="129.1" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (842 samples, 12.48%)</title><rect x="126.1" y="627.0" width="147.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="129.1" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="126.5" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="129.5" y="622.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.04%)</title><rect x="127.2" y="611.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="130.2" y="622.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (6 samples, 0.09%)</title><rect x="127.7" y="611.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="130.7" y="622.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="128.7" y="611.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="131.7" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (824 samples, 12.21%)</title><rect x="129.3" y="611.0" width="144.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="132.3" y="622.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.07%)</title><rect x="130.5" y="595.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="133.5" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_string (5 samples, 0.07%)</title><rect x="130.5" y="579.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="133.5" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.06%)</title><rect x="131.5" y="595.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="134.5" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.06%)</title><rect x="131.5" y="579.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="134.5" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (51 samples, 0.76%)</title><rect x="132.2" y="595.0" width="8.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="135.2" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (48 samples, 0.71%)</title><rect x="132.8" y="579.0" width="8.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="135.8" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (21 samples, 0.31%)</title><rect x="132.9" y="563.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="135.9" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (11 samples, 0.16%)</title><rect x="132.9" y="547.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="135.9" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="134.0" y="531.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="137.0" y="542.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.04%)</title><rect x="134.3" y="531.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="137.3" y="542.0"></text>
</g>
<g>
<title>memset (8 samples, 0.12%)</title><rect x="135.0" y="547.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="138.0" y="558.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.03%)</title><rect x="136.6" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="139.6" y="574.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (10 samples, 0.15%)</title><rect x="137.1" y="563.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="140.1" y="574.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.12%)</title><rect x="138.9" y="563.0" width="1.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="141.9" y="574.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.12%)</title><rect x="138.9" y="547.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="141.9" y="558.0"></text>
</g>
<g>
<title>memset (4 samples, 0.06%)</title><rect x="140.3" y="563.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="143.3" y="574.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.06%)</title><rect x="141.1" y="595.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="144.1" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (2 samples, 0.03%)</title><rect x="141.8" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="144.8" y="606.0"></text>
</g>
<g>
<title>tcp_push (740 samples, 10.97%)</title><rect x="142.2" y="595.0" width="129.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="145.2" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (738 samples, 10.94%)</title><rect x="142.4" y="579.0" width="129.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="145.4" y="590.0">__tcp_push_pendi..</text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="142.4" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="145.4" y="574.0"></text>
</g>
<g>
<title>tcp_write_xmit (735 samples, 10.89%)</title><rect x="142.9" y="563.0" width="128.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="145.9" y="574.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (698 samples, 10.34%)</title><rect x="144.3" y="547.0" width="122.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="147.3" y="558.0">__tcp_transmit_..</text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="145.9" y="531.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="148.9" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (684 samples, 10.14%)</title><rect x="146.2" y="531.0" width="119.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="149.2" y="542.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (682 samples, 10.11%)</title><rect x="146.2" y="515.0" width="119.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="149.2" y="526.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (4 samples, 0.06%)</title><rect x="146.9" y="499.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="149.9" y="510.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="147.1" y="483.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="150.1" y="494.0"></text>
</g>
<g>
<title>ip_local_out (672 samples, 9.96%)</title><rect x="147.6" y="499.0" width="117.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="150.6" y="510.0">ip_local_out</text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="148.0" y="483.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="151.0" y="494.0"></text>
</g>
<g>
<title>ip_output (667 samples, 9.88%)</title><rect x="148.3" y="483.0" width="116.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="151.3" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (664 samples, 9.84%)</title><rect x="148.8" y="467.0" width="116.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="151.8" y="478.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.04%)</title><rect x="149.0" y="451.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="152.0" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (660 samples, 9.78%)</title><rect x="149.5" y="451.0" width="115.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="152.5" y="462.0">__ip_finish_ou..</text>
</g>
<g>
<title>ip_finish_output2 (658 samples, 9.75%)</title><rect x="149.9" y="435.0" width="115.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="152.9" y="446.0">ip_finish_outp..</text>
</g>
<g>
<title>__local_bh_enable_ip (617 samples, 9.14%)</title><rect x="151.5" y="419.0" width="107.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="154.5" y="430.0">__local_bh_en..</text>
</g>
<g>
<title>do_softirq.part.0 (617 samples, 9.14%)</title><rect x="151.5" y="403.0" width="107.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="154.5" y="414.0">do_softirq.pa..</text>
</g>
<g>
<title>do_softirq_own_stack (613 samples, 9.08%)</title><rect x="152.2" y="387.0" width="107.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="155.2" y="398.0">do_softirq_ow..</text>
</g>
<g>
<title>__softirqentry_text_start (612 samples, 9.07%)</title><rect x="152.2" y="371.0" width="107.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="155.2" y="382.0">__softirqentr..</text>
</g>
<g>
<title>net_rx_action (607 samples, 9.00%)</title><rect x="153.0" y="355.0" width="106.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="156.0" y="366.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (605 samples, 8.97%)</title><rect x="153.4" y="339.0" width="105.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="156.4" y="350.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (598 samples, 8.86%)</title><rect x="154.6" y="323.0" width="104.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="157.6" y="334.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (598 samples, 8.86%)</title><rect x="154.6" y="307.0" width="104.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.6" y="318.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (7 samples, 0.10%)</title><rect x="154.8" y="291.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="157.8" y="302.0"></text>
</g>
<g>
<title>ip_rcv (590 samples, 8.74%)</title><rect x="156.0" y="291.0" width="103.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="159.0" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.04%)</title><rect x="156.4" y="275.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="159.4" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (584 samples, 8.65%)</title><rect x="156.9" y="275.0" width="102.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="159.9" y="286.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (582 samples, 8.62%)</title><rect x="157.1" y="259.0" width="101.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="160.1" y="270.0">ip_local_del..</text>
</g>
<g>
<title>ip_local_deliver_finish (582 samples, 8.62%)</title><rect x="157.1" y="243.0" width="101.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="160.1" y="254.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (582 samples, 8.62%)</title><rect x="157.1" y="227.0" width="101.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="160.1" y="238.0">ip_protocol_..</text>
</g>
<g>
<title>tcp_v4_rcv (580 samples, 8.60%)</title><rect x="157.4" y="211.0" width="101.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="160.4" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (33 samples, 0.49%)</title><rect x="158.6" y="195.0" width="5.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="161.6" y="206.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.03%)</title><rect x="164.4" y="195.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="167.4" y="206.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="164.9" y="195.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="167.9" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (8 samples, 0.12%)</title><rect x="165.3" y="195.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="168.3" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="165.5" y="179.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="168.5" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.04%)</title><rect x="166.2" y="179.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="169.2" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (527 samples, 7.81%)</title><rect x="166.7" y="195.0" width="92.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="169.7" y="206.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (15 samples, 0.22%)</title><rect x="166.9" y="179.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.9" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (511 samples, 7.57%)</title><rect x="169.5" y="179.0" width="89.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="172.5" y="190.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (10 samples, 0.15%)</title><rect x="172.1" y="163.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="175.1" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (10 samples, 0.15%)</title><rect x="172.1" y="147.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="175.1" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.15%)</title><rect x="172.1" y="131.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="175.1" y="142.0"></text>
</g>
<g>
<title>mod_timer (10 samples, 0.15%)</title><rect x="172.1" y="115.0" width="1.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="175.1" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.15%)</title><rect x="172.1" y="99.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="175.1" y="110.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="173.9" y="163.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="176.9" y="174.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.04%)</title><rect x="174.2" y="163.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="177.2" y="174.0"></text>
</g>
<g>
<title>tcp_ack (67 samples, 0.99%)</title><rect x="174.7" y="163.0" width="11.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="177.7" y="174.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.04%)</title><rect x="178.6" y="147.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="181.6" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (35 samples, 0.52%)</title><rect x="179.3" y="147.0" width="6.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="182.3" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (26 samples, 0.39%)</title><rect x="179.8" y="131.0" width="4.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="182.8" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.07%)</title><rect x="179.8" y="115.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="182.8" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="180.0" y="99.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="183.0" y="110.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="180.1" y="83.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="183.1" y="94.0"></text>
</g>
<g>
<title>skb_release_all (21 samples, 0.31%)</title><rect x="180.7" y="115.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="183.7" y="126.0"></text>
</g>
<g>
<title>skb_release_data (19 samples, 0.28%)</title><rect x="180.8" y="99.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="183.8" y="110.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.06%)</title><rect x="183.5" y="83.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="186.5" y="94.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.04%)</title><rect x="183.6" y="67.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="186.6" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="183.8" y="51.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="186.8" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="184.5" y="131.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="187.5" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.03%)</title><rect x="185.0" y="131.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="188.0" y="142.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="185.9" y="147.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="188.9" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (405 samples, 6.00%)</title><rect x="186.6" y="163.0" width="70.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="189.6" y="174.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (405 samples, 6.00%)</title><rect x="186.6" y="147.0" width="70.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="189.6" y="158.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (403 samples, 5.97%)</title><rect x="187.0" y="131.0" width="70.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="190.0" y="142.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (403 samples, 5.97%)</title><rect x="187.0" y="115.0" width="70.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="190.0" y="126.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (401 samples, 5.94%)</title><rect x="187.3" y="99.0" width="70.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="190.3" y="110.0">__lock_t..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="257.4" y="163.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="260.4" y="174.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.07%)</title><rect x="257.8" y="163.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="260.8" y="174.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="258.0" y="147.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="261.0" y="158.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="258.3" y="147.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="261.3" y="158.0"></text>
</g>
<g>
<title>dev_queue_xmit (32 samples, 0.47%)</title><rect x="259.4" y="419.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="262.4" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (30 samples, 0.44%)</title><rect x="259.4" y="403.0" width="5.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="262.4" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (15 samples, 0.22%)</title><rect x="260.2" y="387.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="263.2" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (12 samples, 0.18%)</title><rect x="260.6" y="371.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="263.6" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.06%)</title><rect x="260.9" y="355.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="263.9" y="366.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.07%)</title><rect x="261.6" y="355.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="264.6" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.06%)</title><rect x="261.8" y="339.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="264.8" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.06%)</title><rect x="261.8" y="323.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="264.8" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.04%)</title><rect x="262.9" y="387.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="265.9" y="398.0"></text>
</g>
<g>
<title>validate_xmit_skb (6 samples, 0.09%)</title><rect x="263.6" y="387.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="266.6" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.03%)</title><rect x="264.6" y="403.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="267.6" y="414.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.04%)</title><rect x="266.4" y="547.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="269.4" y="558.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="267.1" y="547.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="270.1" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.15%)</title><rect x="267.4" y="547.0" width="1.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="270.4" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.09%)</title><rect x="268.1" y="531.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="271.1" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (5 samples, 0.07%)</title><rect x="268.3" y="515.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="271.3" y="526.0"></text>
</g>
<g>
<title>mod_timer (5 samples, 0.07%)</title><rect x="268.3" y="499.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="271.3" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="268.5" y="483.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="271.5" y="494.0"></text>
</g>
<g>
<title>tcp_mtu_probe (3 samples, 0.04%)</title><rect x="269.2" y="547.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="272.2" y="558.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.03%)</title><rect x="269.7" y="547.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="272.7" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.06%)</title><rect x="270.4" y="547.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="273.4" y="558.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="271.6" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="274.6" y="606.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.10%)</title><rect x="272.0" y="595.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="275.0" y="606.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.09%)</title><rect x="272.0" y="579.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="275.0" y="590.0"></text>
</g>
<g>
<title>security_socket_sendmsg (11 samples, 0.16%)</title><rect x="273.3" y="643.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="276.3" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (11 samples, 0.16%)</title><rect x="273.3" y="627.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="276.3" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (11 samples, 0.16%)</title><rect x="273.3" y="611.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="276.3" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (6 samples, 0.09%)</title><rect x="274.2" y="595.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="277.2" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (17 samples, 0.25%)</title><rect x="275.3" y="659.0" width="2.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="278.3" y="670.0"></text>
</g>
<g>
<title>__fdget (16 samples, 0.24%)</title><rect x="275.3" y="643.0" width="2.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="278.3" y="654.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.03%)</title><rect x="275.3" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="278.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (14 samples, 0.21%)</title><rect x="275.6" y="627.0" width="2.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="278.6" y="638.0"></text>
</g>
<g>
<title>__fget (14 samples, 0.21%)</title><rect x="275.6" y="611.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="278.6" y="622.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="278.2" y="675.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="281.2" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="278.8" y="691.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="281.8" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.06%)</title><rect x="278.9" y="675.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="281.9" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.06%)</title><rect x="278.9" y="659.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="281.9" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.06%)</title><rect x="278.9" y="643.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="281.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.10%)</title><rect x="280.0" y="819.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="280.2" y="803.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.09%)</title><rect x="280.2" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.2" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.12%)</title><rect x="281.2" y="819.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="284.2" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (8 samples, 0.12%)</title><rect x="281.2" y="803.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="284.2" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (8 samples, 0.12%)</title><rect x="281.2" y="787.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="284.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (1,478 samples, 21.90%)</title><rect x="282.6" y="835.0" width="258.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.6" y="846.0">ru/mail/polis/service/kovalkov/Sha..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (4 samples, 0.06%)</title><rect x="282.8" y="819.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/377478451.invoke (4 samples, 0.06%)</title><rect x="282.8" y="803.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="285.8" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="282.8" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.8" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1300109446.invoke (2 samples, 0.03%)</title><rect x="283.1" y="787.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.1" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="283.1" y="771.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.03%)</title><rect x="283.1" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="283.1" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.1" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="283.1" y="723.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="286.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.04%)</title><rect x="283.5" y="819.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="283.5" y="803.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.04%)</title><rect x="283.5" y="787.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.5" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,461 samples, 21.65%)</title><rect x="284.0" y="819.0" width="255.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.0" y="830.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,461 samples, 21.65%)</title><rect x="284.0" y="803.0" width="255.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.0" y="814.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (11 samples, 0.16%)</title><rect x="284.9" y="787.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="287.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.16%)</title><rect x="284.9" y="771.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.16%)</title><rect x="284.9" y="755.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.9" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="286.3" y="739.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="289.3" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="286.3" y="723.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="289.3" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="286.3" y="707.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="289.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (205 samples, 3.04%)</title><rect x="286.8" y="787.0" width="35.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.8" y="798.0">one..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (18 samples, 0.27%)</title><rect x="290.0" y="771.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="293.0" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.25%)</title><rect x="290.1" y="755.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="293.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (16 samples, 0.24%)</title><rect x="290.1" y="739.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="293.1" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (14 samples, 0.21%)</title><rect x="290.5" y="723.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="293.5" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.07%)</title><rect x="290.8" y="707.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="293.8" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="292.2" y="707.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="295.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.04%)</title><rect x="292.2" y="691.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="295.2" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (167 samples, 2.47%)</title><rect x="293.1" y="771.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.1" y="782.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 0.18%)</title><rect x="294.2" y="755.0" width="2.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="297.2" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="294.2" y="739.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="297.2" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.12%)</title><rect x="294.9" y="739.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="297.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="295.2" y="723.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="298.2" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="295.7" y="723.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="298.7" y="734.0"></text>
</g>
<g>
<title>__recv (148 samples, 2.19%)</title><rect x="296.3" y="755.0" width="25.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="299.3" y="766.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (143 samples, 2.12%)</title><rect x="297.0" y="739.0" width="25.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="300.0" y="750.0">e..</text>
</g>
<g>
<title>do_syscall_64 (143 samples, 2.12%)</title><rect x="297.0" y="723.0" width="25.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="300.0" y="734.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (135 samples, 2.00%)</title><rect x="297.5" y="707.0" width="23.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="300.5" y="718.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (134 samples, 1.99%)</title><rect x="297.5" y="691.0" width="23.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="300.5" y="702.0">_..</text>
</g>
<g>
<title>fput_many (2 samples, 0.03%)</title><rect x="297.8" y="675.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="300.8" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (125 samples, 1.85%)</title><rect x="298.4" y="675.0" width="21.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="301.4" y="686.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (120 samples, 1.78%)</title><rect x="298.4" y="659.0" width="20.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="301.4" y="670.0"></text>
</g>
<g>
<title>tcp_recvmsg (120 samples, 1.78%)</title><rect x="298.4" y="643.0" width="20.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="301.4" y="654.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.03%)</title><rect x="298.9" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.9" y="638.0"></text>
</g>
<g>
<title>skb_release_all (2 samples, 0.03%)</title><rect x="298.9" y="611.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="301.9" y="622.0"></text>
</g>
<g>
<title>skb_release_head_state (2 samples, 0.03%)</title><rect x="298.9" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="301.9" y="606.0"></text>
</g>
<g>
<title>dst_release (2 samples, 0.03%)</title><rect x="298.9" y="579.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.9" y="590.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="299.6" y="627.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="302.6" y="638.0"></text>
</g>
<g>
<title>sk_wait_data (103 samples, 1.53%)</title><rect x="299.9" y="627.0" width="18.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="302.9" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="299.9" y="611.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="302.9" y="622.0"></text>
</g>
<g>
<title>add_wait_queue (2 samples, 0.03%)</title><rect x="300.3" y="611.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="303.3" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="300.3" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="303.3" y="606.0"></text>
</g>
<g>
<title>wait_woken (96 samples, 1.42%)</title><rect x="301.2" y="611.0" width="16.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="304.2" y="622.0"></text>
</g>
<g>
<title>__mod_timer (2 samples, 0.03%)</title><rect x="301.3" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="304.3" y="606.0"></text>
</g>
<g>
<title>schedule_timeout (92 samples, 1.36%)</title><rect x="301.9" y="595.0" width="16.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="304.9" y="606.0"></text>
</g>
<g>
<title>__mod_timer (11 samples, 0.16%)</title><rect x="301.9" y="579.0" width="1.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="304.9" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.15%)</title><rect x="302.0" y="563.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="305.0" y="574.0"></text>
</g>
<g>
<title>schedule (80 samples, 1.19%)</title><rect x="304.0" y="579.0" width="13.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="307.0" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (80 samples, 1.19%)</title><rect x="304.0" y="563.0" width="13.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="307.0" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (79 samples, 1.17%)</title><rect x="304.1" y="547.0" width="13.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="307.1" y="558.0"></text>
</g>
<g>
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="317.6" y="531.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="320.6" y="542.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="317.6" y="515.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="320.6" y="526.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.03%)</title><rect x="317.6" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="320.6" y="510.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.03%)</title><rect x="317.6" y="483.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="320.6" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.10%)</title><rect x="318.1" y="627.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="321.1" y="638.0"></text>
</g>
<g>
<title>tcp_send_ack (6 samples, 0.09%)</title><rect x="318.3" y="611.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="321.3" y="622.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (6 samples, 0.09%)</title><rect x="318.3" y="595.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="321.3" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (5 samples, 0.07%)</title><rect x="318.5" y="579.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="321.5" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (5 samples, 0.07%)</title><rect x="318.5" y="563.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.5" y="574.0"></text>
</g>
<g>
<title>__ip_queue_xmit (5 samples, 0.07%)</title><rect x="318.5" y="547.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="321.5" y="558.0"></text>
</g>
<g>
<title>ip_local_out (5 samples, 0.07%)</title><rect x="318.5" y="531.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="321.5" y="542.0"></text>
</g>
<g>
<title>ip_output (5 samples, 0.07%)</title><rect x="318.5" y="515.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="321.5" y="526.0"></text>
</g>
<g>
<title>ip_finish_output (5 samples, 0.07%)</title><rect x="318.5" y="499.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="321.5" y="510.0"></text>
</g>
<g>
<title>__ip_finish_output (5 samples, 0.07%)</title><rect x="318.5" y="483.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="321.5" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (5 samples, 0.07%)</title><rect x="318.5" y="467.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="321.5" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (5 samples, 0.07%)</title><rect x="318.5" y="451.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="321.5" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (5 samples, 0.07%)</title><rect x="318.5" y="435.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="321.5" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (5 samples, 0.07%)</title><rect x="318.5" y="419.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="321.5" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (5 samples, 0.07%)</title><rect x="318.5" y="403.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="321.5" y="414.0"></text>
</g>
<g>
<title>net_rx_action (4 samples, 0.06%)</title><rect x="318.6" y="387.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="321.6" y="398.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.06%)</title><rect x="318.6" y="371.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.6" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb (4 samples, 0.06%)</title><rect x="318.6" y="355.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="321.6" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (4 samples, 0.06%)</title><rect x="318.6" y="339.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="321.6" y="350.0"></text>
</g>
<g>
<title>ip_rcv (4 samples, 0.06%)</title><rect x="318.6" y="323.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="321.6" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish (4 samples, 0.06%)</title><rect x="318.6" y="307.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="321.6" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver (4 samples, 0.06%)</title><rect x="318.6" y="291.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="321.6" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (4 samples, 0.06%)</title><rect x="318.6" y="275.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="321.6" y="286.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (4 samples, 0.06%)</title><rect x="318.6" y="259.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="321.6" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (4 samples, 0.06%)</title><rect x="318.6" y="243.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="321.6" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (4 samples, 0.06%)</title><rect x="318.6" y="227.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="321.6" y="238.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.04%)</title><rect x="318.8" y="211.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="321.8" y="222.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.03%)</title><rect x="319.0" y="195.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="322.0" y="206.0"></text>
</g>
<g>
<title>security_socket_recvmsg (5 samples, 0.07%)</title><rect x="319.3" y="659.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="322.3" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.06%)</title><rect x="319.5" y="643.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.5" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.06%)</title><rect x="319.5" y="627.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="322.5" y="638.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="319.9" y="611.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="322.9" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.06%)</title><rect x="320.2" y="675.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="323.2" y="686.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.04%)</title><rect x="320.2" y="659.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="323.2" y="670.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="320.2" y="643.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="323.2" y="654.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.04%)</title><rect x="320.2" y="627.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="323.2" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="321.1" y="707.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="324.1" y="718.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.07%)</title><rect x="321.1" y="691.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="324.1" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.07%)</title><rect x="321.1" y="675.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="324.1" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.07%)</title><rect x="321.1" y="659.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="324.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (36 samples, 0.53%)</title><rect x="322.7" y="787.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.04%)</title><rect x="322.7" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="322.7" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="322.7" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.7" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="322.7" y="723.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.7" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.03%)</title><rect x="322.7" y="707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.7" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.03%)</title><rect x="322.7" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="325.7" y="702.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.10%)</title><rect x="323.2" y="771.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="326.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="323.5" y="755.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.04%)</title><rect x="323.5" y="739.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.5" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="324.1" y="755.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="327.1" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="324.1" y="739.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="327.1" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="324.1" y="723.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="327.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (8 samples, 0.12%)</title><rect x="324.4" y="771.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.12%)</title><rect x="324.4" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.12%)</title><rect x="324.4" y="739.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="324.9" y="723.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="327.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="324.9" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="327.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="324.9" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="327.9" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="324.9" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="327.9" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="325.3" y="723.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="328.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="325.3" y="707.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="328.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="325.3" y="691.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="328.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.09%)</title><rect x="325.8" y="771.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="328.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.18%)</title><rect x="326.9" y="771.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="327.7" y="755.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.7" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.09%)</title><rect x="327.7" y="739.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.7" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="328.3" y="723.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="331.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (29 samples, 0.43%)</title><rect x="329.0" y="787.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.03%)</title><rect x="329.7" y="771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="332.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (21 samples, 0.31%)</title><rect x="330.0" y="771.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.12%)</title><rect x="330.9" y="755.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.07%)</title><rect x="331.2" y="739.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.10%)</title><rect x="332.5" y="755.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.10%)</title><rect x="332.5" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.09%)</title><rect x="332.6" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="335.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="333.2" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="333.2" y="691.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.2" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.03%)</title><rect x="333.7" y="771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="336.7" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (6 samples, 0.09%)</title><rect x="334.0" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.04%)</title><rect x="334.0" y="771.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="337.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title><rect x="334.0" y="755.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="337.0" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="334.2" y="739.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="337.2" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="334.2" y="723.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.2" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="334.2" y="707.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="337.2" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="334.6" y="771.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="337.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="334.6" y="755.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="337.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="334.6" y="739.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="337.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (113 samples, 1.67%)</title><rect x="335.1" y="787.0" width="19.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="338.1" y="798.0"></text>
</g>
<g>
<title>setsockopt (110 samples, 1.63%)</title><rect x="335.6" y="771.0" width="19.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="338.6" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (108 samples, 1.60%)</title><rect x="336.0" y="755.0" width="18.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="339.0" y="766.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (5 samples, 0.07%)</title><rect x="336.0" y="739.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="339.0" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (103 samples, 1.53%)</title><rect x="336.8" y="739.0" width="18.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="339.8" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (94 samples, 1.39%)</title><rect x="338.2" y="723.0" width="16.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="341.2" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (91 samples, 1.35%)</title><rect x="338.6" y="707.0" width="15.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="341.6" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (6 samples, 0.09%)</title><rect x="339.6" y="691.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="342.6" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (14 samples, 0.21%)</title><rect x="340.7" y="691.0" width="2.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="343.7" y="702.0"></text>
</g>
<g>
<title>security_socket_setsockopt (11 samples, 0.16%)</title><rect x="343.3" y="691.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="346.3" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (10 samples, 0.15%)</title><rect x="343.5" y="675.0" width="1.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="346.5" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.15%)</title><rect x="343.5" y="659.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="346.5" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (9 samples, 0.13%)</title><rect x="343.6" y="643.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="346.6" y="654.0"></text>
</g>
<g>
<title>aa_label_next_confined (2 samples, 0.03%)</title><rect x="344.3" y="627.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="347.3" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.04%)</title><rect x="344.7" y="627.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="347.7" y="638.0"></text>
</g>
<g>
<title>sock_set_timeout (2 samples, 0.03%)</title><rect x="345.2" y="691.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="348.2" y="702.0"></text>
</g>
<g>
<title>sock_setsockopt (29 samples, 0.43%)</title><rect x="345.6" y="691.0" width="5.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="348.6" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="346.1" y="675.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="349.1" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="346.4" y="675.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="349.4" y="686.0"></text>
</g>
<g>
<title>release_sock (8 samples, 0.12%)</title><rect x="346.8" y="675.0" width="1.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="349.8" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (3 samples, 0.04%)</title><rect x="347.3" y="659.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="350.3" y="670.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (3 samples, 0.04%)</title><rect x="347.3" y="643.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="350.3" y="654.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="347.8" y="659.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="350.8" y="670.0"></text>
</g>
<g>
<title>sock_set_timeout (10 samples, 0.15%)</title><rect x="348.2" y="675.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="351.2" y="686.0"></text>
</g>
<g>
<title>copy_user_generic_string (7 samples, 0.10%)</title><rect x="348.7" y="659.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="351.7" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (4 samples, 0.06%)</title><rect x="349.9" y="675.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="352.9" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (22 samples, 0.33%)</title><rect x="350.6" y="691.0" width="3.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="353.6" y="702.0"></text>
</g>
<g>
<title>__fdget (20 samples, 0.30%)</title><rect x="350.8" y="675.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="353.8" y="686.0"></text>
</g>
<g>
<title>__fget_light (20 samples, 0.30%)</title><rect x="350.8" y="659.0" width="3.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="353.8" y="670.0"></text>
</g>
<g>
<title>__fget (20 samples, 0.30%)</title><rect x="350.8" y="643.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="353.8" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,027 samples, 15.22%)</title><rect x="354.8" y="787.0" width="179.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="357.8" y="798.0">one/nio/net/NativeSocke..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (7 samples, 0.10%)</title><rect x="356.1" y="771.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="359.1" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="356.2" y="755.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="359.2" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (4 samples, 0.06%)</title><rect x="356.6" y="755.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="359.6" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.03%)</title><rect x="356.9" y="739.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="359.9" y="750.0"></text>
</g>
<g>
<title>send (1,012 samples, 15.00%)</title><rect x="357.5" y="771.0" width="176.9" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="360.5" y="782.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,005 samples, 14.89%)</title><rect x="358.7" y="755.0" width="175.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="361.7" y="766.0">entry_SYSCALL_64_after_..</text>
</g>
<g>
<title>__x64_sys_sendto (2 samples, 0.03%)</title><rect x="358.7" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="361.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (1,003 samples, 14.86%)</title><rect x="359.0" y="739.0" width="175.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="362.0" y="750.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (984 samples, 14.58%)</title><rect x="359.2" y="723.0" width="172.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="362.2" y="734.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (982 samples, 14.55%)</title><rect x="359.2" y="707.0" width="171.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="362.2" y="718.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (2 samples, 0.03%)</title><rect x="359.4" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="362.4" y="702.0"></text>
</g>
<g>
<title>sock_sendmsg (977 samples, 14.48%)</title><rect x="359.7" y="691.0" width="170.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="362.7" y="702.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (967 samples, 14.33%)</title><rect x="360.4" y="675.0" width="169.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="363.4" y="686.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (965 samples, 14.30%)</title><rect x="360.6" y="659.0" width="168.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="363.6" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_rate_check_app_limited (9 samples, 0.13%)</title><rect x="360.8" y="643.0" width="1.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="363.8" y="654.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (952 samples, 14.11%)</title><rect x="362.5" y="643.0" width="166.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="365.5" y="654.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.09%)</title><rect x="363.9" y="627.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="366.9" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.06%)</title><rect x="363.9" y="611.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="366.9" y="622.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.06%)</title><rect x="365.0" y="627.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="368.0" y="638.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.06%)</title><rect x="365.0" y="611.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="368.0" y="622.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (44 samples, 0.65%)</title><rect x="365.7" y="627.0" width="7.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="368.7" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (42 samples, 0.62%)</title><rect x="366.0" y="611.0" width="7.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="369.0" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (16 samples, 0.24%)</title><rect x="366.6" y="595.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="369.6" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (2 samples, 0.03%)</title><rect x="366.6" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="369.6" y="590.0"></text>
</g>
<g>
<title>memset (13 samples, 0.19%)</title><rect x="367.1" y="579.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="370.1" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (5 samples, 0.07%)</title><rect x="369.5" y="595.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="372.5" y="606.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="370.1" y="579.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="373.1" y="590.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.09%)</title><rect x="370.4" y="595.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="373.4" y="606.0"></text>
</g>
<g>
<title>__ksize (6 samples, 0.09%)</title><rect x="370.4" y="579.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="373.4" y="590.0"></text>
</g>
<g>
<title>memset (9 samples, 0.13%)</title><rect x="371.6" y="595.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="374.6" y="606.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.04%)</title><rect x="373.4" y="627.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="376.4" y="638.0"></text>
</g>
<g>
<title>tcp_push (880 samples, 13.04%)</title><rect x="373.9" y="627.0" width="153.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="376.9" y="638.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (880 samples, 13.04%)</title><rect x="373.9" y="611.0" width="153.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="376.9" y="622.0">__tcp_push_pending_..</text>
</g>
<g>
<title>ktime_get (5 samples, 0.07%)</title><rect x="374.1" y="595.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="377.1" y="606.0"></text>
</g>
<g>
<title>tcp_write_xmit (872 samples, 12.92%)</title><rect x="375.3" y="595.0" width="152.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="378.3" y="606.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (854 samples, 12.66%)</title><rect x="375.8" y="579.0" width="149.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="378.8" y="590.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="376.3" y="563.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="379.3" y="574.0"></text>
</g>
<g>
<title>ip_queue_xmit (848 samples, 12.57%)</title><rect x="376.9" y="563.0" width="148.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="379.9" y="574.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (847 samples, 12.55%)</title><rect x="376.9" y="547.0" width="148.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="379.9" y="558.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (841 samples, 12.46%)</title><rect x="377.4" y="531.0" width="147.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="380.4" y="542.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (5 samples, 0.07%)</title><rect x="377.6" y="515.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="380.6" y="526.0"></text>
</g>
<g>
<title>ip_send_check (5 samples, 0.07%)</title><rect x="377.6" y="499.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="380.6" y="510.0"></text>
</g>
<g>
<title>ip_output (834 samples, 12.36%)</title><rect x="378.4" y="515.0" width="145.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="381.4" y="526.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (831 samples, 12.31%)</title><rect x="379.0" y="499.0" width="145.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="382.0" y="510.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="379.0" y="483.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="382.0" y="494.0"></text>
</g>
<g>
<title>__ip_finish_output (829 samples, 12.29%)</title><rect x="379.3" y="483.0" width="145.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="382.3" y="494.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (828 samples, 12.27%)</title><rect x="379.5" y="467.0" width="144.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="382.5" y="478.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (804 samples, 11.91%)</title><rect x="380.9" y="451.0" width="140.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="383.9" y="462.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (803 samples, 11.90%)</title><rect x="381.1" y="435.0" width="140.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="384.1" y="446.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (799 samples, 11.84%)</title><rect x="381.8" y="419.0" width="139.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.8" y="430.0">do_softirq_own_st..</text>
</g>
<g>
<title>__softirqentry_text_start (799 samples, 11.84%)</title><rect x="381.8" y="403.0" width="139.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="384.8" y="414.0">__softirqentry_te..</text>
</g>
<g>
<title>net_rx_action (791 samples, 11.72%)</title><rect x="382.8" y="387.0" width="138.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="385.8" y="398.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (783 samples, 11.60%)</title><rect x="384.2" y="371.0" width="136.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="387.2" y="382.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (776 samples, 11.50%)</title><rect x="385.1" y="355.0" width="135.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="388.1" y="366.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_one_core (776 samples, 11.50%)</title><rect x="385.1" y="339.0" width="135.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="388.1" y="350.0">__netif_receive_s..</text>
</g>
<g>
<title>ip_rcv (771 samples, 11.43%)</title><rect x="385.8" y="323.0" width="134.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="388.8" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (771 samples, 11.43%)</title><rect x="385.8" y="307.0" width="134.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="388.8" y="318.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (771 samples, 11.43%)</title><rect x="385.8" y="291.0" width="134.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="388.8" y="302.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (771 samples, 11.43%)</title><rect x="385.8" y="275.0" width="134.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="388.8" y="286.0">ip_local_deliver_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (771 samples, 11.43%)</title><rect x="385.8" y="259.0" width="134.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="388.8" y="270.0">ip_protocol_deliv..</text>
</g>
<g>
<title>tcp_v4_rcv (768 samples, 11.38%)</title><rect x="386.3" y="243.0" width="134.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="389.3" y="254.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (10 samples, 0.15%)</title><rect x="388.4" y="227.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="391.4" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (741 samples, 10.98%)</title><rect x="390.7" y="227.0" width="129.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="393.7" y="238.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="390.7" y="211.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="393.7" y="222.0"></text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.06%)</title><rect x="391.0" y="211.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="394.0" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (734 samples, 10.88%)</title><rect x="391.9" y="211.0" width="128.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="394.9" y="222.0">tcp_rcv_establis..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.04%)</title><rect x="392.8" y="195.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="395.8" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.04%)</title><rect x="392.8" y="179.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="395.8" y="190.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="392.8" y="163.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="395.8" y="174.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="392.8" y="147.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="395.8" y="158.0"></text>
</g>
<g>
<title>tcp_ack (44 samples, 0.65%)</title><rect x="393.5" y="195.0" width="7.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="396.5" y="206.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (30 samples, 0.44%)</title><rect x="395.4" y="179.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="398.4" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (24 samples, 0.36%)</title><rect x="396.3" y="163.0" width="4.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="399.3" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.12%)</title><rect x="396.3" y="147.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="399.3" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.12%)</title><rect x="396.3" y="131.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="399.3" y="142.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="397.2" y="115.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="400.2" y="126.0"></text>
</g>
<g>
<title>skb_release_all (16 samples, 0.24%)</title><rect x="397.7" y="147.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="400.7" y="158.0"></text>
</g>
<g>
<title>skb_release_data (16 samples, 0.24%)</title><rect x="397.7" y="131.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="400.7" y="142.0"></text>
</g>
<g>
<title>skb_free_head (9 samples, 0.13%)</title><rect x="398.9" y="115.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="401.9" y="126.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.13%)</title><rect x="398.9" y="99.0" width="1.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="401.9" y="110.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.04%)</title><rect x="400.0" y="83.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="403.0" y="94.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.04%)</title><rect x="400.7" y="179.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="403.7" y="190.0"></text>
</g>
<g>
<title>tcp_data_ready (674 samples, 9.99%)</title><rect x="401.2" y="195.0" width="117.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="404.2" y="206.0">tcp_data_ready</text>
</g>
<g>
<title>sock_def_readable (674 samples, 9.99%)</title><rect x="401.2" y="179.0" width="117.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="404.2" y="190.0">sock_def_reada..</text>
</g>
<g>
<title>__wake_up_sync_key (673 samples, 9.97%)</title><rect x="401.4" y="163.0" width="117.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="404.4" y="174.0">__wake_up_sync..</text>
</g>
<g>
<title>__wake_up_common_lock (673 samples, 9.97%)</title><rect x="401.4" y="147.0" width="117.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="404.4" y="158.0">__wake_up_comm..</text>
</g>
<g>
<title>__lock_text_start (673 samples, 9.97%)</title><rect x="401.4" y="131.0" width="117.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="404.4" y="142.0">__lock_text_st..</text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.07%)</title><rect x="519.0" y="195.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="522.0" y="206.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.07%)</title><rect x="519.0" y="179.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="522.0" y="190.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (2 samples, 0.03%)</title><rect x="520.8" y="355.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="523.8" y="366.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="521.1" y="387.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="524.1" y="398.0"></text>
</g>
<g>
<title>dev_queue_xmit (16 samples, 0.24%)</title><rect x="521.5" y="451.0" width="2.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="524.5" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (16 samples, 0.24%)</title><rect x="521.5" y="435.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="524.5" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (7 samples, 0.10%)</title><rect x="522.4" y="419.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="525.4" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.09%)</title><rect x="522.4" y="403.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="525.4" y="414.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.04%)</title><rect x="522.5" y="387.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="525.5" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.04%)</title><rect x="522.5" y="371.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="525.5" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="522.5" y="355.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="525.5" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="523.9" y="419.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="526.9" y="430.0"></text>
</g>
<g>
<title>ip_output (3 samples, 0.04%)</title><rect x="524.5" y="531.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="527.5" y="542.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="525.9" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="528.9" y="590.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.04%)</title><rect x="526.4" y="579.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="529.4" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="526.4" y="563.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="529.4" y="574.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.04%)</title><rect x="526.4" y="547.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="529.4" y="558.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.04%)</title><rect x="526.4" y="531.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="529.4" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="526.6" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="529.6" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="527.3" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="530.3" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (5 samples, 0.07%)</title><rect x="527.8" y="627.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="530.8" y="638.0"></text>
</g>
<g>
<title>tcp_send_mss (2 samples, 0.03%)</title><rect x="528.7" y="627.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="531.7" y="638.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="529.0" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="532.0" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (6 samples, 0.09%)</title><rect x="529.5" y="675.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="532.5" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.09%)</title><rect x="529.5" y="659.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="532.5" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.09%)</title><rect x="529.5" y="643.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="532.5" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (3 samples, 0.04%)</title><rect x="530.1" y="627.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="533.1" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="530.6" y="691.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="533.6" y="702.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="530.9" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="533.9" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (18 samples, 0.27%)</title><rect x="531.3" y="723.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="534.3" y="734.0"></text>
</g>
<g>
<title>schedule (18 samples, 0.27%)</title><rect x="531.3" y="707.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="534.3" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (17 samples, 0.25%)</title><rect x="531.5" y="691.0" width="2.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="534.5" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (17 samples, 0.25%)</title><rect x="531.5" y="675.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="534.5" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (14 samples, 0.21%)</title><rect x="534.4" y="787.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="537.4" y="798.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (15 samples, 0.22%)</title><rect x="536.9" y="787.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="539.9" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="537.9" y="771.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="540.9" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.04%)</title><rect x="537.9" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="540.9" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.04%)</title><rect x="537.9" y="739.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="540.9" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.07%)</title><rect x="538.6" y="771.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="541.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.07%)</title><rect x="538.6" y="755.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="541.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="538.6" y="739.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="541.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (7 samples, 0.10%)</title><rect x="539.5" y="819.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.5" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="540.7" y="819.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="543.7" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="540.7" y="803.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="543.7" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="540.7" y="787.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="543.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$81/1457816816.run (2,208 samples, 32.72%)</title><rect x="541.1" y="867.0" width="386.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="544.1" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncGet$2 (2,204 samples, 32.66%)</title><rect x="541.8" y="851.0" width="385.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="544.8" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.getInternal (2,204 samples, 32.66%)</title><rect x="541.8" y="835.0" width="385.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.8" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,016 samples, 15.06%)</title><rect x="541.8" y="819.0" width="177.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="544.8" y="830.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="544.6" y="803.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="547.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.15%)</title><rect x="544.9" y="803.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="547.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.15%)</title><rect x="544.9" y="787.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="547.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.15%)</title><rect x="544.9" y="771.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="547.9" y="782.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="545.4" y="755.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="548.4" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="546.1" y="755.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="549.1" y="766.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="546.3" y="739.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="549.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="546.3" y="723.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="549.3" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (978 samples, 14.49%)</title><rect x="546.7" y="803.0" width="171.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="549.7" y="814.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (22 samples, 0.33%)</title><rect x="546.8" y="787.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="549.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.07%)</title><rect x="548.6" y="771.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="551.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.07%)</title><rect x="548.6" y="755.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.6" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.07%)</title><rect x="548.6" y="739.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="551.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="548.6" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="551.6" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="548.6" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="551.6" y="718.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="548.6" y="691.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="551.6" y="702.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="549.1" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.09%)</title><rect x="549.5" y="771.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.09%)</title><rect x="549.5" y="755.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="552.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.09%)</title><rect x="549.5" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="552.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.09%)</title><rect x="549.5" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.09%)</title><rect x="549.5" y="707.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.5" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="550.2" y="691.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="553.2" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (955 samples, 14.15%)</title><rect x="550.7" y="787.0" width="167.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="553.7" y="798.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="550.9" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="553.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="550.9" y="755.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="553.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="550.9" y="739.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="553.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="550.9" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="553.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="550.9" y="707.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="553.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="550.9" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="553.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (952 samples, 14.11%)</title><rect x="551.2" y="771.0" width="166.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.2" y="782.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (950 samples, 14.08%)</title><rect x="551.6" y="755.0" width="166.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="554.6" y="766.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.04%)</title><rect x="552.1" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.1" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (944 samples, 13.99%)</title><rect x="552.6" y="739.0" width="165.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.6" y="750.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="553.7" y="723.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="556.7" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (23 samples, 0.34%)</title><rect x="554.4" y="723.0" width="4.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="557.4" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="556.3" y="707.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="559.3" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.13%)</title><rect x="556.8" y="707.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="559.8" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.09%)</title><rect x="557.3" y="691.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="560.3" y="702.0"></text>
</g>
<g>
<title>send (911 samples, 13.50%)</title><rect x="558.4" y="723.0" width="159.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="561.4" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (899 samples, 13.32%)</title><rect x="560.3" y="707.0" width="157.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="563.3" y="718.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.06%)</title><rect x="560.3" y="691.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="563.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (895 samples, 13.26%)</title><rect x="561.0" y="691.0" width="156.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="564.0" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (882 samples, 13.07%)</title><rect x="562.4" y="675.0" width="154.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="565.4" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (879 samples, 13.03%)</title><rect x="562.4" y="659.0" width="153.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="565.4" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (851 samples, 12.61%)</title><rect x="563.8" y="643.0" width="148.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="566.8" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.10%)</title><rect x="563.8" y="627.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="566.8" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (829 samples, 12.29%)</title><rect x="565.0" y="627.0" width="145.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="568.0" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (827 samples, 12.26%)</title><rect x="565.4" y="611.0" width="144.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="568.4" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>sock_zerocopy_put (2 samples, 0.03%)</title><rect x="566.3" y="595.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="569.3" y="606.0"></text>
</g>
<g>
<title>tcp_push (2 samples, 0.03%)</title><rect x="566.6" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="569.6" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="567.0" y="595.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="570.0" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (813 samples, 12.05%)</title><rect x="567.5" y="595.0" width="142.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="570.5" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="568.7" y="579.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="571.7" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="568.7" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="571.7" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.09%)</title><rect x="569.0" y="579.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="572.0" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.06%)</title><rect x="569.2" y="563.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="572.2" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (2 samples, 0.03%)</title><rect x="570.1" y="579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="573.1" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (13 samples, 0.19%)</title><rect x="570.4" y="579.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="573.4" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (13 samples, 0.19%)</title><rect x="570.4" y="563.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="573.4" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (61 samples, 0.90%)</title><rect x="572.7" y="579.0" width="10.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="575.7" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (57 samples, 0.84%)</title><rect x="573.2" y="563.0" width="10.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="576.2" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (23 samples, 0.34%)</title><rect x="573.8" y="547.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="576.8" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (12 samples, 0.18%)</title><rect x="573.8" y="531.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="576.8" y="542.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.06%)</title><rect x="575.2" y="515.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="578.2" y="526.0"></text>
</g>
<g>
<title>memset (10 samples, 0.15%)</title><rect x="576.0" y="531.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="579.0" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (12 samples, 0.18%)</title><rect x="578.1" y="547.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="581.1" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="579.9" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="582.9" y="542.0"></text>
</g>
<g>
<title>ksize (9 samples, 0.13%)</title><rect x="580.2" y="547.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="583.2" y="558.0"></text>
</g>
<g>
<title>__ksize (9 samples, 0.13%)</title><rect x="580.2" y="531.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="583.2" y="542.0"></text>
</g>
<g>
<title>memset (6 samples, 0.09%)</title><rect x="582.0" y="547.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="585.0" y="558.0"></text>
</g>
<g>
<title>skb_entail (5 samples, 0.07%)</title><rect x="583.4" y="579.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="586.4" y="590.0"></text>
</g>
<g>
<title>tcp_push (702 samples, 10.40%)</title><rect x="584.6" y="579.0" width="122.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="587.6" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (702 samples, 10.40%)</title><rect x="584.6" y="563.0" width="122.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="587.6" y="574.0">__tcp_push_pend..</text>
</g>
<g>
<title>ktime_get (5 samples, 0.07%)</title><rect x="584.6" y="547.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="587.6" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (695 samples, 10.30%)</title><rect x="585.8" y="547.0" width="121.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="588.8" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (672 samples, 9.96%)</title><rect x="586.9" y="531.0" width="117.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="589.9" y="542.0">__tcp_transmit..</text>
</g>
<g>
<title>ip_queue_xmit (656 samples, 9.72%)</title><rect x="589.3" y="515.0" width="114.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="592.3" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (654 samples, 9.69%)</title><rect x="589.3" y="499.0" width="114.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="592.3" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.04%)</title><rect x="590.0" y="483.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="593.0" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="590.0" y="467.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="593.0" y="478.0"></text>
</g>
<g>
<title>ip_local_out (642 samples, 9.51%)</title><rect x="590.6" y="483.0" width="112.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.6" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.06%)</title><rect x="590.7" y="467.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.7" y="478.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.04%)</title><rect x="590.9" y="451.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="593.9" y="462.0"></text>
</g>
<g>
<title>ip_output (637 samples, 9.44%)</title><rect x="591.4" y="467.0" width="111.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="594.4" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (637 samples, 9.44%)</title><rect x="591.4" y="451.0" width="111.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="594.4" y="462.0">ip_finish_out..</text>
</g>
<g>
<title>__ip_finish_output (635 samples, 9.41%)</title><rect x="591.6" y="435.0" width="111.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="594.6" y="446.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (633 samples, 9.38%)</title><rect x="591.8" y="419.0" width="110.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="594.8" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (597 samples, 8.85%)</title><rect x="593.0" y="403.0" width="104.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="596.0" y="414.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.0 (597 samples, 8.85%)</title><rect x="593.0" y="387.0" width="104.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="596.0" y="398.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (593 samples, 8.79%)</title><rect x="593.7" y="371.0" width="103.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="596.7" y="382.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (593 samples, 8.79%)</title><rect x="593.7" y="355.0" width="103.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="596.7" y="366.0">__softirqent..</text>
</g>
<g>
<title>net_rx_action (588 samples, 8.71%)</title><rect x="594.2" y="339.0" width="102.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="597.2" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (587 samples, 8.70%)</title><rect x="594.4" y="323.0" width="102.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="597.4" y="334.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb (579 samples, 8.58%)</title><rect x="595.8" y="307.0" width="101.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="598.8" y="318.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (578 samples, 8.57%)</title><rect x="596.0" y="291.0" width="101.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="599.0" y="302.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.09%)</title><rect x="596.2" y="275.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="599.2" y="286.0"></text>
</g>
<g>
<title>ip_rcv (571 samples, 8.46%)</title><rect x="597.2" y="275.0" width="99.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="600.2" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="597.6" y="259.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="600.6" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.03%)</title><rect x="597.9" y="259.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="600.9" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (565 samples, 8.37%)</title><rect x="598.3" y="259.0" width="98.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="601.3" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (562 samples, 8.33%)</title><rect x="598.6" y="243.0" width="98.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="601.6" y="254.0">ip_local_del..</text>
</g>
<g>
<title>ip_local_deliver_finish (562 samples, 8.33%)</title><rect x="598.6" y="227.0" width="98.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="601.6" y="238.0">ip_local_del..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (561 samples, 8.31%)</title><rect x="598.6" y="211.0" width="98.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="601.6" y="222.0">ip_protocol_..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="599.0" y="195.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="602.0" y="206.0"></text>
</g>
<g>
<title>sock_put (2 samples, 0.03%)</title><rect x="599.3" y="195.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="602.3" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (555 samples, 8.22%)</title><rect x="599.7" y="195.0" width="97.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="602.7" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (25 samples, 0.37%)</title><rect x="602.3" y="179.0" width="4.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="605.3" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.09%)</title><rect x="606.8" y="179.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="609.8" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="607.2" y="163.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="610.2" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="607.5" y="163.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="610.5" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.03%)</title><rect x="607.9" y="179.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="610.9" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (506 samples, 7.50%)</title><rect x="608.2" y="179.0" width="88.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="611.2" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_check_space (9 samples, 0.13%)</title><rect x="608.4" y="163.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="611.4" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (495 samples, 7.34%)</title><rect x="610.1" y="163.0" width="86.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="613.1" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (2 samples, 0.03%)</title><rect x="611.2" y="147.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="614.2" y="158.0"></text>
</g>
<g>
<title>tcp_ack (54 samples, 0.80%)</title><rect x="612.1" y="147.0" width="9.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="615.1" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="613.6" y="131.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="616.6" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="614.0" y="131.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="617.0" y="142.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="614.3" y="131.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="617.3" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (36 samples, 0.53%)</title><rect x="614.9" y="131.0" width="6.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="617.9" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (28 samples, 0.41%)</title><rect x="615.6" y="115.0" width="4.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="618.6" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.04%)</title><rect x="615.7" y="99.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="618.7" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.04%)</title><rect x="615.7" y="83.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="618.7" y="94.0"></text>
</g>
<g>
<title>skb_release_all (24 samples, 0.36%)</title><rect x="616.3" y="99.0" width="4.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="619.3" y="110.0"></text>
</g>
<g>
<title>skb_release_data (22 samples, 0.33%)</title><rect x="616.4" y="83.0" width="3.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="619.4" y="94.0"></text>
</g>
<g>
<title>skb_free_head (4 samples, 0.06%)</title><rect x="619.6" y="67.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="622.6" y="78.0"></text>
</g>
<g>
<title>kfree (4 samples, 0.06%)</title><rect x="619.6" y="51.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="622.6" y="62.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="619.9" y="35.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="622.9" y="46.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.03%)</title><rect x="620.6" y="115.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="623.6" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (424 samples, 6.28%)</title><rect x="621.5" y="147.0" width="74.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="624.5" y="158.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (424 samples, 6.28%)</title><rect x="621.5" y="131.0" width="74.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="624.5" y="142.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (421 samples, 6.24%)</title><rect x="622.0" y="115.0" width="73.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="625.0" y="126.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (421 samples, 6.24%)</title><rect x="622.0" y="99.0" width="73.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="625.0" y="110.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (421 samples, 6.24%)</title><rect x="622.0" y="83.0" width="73.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="625.0" y="94.0">__lock_t..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.04%)</title><rect x="695.7" y="147.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="698.7" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="696.2" y="147.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="699.2" y="158.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="696.2" y="131.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="699.2" y="142.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="697.1" y="339.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="700.1" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (29 samples, 0.43%)</title><rect x="697.4" y="403.0" width="5.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="700.4" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (28 samples, 0.41%)</title><rect x="697.6" y="387.0" width="4.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="700.6" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (18 samples, 0.27%)</title><rect x="698.8" y="371.0" width="3.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="701.8" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (15 samples, 0.22%)</title><rect x="699.1" y="355.0" width="2.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="702.1" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (3 samples, 0.04%)</title><rect x="699.7" y="339.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="702.7" y="350.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.10%)</title><rect x="700.2" y="339.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="703.2" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.10%)</title><rect x="700.2" y="323.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="703.2" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.10%)</title><rect x="700.2" y="307.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="703.2" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="701.9" y="371.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="704.9" y="382.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.03%)</title><rect x="702.8" y="483.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="705.8" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="703.2" y="483.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="706.2" y="494.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="704.9" y="531.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="707.9" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (6 samples, 0.09%)</title><rect x="705.4" y="531.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="708.4" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.09%)</title><rect x="705.4" y="515.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="708.4" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="705.8" y="499.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="708.8" y="510.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="705.8" y="483.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="708.8" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="706.0" y="467.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="709.0" y="478.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.03%)</title><rect x="706.5" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="709.5" y="542.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="707.0" y="531.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="710.0" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (12 samples, 0.18%)</title><rect x="707.4" y="579.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="710.4" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="707.5" y="563.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="710.5" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.12%)</title><rect x="708.1" y="563.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="711.1" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="708.9" y="547.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="711.9" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="709.6" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="712.6" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (15 samples, 0.22%)</title><rect x="710.0" y="627.0" width="2.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="713.0" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (15 samples, 0.22%)</title><rect x="710.0" y="611.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="713.0" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (15 samples, 0.22%)</title><rect x="710.0" y="595.0" width="2.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="713.0" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (7 samples, 0.10%)</title><rect x="711.4" y="579.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="714.4" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.04%)</title><rect x="712.1" y="563.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="715.1" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (20 samples, 0.30%)</title><rect x="712.6" y="643.0" width="3.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="715.6" y="654.0"></text>
</g>
<g>
<title>__fdget (18 samples, 0.27%)</title><rect x="712.8" y="627.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="715.8" y="638.0"></text>
</g>
<g>
<title>__fget_light (18 samples, 0.27%)</title><rect x="712.8" y="611.0" width="3.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="715.8" y="622.0"></text>
</g>
<g>
<title>__fget (18 samples, 0.27%)</title><rect x="712.8" y="595.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="715.8" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.07%)</title><rect x="716.6" y="675.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="719.6" y="686.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="717.0" y="659.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="720.0" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="717.0" y="643.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="720.0" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.04%)</title><rect x="717.0" y="627.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="720.0" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.15%)</title><rect x="717.7" y="803.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="718.4" y="787.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="721.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.09%)</title><rect x="718.4" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="721.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (20 samples, 0.30%)</title><rect x="719.4" y="819.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (19 samples, 0.28%)</title><rect x="719.6" y="803.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="721.4" y="787.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="724.4" y="798.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.07%)</title><rect x="721.7" y="787.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="724.7" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="722.6" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="725.6" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="722.6" y="771.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="725.6" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="722.6" y="755.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="725.6" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.get (1,162 samples, 17.22%)</title><rect x="722.9" y="819.0" width="203.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="725.9" y="830.0">ru/mail/polis/dao/kovalkov/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.15%)</title><rect x="723.3" y="803.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="726.3" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (10 samples, 0.15%)</title><rect x="723.3" y="787.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="726.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.13%)</title><rect x="723.5" y="771.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.5" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.13%)</title><rect x="723.5" y="755.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="726.5" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="724.0" y="739.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="727.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="724.0" y="723.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="727.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.04%)</title><rect x="724.0" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="727.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.03%)</title><rect x="724.2" y="691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="727.2" y="702.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (2 samples, 0.03%)</title><rect x="724.7" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="727.7" y="750.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,138 samples, 16.86%)</title><rect x="725.0" y="803.0" width="199.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="728.0" y="814.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,138 samples, 16.86%)</title><rect x="725.0" y="787.0" width="199.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="728.0" y="798.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,099 samples, 16.29%)</title><rect x="725.9" y="771.0" width="192.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="728.9" y="782.0">Java_org_rocksdb_RocksDB_..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="726.4" y="755.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="729.4" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (3 samples, 0.04%)</title><rect x="727.1" y="755.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="730.1" y="766.0"></text>
</g>
<g>
<title>cfree (11 samples, 0.16%)</title><rect x="727.7" y="755.0" width="1.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="730.7" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.06%)</title><rect x="729.6" y="755.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="732.6" y="766.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="730.3" y="755.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="733.3" y="766.0"></text>
</g>
<g>
<title>operator delete[](void*) (2 samples, 0.03%)</title><rect x="730.6" y="755.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="733.6" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (4 samples, 0.06%)</title><rect x="731.1" y="755.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="734.1" y="766.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1,062 samples, 15.74%)</title><rect x="732.0" y="755.0" width="185.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="735.0" y="766.0">rocksdb_get_helper(JNIEn..</text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.10%)</title><rect x="732.4" y="739.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="735.4" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.04%)</title><rect x="733.1" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="736.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.12%)</title><rect x="733.6" y="739.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="736.6" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.09%)</title><rect x="733.9" y="723.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="736.9" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (3 samples, 0.04%)</title><rect x="735.0" y="739.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="738.0" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (982 samples, 14.55%)</title><rect x="735.7" y="739.0" width="171.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.7" y="750.0">rocksdb::DB::Get(rocks..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (975 samples, 14.45%)</title><rect x="735.9" y="723.0" width="170.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="738.9" y="734.0">rocksdb::DB::Get(rocks..</text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseCacheHandle(void*, void*) (3 samples, 0.04%)</title><rect x="737.1" y="707.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="740.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (16 samples, 0.24%)</title><rect x="737.6" y="707.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="740.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::LRUCache::GetHash(rocksdb::Cache::Handle*) const (2 samples, 0.03%)</title><rect x="737.8" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Release(rocksdb::Cache::Handle*, bool) (7 samples, 0.10%)</title><rect x="738.3" y="691.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="741.3" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="738.5" y="675.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="741.5" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="738.8" y="675.0" width="0.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="741.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Insert(rocksdb::LRUHandle*) (2 samples, 0.03%)</title><rect x="739.2" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="742.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.03%)</title><rect x="739.5" y="691.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="740.1" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="743.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (945 samples, 14.00%)</title><rect x="740.4" y="707.0" width="165.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.4" y="718.0">rocksdb::DBImpl::Get(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (941 samples, 13.94%)</title><rect x="740.6" y="691.0" width="164.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.6" y="702.0">rocksdb::DBImpl::Get(..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (6 samples, 0.09%)</title><rect x="740.8" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="743.8" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (11 samples, 0.16%)</title><rect x="742.0" y="675.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="745.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (5 samples, 0.07%)</title><rect x="743.9" y="675.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="746.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (3 samples, 0.04%)</title><rect x="744.8" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (4 samples, 0.06%)</title><rect x="745.3" y="675.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="748.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (2 samples, 0.03%)</title><rect x="746.0" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="749.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (891 samples, 13.20%)</title><rect x="746.4" y="675.0" width="155.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.4" y="686.0">rocksdb::DBImpl::Get..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="748.8" y="659.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="751.8" y="670.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="749.2" y="659.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="752.2" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (15 samples, 0.22%)</title><rect x="749.7" y="659.0" width="2.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="752.7" y="670.0"></text>
</g>
<g>
<title>memcpy (4 samples, 0.06%)</title><rect x="752.3" y="659.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="755.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (31 samples, 0.46%)</title><rect x="753.0" y="659.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="756.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.04%)</title><rect x="753.9" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (19 samples, 0.28%)</title><rect x="754.6" y="643.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="757.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (9 samples, 0.13%)</title><rect x="756.0" y="627.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="759.0" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="757.2" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="760.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="757.2" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="760.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="757.2" y="579.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="760.2" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="757.6" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="760.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="757.6" y="611.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="760.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="757.6" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="760.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (3 samples, 0.04%)</title><rect x="757.9" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="760.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (2 samples, 0.03%)</title><rect x="758.1" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="761.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (15 samples, 0.22%)</title><rect x="758.6" y="659.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (9 samples, 0.13%)</title><rect x="758.8" y="643.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="761.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.04%)</title><rect x="759.0" y="627.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="762.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (4 samples, 0.06%)</title><rect x="759.5" y="627.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="762.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (3 samples, 0.04%)</title><rect x="760.4" y="643.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="763.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (2 samples, 0.03%)</title><rect x="760.9" y="643.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="763.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.04%)</title><rect x="761.2" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="764.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (122 samples, 1.81%)</title><rect x="761.9" y="659.0" width="21.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="764.9" y="670.0">r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="763.3" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="766.3" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="763.9" y="643.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="766.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (106 samples, 1.57%)</title><rect x="764.2" y="643.0" width="18.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="767.2" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (98 samples, 1.45%)</title><rect x="765.2" y="627.0" width="17.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="768.2" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (4 samples, 0.06%)</title><rect x="765.8" y="611.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="768.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (87 samples, 1.29%)</title><rect x="766.5" y="611.0" width="15.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="769.5" y="622.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (6 samples, 0.09%)</title><rect x="774.7" y="595.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="777.7" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="775.7" y="595.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.12%)</title><rect x="776.1" y="595.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="779.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.27%)</title><rect x="777.5" y="595.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="780.5" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="778.2" y="579.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="781.2" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (10 samples, 0.15%)</title><rect x="778.5" y="579.0" width="1.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="781.5" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.09%)</title><rect x="780.6" y="595.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="783.6" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.09%)</title><rect x="780.6" y="579.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="783.6" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.09%)</title><rect x="780.6" y="563.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="783.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.06%)</title><rect x="781.7" y="611.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (2 samples, 0.03%)</title><rect x="782.7" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (4 samples, 0.06%)</title><rect x="783.3" y="659.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="786.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (3 samples, 0.04%)</title><rect x="784.0" y="659.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="787.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="784.8" y="659.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::PinnedIteratorsManager::~PinnedIteratorsManager() (2 samples, 0.03%)</title><rect x="785.2" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.03%)</title><rect x="785.5" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="788.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (2 samples, 0.03%)</title><rect x="785.9" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="788.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (653 samples, 9.68%)</title><rect x="786.4" y="659.0" width="114.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="789.4" y="670.0">rocksdb::Versi..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (11 samples, 0.16%)</title><rect x="791.5" y="643.0" width="1.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="794.5" y="654.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (3 samples, 0.04%)</title><rect x="792.2" y="627.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="795.2" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="793.1" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="796.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="793.1" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="796.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="793.1" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="796.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="793.4" y="643.0" width="0.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="796.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (3 samples, 0.04%)</title><rect x="794.5" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (2 samples, 0.03%)</title><rect x="795.0" y="643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="798.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (5 samples, 0.07%)</title><rect x="795.3" y="643.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="798.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::TableCache::Get(rocksdb::ReadOptions const&amp;, rocksdb::InternalKeyComparator const&amp;, rocksdb::FileMetaData const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, rocksdb::HistogramImpl*, bool, int, unsigned long) (595 samples, 8.82%)</title><rect x="796.4" y="643.0" width="104.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="799.4" y="654.0">rocksdb::Tab..</text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (3 samples, 0.04%)</title><rect x="798.6" y="627.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="801.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::GetContext*, rocksdb::SliceTransform const*, bool) (539 samples, 7.99%)</title><rect x="799.3" y="627.0" width="94.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="802.3" y="638.0">rocksdb::Bl..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (18 samples, 0.27%)</title><rect x="803.5" y="611.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="806.5" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="806.2" y="595.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="809.2" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="806.2" y="579.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="809.2" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="806.2" y="563.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="809.2" y="574.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.03%)</title><rect x="806.7" y="611.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="809.7" y="622.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (8 samples, 0.12%)</title><rect x="807.0" y="611.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="810.0" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="808.4" y="611.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="811.4" y="622.0"></text>
</g>
<g>
<title>cfree (7 samples, 0.10%)</title><rect x="809.0" y="611.0" width="1.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="812.0" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="809.8" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="812.8" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="809.8" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="812.8" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="809.8" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="812.8" y="574.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.04%)</title><rect x="810.2" y="611.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="813.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::BinarySearchIndexReader::NewIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) (18 samples, 0.27%)</title><rect x="810.7" y="611.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::Block::NewIndexIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::IndexBlockIter*, rocksdb::Statistics*, bool, bool, bool, bool, bool, rocksdb::BlockPrefixIndex*) (7 samples, 0.10%)</title><rect x="811.9" y="595.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="814.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (4 samples, 0.06%)</title><rect x="813.2" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="816.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::FullFilterKeyMayMatch(rocksdb::ReadOptions const&amp;, rocksdb::FilterBlockReader*, rocksdb::Slice const&amp;, bool, rocksdb::SliceTransform const*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (4 samples, 0.06%)</title><rect x="814.0" y="611.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="817.0" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::IndexReaderCommon::GetOrReadIndexBlock(bool, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*) const (5 samples, 0.07%)</title><rect x="814.7" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="817.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (7 samples, 0.10%)</title><rect x="815.8" y="611.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="818.8" y="622.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (3 samples, 0.04%)</title><rect x="817.4" y="611.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="820.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (3 samples, 0.04%)</title><rect x="817.9" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (150 samples, 2.22%)</title><rect x="818.4" y="611.0" width="26.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="821.4" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::InitBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::BlockBasedTable::Rep const*, rocksdb::Block*, rocksdb::BlockType, rocksdb::DataBlockIter*, bool) (6 samples, 0.09%)</title><rect x="820.9" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="823.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::Block::NewDataIterator(rocksdb::Comparator const*, rocksdb::Comparator const*, unsigned long, rocksdb::DataBlockIter*, rocksdb::Statistics*, bool) (4 samples, 0.06%)</title><rect x="821.2" y="579.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="824.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (6 samples, 0.09%)</title><rect x="821.9" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (123 samples, 1.82%)</title><rect x="823.0" y="595.0" width="21.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="826.0" y="606.0">r..</text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::BlockContents*) const (121 samples, 1.79%)</title><rect x="823.1" y="579.0" width="21.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="826.1" y="590.0">r..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="824.5" y="563.0" width="0.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="827.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetCacheKey(char const*, unsigned long, rocksdb::BlockHandle const&amp;, char*) (4 samples, 0.06%)</title><rect x="825.2" y="563.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (2 samples, 0.03%)</title><rect x="825.9" y="563.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="828.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockFetcher::ReadBlockContents() (2 samples, 0.03%)</title><rect x="826.3" y="563.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="829.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContents(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (2 samples, 0.03%)</title><rect x="826.3" y="547.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="829.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::UncompressBlockContentsForCompressionType(rocksdb::UncompressionInfo const&amp;, char const*, unsigned long, rocksdb::BlockContents*, unsigned int, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MemoryAllocator*) (2 samples, 0.03%)</title><rect x="826.3" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="829.3" y="542.0"></text>
</g>
<g>
<title>snappy::RawUncompress(char const*, unsigned long, char*) (2 samples, 0.03%)</title><rect x="826.3" y="515.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="829.3" y="526.0"></text>
</g>
<g>
<title>snappy::RawUncompress(snappy::Source*, char*) (2 samples, 0.03%)</title><rect x="826.3" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="829.3" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="826.3" y="483.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="829.3" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="826.3" y="467.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="829.3" y="478.0"></text>
</g>
<g>
<title>void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt;(snappy::SnappyArrayWriter*) (2 samples, 0.03%)</title><rect x="826.3" y="451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="829.3" y="462.0"></text>
</g>
<g>
<title>rocksdb::CachableEntry&lt;rocksdb::Block&gt;::ReleaseResource() (4 samples, 0.06%)</title><rect x="826.6" y="563.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="829.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::GetDataBlockFromCache&lt;rocksdb::Block&gt;(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::Cache*, rocksdb::Cache*, rocksdb::ReadOptions const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::UncompressionDict const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (96 samples, 1.42%)</title><rect x="827.5" y="563.0" width="16.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="830.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::GetEntryFromCache(rocksdb::Cache*, rocksdb::Slice const&amp;, rocksdb::BlockType, rocksdb::GetContext*) const (79 samples, 1.17%)</title><rect x="829.1" y="547.0" width="13.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="832.1" y="558.0"></text>
</g>
<g>
<title>ROCKSDB_XXH3p_64bits (6 samples, 0.09%)</title><rect x="829.4" y="531.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="832.4" y="542.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="830.5" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (11 samples, 0.16%)</title><rect x="831.2" y="531.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="834.2" y="542.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (36 samples, 0.53%)</title><rect x="833.3" y="531.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.3" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.06%)</title><rect x="833.3" y="515.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="836.3" y="526.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="833.3" y="499.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="836.3" y="510.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="833.3" y="483.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="836.3" y="494.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.06%)</title><rect x="833.3" y="467.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="836.3" y="478.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="833.3" y="451.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="836.3" y="462.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="833.3" y="435.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="836.3" y="446.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.04%)</title><rect x="833.3" y="419.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="836.3" y="430.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.04%)</title><rect x="833.3" y="403.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="836.3" y="414.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="833.3" y="387.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="836.3" y="398.0"></text>
</g>
<g>
<title>malloc_usable_size (2 samples, 0.03%)</title><rect x="834.0" y="515.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="837.0" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="834.3" y="515.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="837.3" y="526.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="835.2" y="515.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="838.2" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::LRU_Remove(rocksdb::LRUHandle*) (7 samples, 0.10%)</title><rect x="835.7" y="515.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="838.7" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (14 samples, 0.21%)</title><rect x="837.1" y="515.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.1" y="526.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::FindPointer(rocksdb::Slice const&amp;, unsigned int) (14 samples, 0.21%)</title><rect x="837.1" y="499.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="840.1" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="839.2" y="483.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="842.2" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="839.2" y="467.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="842.2" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="839.2" y="451.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="842.2" y="462.0"></text>
</g>
<g>
<title>rocksdb::LRUHandleTable::Lookup(rocksdb::Slice const&amp;, unsigned int) (4 samples, 0.06%)</title><rect x="839.6" y="531.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="842.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Lookup(rocksdb::Slice const&amp;, rocksdb::Statistics*) (6 samples, 0.09%)</title><rect x="840.3" y="531.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (7 samples, 0.10%)</title><rect x="841.3" y="531.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="844.3" y="542.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="842.5" y="531.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="845.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::UpdateCacheHitMetrics(rocksdb::BlockType, rocksdb::GetContext*, unsigned long) const (3 samples, 0.04%)</title><rect x="842.9" y="547.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="845.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::LRUCacheShard::Lookup(rocksdb::Slice const&amp;, unsigned int) (2 samples, 0.03%)</title><rect x="843.4" y="547.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="846.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::GetUsage(rocksdb::Cache::Handle*) const (2 samples, 0.03%)</title><rect x="843.8" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="846.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) (133 samples, 1.97%)</title><rect x="844.6" y="611.0" width="23.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.6" y="622.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (4 samples, 0.06%)</title><rect x="848.8" y="595.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="851.8" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.07%)</title><rect x="849.7" y="595.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="852.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::BlockIter&lt;rocksdb::Slice&gt;::FindKeyAfterBinarySeek(rocksdb::Slice const&amp;, unsigned int, bool, rocksdb::Comparator const*) (74 samples, 1.10%)</title><rect x="850.6" y="595.0" width="12.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="853.6" y="606.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="851.3" y="579.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="854.3" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.10%)</title><rect x="851.6" y="579.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="854.6" y="590.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="852.9" y="579.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="855.9" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (14 samples, 0.21%)</title><rect x="853.2" y="579.0" width="2.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="856.2" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="855.0" y="563.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="858.0" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="855.0" y="547.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="858.0" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="855.0" y="531.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="858.0" y="542.0"></text>
</g>
<g>
<title>memcpy (6 samples, 0.09%)</title><rect x="855.7" y="579.0" width="1.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="858.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (13 samples, 0.19%)</title><rect x="856.7" y="579.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="859.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (24 samples, 0.36%)</title><rect x="859.0" y="579.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.0" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (13 samples, 0.19%)</title><rect x="859.7" y="563.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="862.7" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="862.1" y="563.0" width="0.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="865.1" y="574.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="863.2" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="866.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="863.2" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="866.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="863.2" y="547.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="866.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Next() (11 samples, 0.16%)</title><rect x="863.5" y="595.0" width="1.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="866.5" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="865.1" y="579.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="868.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="865.1" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="868.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="865.1" y="547.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="868.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::InternalKeyComparator::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (14 samples, 0.21%)</title><rect x="865.4" y="595.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="868.4" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.09%)</title><rect x="866.0" y="579.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="869.0" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="867.5" y="579.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="870.5" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="867.5" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="870.5" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="867.5" y="547.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="870.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::~DataBlockIter() (2 samples, 0.03%)</title><rect x="867.9" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="870.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::GetContext::SaveValue(rocksdb::ParsedInternalKey const&amp;, rocksdb::Slice const&amp;, bool*, rocksdb::Cleanable*) (11 samples, 0.16%)</title><rect x="868.2" y="611.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="871.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (126 samples, 1.87%)</title><rect x="870.2" y="611.0" width="22.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="873.2" y="622.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (4 samples, 0.06%)</title><rect x="879.6" y="595.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="882.6" y="606.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (14 samples, 0.21%)</title><rect x="880.3" y="595.0" width="2.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="883.3" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="882.8" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="885.8" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (19 samples, 0.28%)</title><rect x="883.3" y="595.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="886.3" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="886.1" y="579.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="889.1" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="886.1" y="563.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="889.1" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="886.1" y="547.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="889.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (10 samples, 0.15%)</title><rect x="887.0" y="595.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="890.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::GetVarint64Ptr(char const*, char const*, unsigned long*) (8 samples, 0.12%)</title><rect x="887.3" y="579.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="890.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (13 samples, 0.19%)</title><rect x="888.7" y="595.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="891.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (10 samples, 0.15%)</title><rect x="888.9" y="579.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="891.9" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="890.6" y="579.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="893.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.10%)</title><rect x="891.0" y="595.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="894.0" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 0.10%)</title><rect x="891.0" y="579.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="894.0" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.10%)</title><rect x="891.0" y="563.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="894.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::IndexValue::DecodeFrom(rocksdb::Slice*, bool, rocksdb::BlockHandle const*) (3 samples, 0.04%)</title><rect x="892.2" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="895.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry&lt;rocksdb::Block&gt;*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, bool, bool) const (2 samples, 0.03%)</title><rect x="892.7" y="611.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::UserComparatorWrapper::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const (3 samples, 0.04%)</title><rect x="893.1" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="896.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewIndexIterator(rocksdb::ReadOptions const&amp;, bool, rocksdb::IndexBlockIter*, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*) const (5 samples, 0.07%)</title><rect x="893.6" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="896.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;) (7 samples, 0.10%)</title><rect x="894.5" y="627.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="897.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::BlockCacheLookupContext::~BlockCacheLookupContext() (6 samples, 0.09%)</title><rect x="895.7" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="898.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (2 samples, 0.03%)</title><rect x="896.9" y="627.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="899.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt;(rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::DataBlockIter*, rocksdb::BlockType, rocksdb::GetContext*, rocksdb::BlockCacheLookupContext*, rocksdb::Status, rocksdb::FilePrefetchBuffer*, bool) const (2 samples, 0.03%)</title><rect x="897.3" y="627.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::DataBlockIter::Seek(rocksdb::Slice const&amp;) [clone .plt] (4 samples, 0.06%)</title><rect x="897.8" y="627.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="900.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::Seek(rocksdb::Slice const&amp;) (3 samples, 0.04%)</title><rect x="899.0" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="902.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::IndexBlockIter::~IndexBlockIter() (2 samples, 0.03%)</title><rect x="899.5" y="627.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="902.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (3 samples, 0.04%)</title><rect x="899.9" y="627.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::Version::IsFilterSkipped(int, bool) (7 samples, 0.10%)</title><rect x="900.6" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="903.6" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="901.8" y="659.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="904.8" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="901.8" y="643.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="904.8" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="901.8" y="627.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="904.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (2 samples, 0.03%)</title><rect x="902.2" y="675.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="905.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (3 samples, 0.04%)</title><rect x="902.5" y="675.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="905.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (6 samples, 0.09%)</title><rect x="903.0" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="906.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.03%)</title><rect x="904.1" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="907.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.06%)</title><rect x="904.4" y="675.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="907.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (2 samples, 0.03%)</title><rect x="905.1" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="908.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (2 samples, 0.03%)</title><rect x="905.7" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="908.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::ShardedCache::Release(rocksdb::Cache::Handle*, bool) (2 samples, 0.03%)</title><rect x="906.0" y="707.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="909.0" y="718.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (5 samples, 0.07%)</title><rect x="906.5" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="909.5" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (4 samples, 0.06%)</title><rect x="907.4" y="739.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="910.4" y="750.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (53 samples, 0.79%)</title><rect x="908.1" y="739.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.1" y="750.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.03%)</title><rect x="908.6" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="911.6" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (40 samples, 0.59%)</title><rect x="909.3" y="723.0" width="7.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="912.3" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)</title><rect x="910.2" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="913.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.06%)</title><rect x="910.6" y="707.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.6" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (28 samples, 0.41%)</title><rect x="911.3" y="707.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="914.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (24 samples, 0.36%)</title><rect x="911.8" y="691.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="914.8" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.22%)</title><rect x="912.0" y="675.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="915.0" y="686.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.07%)</title><rect x="912.7" y="659.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="915.7" y="670.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="913.7" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.7" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="913.9" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.9" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="913.9" y="627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="913.9" y="611.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="916.9" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="914.6" y="675.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="917.6" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="915.1" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.1" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="915.5" y="675.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="918.5" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.09%)</title><rect x="916.3" y="723.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="919.3" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.06%)</title><rect x="916.7" y="707.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="919.7" y="718.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="917.7" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="920.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="918.1" y="771.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="921.1" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="918.1" y="755.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="921.1" y="766.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="918.4" y="755.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="921.4" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (22 samples, 0.33%)</title><rect x="918.8" y="771.0" width="3.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="921.8" y="782.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (3 samples, 0.04%)</title><rect x="922.8" y="771.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="925.8" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.03%)</title><rect x="923.3" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="926.3" y="782.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="923.7" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="926.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (12 samples, 0.18%)</title><rect x="924.0" y="803.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="927.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (10 samples, 0.15%)</title><rect x="924.4" y="787.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.4" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.07%)</title><rect x="925.3" y="771.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.07%)</title><rect x="925.3" y="755.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="928.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="925.4" y="739.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="928.4" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="925.4" y="723.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="928.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.06%)</title><rect x="925.4" y="707.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="928.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (6 samples, 0.09%)</title><rect x="926.1" y="819.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="929.1" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.06%)</title><rect x="926.5" y="803.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="929.5" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="926.5" y="787.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="929.5" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="926.5" y="771.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="929.5" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="926.5" y="755.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="929.5" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,484 samples, 21.99%)</title><rect x="927.2" y="915.0" width="259.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="930.2" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="928.2" y="899.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="931.2" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (2 samples, 0.03%)</title><rect x="928.9" y="899.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="931.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.12%)</title><rect x="929.3" y="899.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="932.3" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.12%)</title><rect x="929.3" y="883.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="932.3" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (8 samples, 0.12%)</title><rect x="929.3" y="867.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="932.3" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (468 samples, 6.94%)</title><rect x="930.7" y="899.0" width="81.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="933.7" y="910.0">one/nio/n..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="932.8" y="883.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="935.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="932.8" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="935.8" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="932.8" y="851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="935.8" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="932.8" y="835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (454 samples, 6.73%)</title><rect x="933.1" y="883.0" width="79.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="936.1" y="894.0">one/nio/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="935.4" y="867.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="938.4" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (4 samples, 0.06%)</title><rect x="936.1" y="867.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="939.1" y="878.0"></text>
</g>
<g>
<title>clock_gettime (14 samples, 0.21%)</title><rect x="936.8" y="867.0" width="2.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="939.8" y="878.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.09%)</title><rect x="938.2" y="851.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="941.2" y="862.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.09%)</title><rect x="938.2" y="835.0" width="1.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="941.2" y="846.0"></text>
</g>
<g>
<title>epoll_wait (419 samples, 6.21%)</title><rect x="939.2" y="867.0" width="73.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="942.2" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (406 samples, 6.02%)</title><rect x="941.3" y="851.0" width="71.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="944.3" y="862.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.03%)</title><rect x="941.3" y="835.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="944.3" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (404 samples, 5.99%)</title><rect x="941.7" y="835.0" width="70.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="944.7" y="846.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (397 samples, 5.88%)</title><rect x="942.9" y="819.0" width="69.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="945.9" y="830.0">__x64_s..</text>
</g>
<g>
<title>do_epoll_wait (396 samples, 5.87%)</title><rect x="942.9" y="803.0" width="69.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="945.9" y="814.0">do_epol..</text>
</g>
<g>
<title>__fdget (7 samples, 0.10%)</title><rect x="944.0" y="787.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="947.0" y="798.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.10%)</title><rect x="944.0" y="771.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="947.0" y="782.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.10%)</title><rect x="944.0" y="755.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="947.0" y="766.0"></text>
</g>
<g>
<title>ep_poll (380 samples, 5.63%)</title><rect x="945.4" y="787.0" width="66.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="948.4" y="798.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (50 samples, 0.74%)</title><rect x="947.1" y="771.0" width="8.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="950.1" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (42 samples, 0.62%)</title><rect x="948.2" y="755.0" width="7.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="951.2" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (32 samples, 0.47%)</title><rect x="949.4" y="739.0" width="5.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="952.4" y="750.0"></text>
</g>
<g>
<title>sock_poll (23 samples, 0.34%)</title><rect x="950.6" y="723.0" width="4.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="953.6" y="734.0"></text>
</g>
<g>
<title>tcp_poll (11 samples, 0.16%)</title><rect x="952.2" y="707.0" width="1.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="955.2" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.04%)</title><rect x="954.1" y="707.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="957.1" y="718.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.03%)</title><rect x="954.6" y="723.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="957.6" y="734.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.04%)</title><rect x="955.0" y="739.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="958.0" y="750.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.03%)</title><rect x="955.5" y="755.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="958.5" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.04%)</title><rect x="955.9" y="771.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="958.9" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (314 samples, 4.65%)</title><rect x="956.4" y="771.0" width="54.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="959.4" y="782.0">sched..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (313 samples, 4.64%)</title><rect x="956.6" y="755.0" width="54.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="959.6" y="766.0">sched..</text>
</g>
<g>
<title>schedule (312 samples, 4.62%)</title><rect x="956.7" y="739.0" width="54.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="959.7" y="750.0">sched..</text>
</g>
<g>
<title>__sched_text_start (310 samples, 4.59%)</title><rect x="957.1" y="723.0" width="54.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="960.1" y="734.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (286 samples, 4.24%)</title><rect x="961.3" y="707.0" width="50.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.3" y="718.0">finis..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.04%)</title><rect x="1011.3" y="771.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1014.3" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.03%)</title><rect x="1011.8" y="787.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1014.8" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (985 samples, 14.60%)</title><rect x="1012.5" y="899.0" width="172.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1015.5" y="910.0">one/nio/net/Session.pr..</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (2 samples, 0.03%)</title><rect x="1015.1" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1018.1" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (967 samples, 14.33%)</title><rect x="1015.7" y="883.0" width="169.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1018.7" y="894.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (676 samples, 10.02%)</title><rect x="1015.8" y="867.0" width="118.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1018.8" y="878.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (549 samples, 8.14%)</title><rect x="1019.7" y="851.0" width="96.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1022.7" y="862.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (13 samples, 0.19%)</title><rect x="1021.8" y="835.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1024.8" y="846.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.07%)</title><rect x="1024.1" y="835.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1027.1" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1024.9" y="835.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1027.9" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (515 samples, 7.63%)</title><rect x="1025.6" y="835.0" width="90.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.6" y="846.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (496 samples, 7.35%)</title><rect x="1025.6" y="819.0" width="86.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.6" y="830.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (48 samples, 0.71%)</title><rect x="1025.8" y="803.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1028.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (43 samples, 0.64%)</title><rect x="1026.7" y="787.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1029.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.04%)</title><rect x="1028.6" y="771.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title><rect x="1028.6" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1031.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (21 samples, 0.31%)</title><rect x="1029.1" y="771.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1032.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (21 samples, 0.31%)</title><rect x="1029.1" y="755.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="1030.0" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1030.0" y="723.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.0" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1030.0" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1033.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1030.0" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1033.0" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1030.0" y="675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.0" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1030.0" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1033.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1030.0" y="643.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1033.0" y="654.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (14 samples, 0.21%)</title><rect x="1030.3" y="739.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1033.3" y="750.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.04%)</title><rect x="1032.8" y="771.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1035.8" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="1033.3" y="771.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1036.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="1033.8" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1036.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1033.8" y="755.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1036.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1033.8" y="739.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1033.8" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1036.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.entity (447 samples, 6.62%)</title><rect x="1034.2" y="803.0" width="78.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1037.2" y="814.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.getBytes (30 samples, 0.44%)</title><rect x="1034.7" y="787.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1037.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (30 samples, 0.44%)</title><rect x="1034.7" y="771.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1037.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (30 samples, 0.44%)</title><rect x="1034.7" y="755.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1037.7" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 0.31%)</title><rect x="1035.1" y="739.0" width="3.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1038.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.04%)</title><rect x="1037.0" y="723.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.0" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1037.0" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.0" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1037.0" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.0" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="1037.0" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.0" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="1037.0" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1040.0" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="1037.0" y="643.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (7 samples, 0.10%)</title><rect x="1037.5" y="723.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.5" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.10%)</title><rect x="1038.7" y="739.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1041.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="1040.0" y="787.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1043.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4 samples, 0.06%)</title><rect x="1040.0" y="771.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1040.1" y="755.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1040.1" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1043.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1040.1" y="723.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1040.1" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1043.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.isMe (3 samples, 0.04%)</title><rect x="1040.7" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1043.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.isMe (3 samples, 0.04%)</title><rect x="1040.7" y="771.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.7" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (3 samples, 0.04%)</title><rect x="1040.7" y="755.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1043.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="1040.8" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1043.8" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncGet (253 samples, 3.75%)</title><rect x="1041.2" y="787.0" width="44.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.2" y="798.0">ru/m..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (252 samples, 3.73%)</title><rect x="1041.4" y="771.0" width="44.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1044.4" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (252 samples, 3.73%)</title><rect x="1041.4" y="755.0" width="44.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1044.4" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (11 samples, 0.16%)</title><rect x="1043.5" y="739.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (11 samples, 0.16%)</title><rect x="1043.5" y="723.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1046.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 0.16%)</title><rect x="1043.5" y="707.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.16%)</title><rect x="1043.5" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1046.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.16%)</title><rect x="1043.5" y="675.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1046.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.06%)</title><rect x="1045.4" y="739.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.06%)</title><rect x="1045.4" y="723.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.06%)</title><rect x="1045.4" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.06%)</title><rect x="1045.4" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1048.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.06%)</title><rect x="1045.4" y="675.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.4" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.06%)</title><rect x="1045.4" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.4" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="1045.4" y="643.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1048.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="1045.7" y="643.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1048.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (225 samples, 3.33%)</title><rect x="1046.1" y="739.0" width="39.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1049.1" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (225 samples, 3.33%)</title><rect x="1046.1" y="723.0" width="39.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1049.1" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (225 samples, 3.33%)</title><rect x="1046.1" y="707.0" width="39.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1049.1" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (225 samples, 3.33%)</title><rect x="1046.1" y="691.0" width="39.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1049.1" y="702.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (220 samples, 3.26%)</title><rect x="1047.0" y="675.0" width="38.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1050.0" y="686.0">jdk..</text>
</g>
<g>
<title>Unsafe_Unpark (18 samples, 0.27%)</title><rect x="1047.0" y="659.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1050.0" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (5 samples, 0.07%)</title><rect x="1047.5" y="643.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.5" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.06%)</title><rect x="1048.4" y="643.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.4" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.07%)</title><rect x="1049.2" y="643.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1052.2" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (197 samples, 2.92%)</title><rect x="1050.1" y="659.0" width="34.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1053.1" y="670.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (196 samples, 2.90%)</title><rect x="1050.3" y="643.0" width="34.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1053.3" y="654.0">en..</text>
</g>
<g>
<title>do_syscall_64 (195 samples, 2.89%)</title><rect x="1050.5" y="627.0" width="34.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1053.5" y="638.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (194 samples, 2.87%)</title><rect x="1050.6" y="611.0" width="34.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1053.6" y="622.0">__..</text>
</g>
<g>
<title>do_futex (194 samples, 2.87%)</title><rect x="1050.6" y="595.0" width="34.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1053.6" y="606.0">do..</text>
</g>
<g>
<title>futex_wake (190 samples, 2.82%)</title><rect x="1051.0" y="579.0" width="33.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1054.0" y="590.0">fu..</text>
</g>
<g>
<title>wake_up_q (175 samples, 2.59%)</title><rect x="1053.6" y="563.0" width="30.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1056.6" y="574.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (175 samples, 2.59%)</title><rect x="1053.6" y="547.0" width="30.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1056.6" y="558.0">tr..</text>
</g>
<g>
<title>__lock_text_start (174 samples, 2.58%)</title><rect x="1053.8" y="531.0" width="30.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1056.8" y="542.0">__..</text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="1084.6" y="659.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1087.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncPut (7 samples, 0.10%)</title><rect x="1085.4" y="787.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1088.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (119 samples, 1.76%)</title><rect x="1086.7" y="787.0" width="20.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1089.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (10 samples, 0.15%)</title><rect x="1087.5" y="771.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1090.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (10 samples, 0.15%)</title><rect x="1087.5" y="755.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1090.5" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (9 samples, 0.13%)</title><rect x="1087.7" y="739.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1090.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.13%)</title><rect x="1087.7" y="723.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1090.7" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1088.9" y="707.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1091.9" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1088.9" y="691.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1088.9" y="675.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.9" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1088.9" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.9" y="670.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1088.9" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.9" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1088.9" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.identifyByKey (104 samples, 1.54%)</title><rect x="1089.3" y="771.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1092.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.identifyByKey (104 samples, 1.54%)</title><rect x="1089.3" y="755.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1092.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1093.6" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.6" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1093.6" y="723.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1096.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1093.6" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1093.6" y="691.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHasher.putBytes (21 samples, 0.31%)</title><rect x="1094.2" y="739.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1097.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction$Murmur3_32Hasher.putBytes (21 samples, 0.31%)</title><rect x="1094.2" y="723.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1097.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (15 samples, 0.22%)</title><rect x="1097.8" y="739.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1100.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1100.1" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1100.1" y="707.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1100.1" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1100.1" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1100.1" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.1" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1100.1" y="643.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.1" y="654.0"></text>
</g>
<g>
<title>java/util/TreeMap.firstEntry (2 samples, 0.03%)</title><rect x="1100.5" y="739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1103.5" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (2 samples, 0.03%)</title><rect x="1100.5" y="723.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1103.5" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (38 samples, 0.56%)</title><rect x="1100.8" y="739.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1103.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.06%)</title><rect x="1103.3" y="723.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.3" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.06%)</title><rect x="1103.3" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.06%)</title><rect x="1103.3" y="691.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="1103.3" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.3" y="686.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="1103.3" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (6 samples, 0.09%)</title><rect x="1104.0" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1107.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (6 samples, 0.09%)</title><rect x="1104.0" y="707.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1107.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (6 samples, 0.09%)</title><rect x="1104.0" y="691.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.0" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (13 samples, 0.19%)</title><rect x="1105.2" y="723.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1108.2" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.rotateRight (2 samples, 0.03%)</title><rect x="1106.9" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1109.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (28 samples, 0.41%)</title><rect x="1107.5" y="787.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1110.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (28 samples, 0.41%)</title><rect x="1107.5" y="771.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1110.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (28 samples, 0.41%)</title><rect x="1107.5" y="755.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1110.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (2 samples, 0.03%)</title><rect x="1109.0" y="739.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="1109.0" y="723.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1112.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="1109.0" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1112.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="1109.0" y="691.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1112.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.03%)</title><rect x="1109.0" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 0.24%)</title><rect x="1109.6" y="739.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1112.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 0.24%)</title><rect x="1109.6" y="723.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1112.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 0.24%)</title><rect x="1109.6" y="707.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1112.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 0.24%)</title><rect x="1109.6" y="691.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.6" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (12 samples, 0.18%)</title><rect x="1110.3" y="675.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1113.3" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (12 samples, 0.18%)</title><rect x="1110.3" y="659.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1113.3" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.18%)</title><rect x="1110.3" y="643.0" width="2.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1113.3" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 0.18%)</title><rect x="1110.3" y="627.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1113.3" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (12 samples, 0.18%)</title><rect x="1110.3" y="611.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1113.3" y="622.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.16%)</title><rect x="1110.3" y="595.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1113.3" y="606.0"></text>
</g>
<g>
<title>futex_wake (11 samples, 0.16%)</title><rect x="1110.3" y="579.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1113.3" y="590.0"></text>
</g>
<g>
<title>wake_up_q (11 samples, 0.16%)</title><rect x="1110.3" y="563.0" width="1.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1113.3" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (11 samples, 0.16%)</title><rect x="1110.3" y="547.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1113.3" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (11 samples, 0.16%)</title><rect x="1110.3" y="531.0" width="1.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1113.3" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.06%)</title><rect x="1112.4" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1115.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (12 samples, 0.18%)</title><rect x="1113.1" y="819.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1116.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.18%)</title><rect x="1113.1" y="803.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1116.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.07%)</title><rect x="1113.1" y="787.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="1113.2" y="771.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1116.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.10%)</title><rect x="1113.9" y="787.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.09%)</title><rect x="1114.1" y="771.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.07%)</title><rect x="1114.3" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1117.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (3 samples, 0.04%)</title><rect x="1115.2" y="819.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1118.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1115.2" y="803.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1118.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="1115.2" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1118.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1115.2" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (59 samples, 0.87%)</title><rect x="1115.7" y="851.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1118.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title><rect x="1117.4" y="835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1120.4" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1117.6" y="819.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1120.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1117.6" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1120.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1117.6" y="787.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1120.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.43%)</title><rect x="1118.0" y="835.0" width="5.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1121.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.43%)</title><rect x="1118.0" y="819.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1121.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.09%)</title><rect x="1121.6" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.09%)</title><rect x="1121.6" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.07%)</title><rect x="1121.6" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.07%)</title><rect x="1121.6" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.6" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1122.2" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1122.7" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1122.7" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1122.7" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1122.7" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1122.7" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1122.7" y="723.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1122.7" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.7" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1122.7" y="691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1122.7" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="1122.7" y="659.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="1122.7" y="643.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.7" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (17 samples, 0.25%)</title><rect x="1123.0" y="835.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1126.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.04%)</title><rect x="1125.5" y="819.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1128.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (21 samples, 0.31%)</title><rect x="1126.0" y="851.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1129.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="1129.3" y="835.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1132.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="1129.3" y="819.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.37%)</title><rect x="1129.7" y="851.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1132.7" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (25 samples, 0.37%)</title><rect x="1129.7" y="835.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1132.7" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.04%)</title><rect x="1132.1" y="819.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.1" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1132.1" y="803.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.04%)</title><rect x="1132.1" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="1132.1" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.1" y="782.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="1132.3" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="1132.6" y="819.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.6" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.04%)</title><rect x="1132.6" y="803.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.6" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1132.8" y="787.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.8" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1132.8" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1133.3" y="819.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1136.3" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.06%)</title><rect x="1133.3" y="803.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.06%)</title><rect x="1133.3" y="787.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1136.3" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1133.3" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.3" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1133.3" y="755.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.3" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1133.3" y="739.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.03%)</title><rect x="1133.7" y="771.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1136.7" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="1133.7" y="755.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1136.7" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="1133.7" y="739.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1136.7" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="1133.7" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1136.7" y="734.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="1133.7" y="707.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1136.7" y="718.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="1133.7" y="691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1136.7" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.03%)</title><rect x="1134.0" y="867.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1137.0" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (288 samples, 4.27%)</title><rect x="1134.4" y="867.0" width="50.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1137.4" y="878.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (282 samples, 4.18%)</title><rect x="1135.4" y="851.0" width="49.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1138.4" y="862.0">one/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="1137.0" y="835.0" width="0.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1140.0" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (84 samples, 1.24%)</title><rect x="1137.5" y="835.0" width="14.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1140.5" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.07%)</title><rect x="1138.6" y="819.0" width="0.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1141.6" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (7 samples, 0.10%)</title><rect x="1139.5" y="819.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.5" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1140.7" y="819.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.7" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (58 samples, 0.86%)</title><rect x="1141.4" y="819.0" width="10.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1144.4" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1143.5" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.5" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (10 samples, 0.15%)</title><rect x="1143.8" y="803.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.8" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (34 samples, 0.50%)</title><rect x="1145.6" y="803.0" width="5.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1148.6" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.06%)</title><rect x="1151.5" y="819.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.5" y="830.0"></text>
</g>
<g>
<title>__recv (182 samples, 2.70%)</title><rect x="1152.2" y="835.0" width="31.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1155.2" y="846.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (171 samples, 2.53%)</title><rect x="1154.2" y="819.0" width="29.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1157.2" y="830.0">en..</text>
</g>
<g>
<title>__x64_sys_recvfrom (5 samples, 0.07%)</title><rect x="1154.2" y="803.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1157.2" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (166 samples, 2.46%)</title><rect x="1155.0" y="803.0" width="29.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1158.0" y="814.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (161 samples, 2.39%)</title><rect x="1155.7" y="787.0" width="28.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1158.7" y="798.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (158 samples, 2.34%)</title><rect x="1155.7" y="771.0" width="27.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1158.7" y="782.0">_..</text>
</g>
<g>
<title>sock_recvmsg (136 samples, 2.02%)</title><rect x="1156.8" y="755.0" width="23.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1159.8" y="766.0">s..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.04%)</title><rect x="1157.1" y="739.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1160.1" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (111 samples, 1.64%)</title><rect x="1157.6" y="739.0" width="19.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1160.6" y="750.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.03%)</title><rect x="1158.5" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1161.5" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (103 samples, 1.53%)</title><rect x="1159.0" y="723.0" width="18.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1162.0" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (14 samples, 0.21%)</title><rect x="1161.8" y="707.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1164.8" y="718.0"></text>
</g>
<g>
<title>skb_release_all (14 samples, 0.21%)</title><rect x="1161.8" y="691.0" width="2.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1164.8" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (7 samples, 0.10%)</title><rect x="1162.0" y="675.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1165.0" y="686.0"></text>
</g>
<g>
<title>dst_release (7 samples, 0.10%)</title><rect x="1162.0" y="659.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1165.0" y="670.0"></text>
</g>
<g>
<title>sock_rfree (6 samples, 0.09%)</title><rect x="1163.2" y="675.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="1164.6" y="707.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.09%)</title><rect x="1165.0" y="707.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1168.0" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.06%)</title><rect x="1165.3" y="691.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1168.3" y="702.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (4 samples, 0.06%)</title><rect x="1165.3" y="675.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1168.3" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (49 samples, 0.73%)</title><rect x="1166.0" y="707.0" width="8.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1169.0" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (48 samples, 0.71%)</title><rect x="1166.2" y="691.0" width="8.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1169.2" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (29 samples, 0.43%)</title><rect x="1169.5" y="675.0" width="5.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1172.5" y="686.0"></text>
</g>
<g>
<title>__check_object_size (21 samples, 0.31%)</title><rect x="1169.5" y="659.0" width="3.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (6 samples, 0.09%)</title><rect x="1172.2" y="643.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.07%)</title><rect x="1173.2" y="659.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1176.2" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.04%)</title><rect x="1173.6" y="643.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1176.6" y="654.0"></text>
</g>
<g>
<title>check_stack_object (3 samples, 0.04%)</title><rect x="1174.1" y="659.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.10%)</title><rect x="1174.8" y="707.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.8" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.03%)</title><rect x="1176.2" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="1176.2" y="691.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1179.2" y="702.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="1176.2" y="675.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="1176.5" y="707.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.5" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (20 samples, 0.30%)</title><rect x="1177.1" y="739.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (19 samples, 0.28%)</title><rect x="1177.2" y="723.0" width="3.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1180.2" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (19 samples, 0.28%)</title><rect x="1177.2" y="707.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1180.2" y="718.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (8 samples, 0.12%)</title><rect x="1179.2" y="691.0" width="1.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1182.2" y="702.0"></text>
</g>
<g>
<title>aa_profile_af_perm (7 samples, 0.10%)</title><rect x="1179.3" y="675.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (16 samples, 0.24%)</title><rect x="1180.6" y="755.0" width="2.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>__fdget (7 samples, 0.10%)</title><rect x="1180.6" y="739.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.09%)</title><rect x="1180.7" y="723.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.09%)</title><rect x="1180.7" y="707.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.13%)</title><rect x="1181.8" y="739.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.06%)</title><rect x="1184.1" y="835.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1187.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (11 samples, 0.16%)</title><rect x="1184.8" y="899.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="910.0"></text>
</g>
<g>
<title>gettimeofday (8 samples, 0.12%)</title><rect x="1185.3" y="883.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1188.3" y="894.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.12%)</title><rect x="1185.3" y="867.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.3" y="878.0"></text>
</g>
<g>
<title>start_thread (19 samples, 0.28%)</title><rect x="1186.7" y="915.0" width="3.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1189.7" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (19 samples, 0.28%)</title><rect x="1186.7" y="899.0" width="3.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1189.7" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (19 samples, 0.28%)</title><rect x="1186.7" y="883.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.7" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 0.24%)</title><rect x="1186.7" y="867.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.7" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 0.15%)</title><rect x="1186.9" y="851.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.07%)</title><rect x="1187.2" y="835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="846.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.07%)</title><rect x="1187.2" y="819.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1190.2" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.03%)</title><rect x="1188.6" y="851.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.03%)</title><rect x="1188.6" y="835.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (3 samples, 0.04%)</title><rect x="1189.0" y="851.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1192.0" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1189.0" y="835.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1192.0" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1189.0" y="819.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1192.0" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="1189.0" y="803.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1192.0" y="814.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="1189.0" y="787.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1192.0" y="798.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="1189.0" y="771.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1192.0" y="782.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.04%)</title><rect x="1189.0" y="755.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1192.0" y="766.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.04%)</title><rect x="1189.0" y="739.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1192.0" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="1189.0" y="723.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1192.0" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.04%)</title><rect x="1189.5" y="867.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.5" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.04%)</title><rect x="1189.5" y="851.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.03%)</title><rect x="1189.5" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
</g>
</svg>
