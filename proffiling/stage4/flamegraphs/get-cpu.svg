<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (6,515 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="10.0" y="899.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="867.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (35 samples, 0.54%)</title><rect x="10.7" y="899.0" width="6.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="13.7" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="10.9" y="883.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.9" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (30 samples, 0.46%)</title><rect x="11.3" y="883.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (30 samples, 0.46%)</title><rect x="11.3" y="867.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (13 samples, 0.20%)</title><rect x="11.6" y="851.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.6" y="862.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title><rect x="11.6" y="835.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.6" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.09%)</title><rect x="12.0" y="835.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.08%)</title><rect x="13.1" y="835.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="16.1" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (15 samples, 0.23%)</title><rect x="14.0" y="851.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.03%)</title><rect x="14.0" y="835.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.03%)</title><rect x="14.5" y="835.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.5" y="846.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (2 samples, 0.03%)</title><rect x="15.1" y="835.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="18.1" y="846.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (7 samples, 0.11%)</title><rect x="15.4" y="835.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.06%)</title><rect x="15.4" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="18.4" y="830.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.05%)</title><rect x="16.2" y="819.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="16.7" y="883.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="19.7" y="894.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="17.1" y="899.0" width="0.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.1" y="910.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2 samples, 0.03%)</title><rect x="17.4" y="883.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="20.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="17.4" y="867.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="20.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="17.4" y="851.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="20.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="17.4" y="835.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="20.4" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (13 samples, 0.20%)</title><rect x="17.8" y="899.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="20.8" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="18.2" y="883.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.2" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (4 samples, 0.06%)</title><rect x="18.7" y="883.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="21.7" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.06%)</title><rect x="19.4" y="883.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="22.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="19.4" y="867.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="22.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="19.4" y="851.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="22.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.06%)</title><rect x="19.4" y="835.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="22.4" y="846.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.06%)</title><rect x="19.4" y="819.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="22.4" y="830.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.06%)</title><rect x="19.4" y="803.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="22.4" y="814.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.05%)</title><rect x="19.6" y="787.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="22.6" y="798.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.05%)</title><rect x="19.6" y="771.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="22.6" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="19.6" y="755.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="22.6" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,935 samples, 75.75%)</title><rect x="20.1" y="899.0" width="893.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="23.1" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,935 samples, 75.75%)</title><rect x="20.1" y="883.0" width="893.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,935 samples, 75.75%)</title><rect x="20.1" y="867.0" width="893.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.1" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (32 samples, 0.49%)</title><rect x="20.1" y="851.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32 samples, 0.49%)</title><rect x="20.1" y="835.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="23.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (32 samples, 0.49%)</title><rect x="20.1" y="819.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="23.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (32 samples, 0.49%)</title><rect x="20.1" y="803.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="814.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.06%)</title><rect x="21.8" y="787.0" width="0.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="24.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$70/388576847.run (8 samples, 0.12%)</title><rect x="22.5" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="25.5" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$74/2003223169.run (11 samples, 0.17%)</title><rect x="23.9" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (522 samples, 8.01%)</title><rect x="25.9" y="851.0" width="94.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.9" y="862.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (492 samples, 7.55%)</title><rect x="31.0" y="835.0" width="89.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.0" y="846.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (3 samples, 0.05%)</title><rect x="31.7" y="819.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.05%)</title><rect x="31.7" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.05%)</title><rect x="31.7" y="787.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.05%)</title><rect x="31.7" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (260 samples, 3.99%)</title><rect x="32.3" y="819.0" width="47.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.3" y="830.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (15 samples, 0.23%)</title><rect x="32.8" y="803.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (15 samples, 0.23%)</title><rect x="32.8" y="787.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.06%)</title><rect x="32.8" y="771.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.8" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (10 samples, 0.15%)</title><rect x="33.7" y="771.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="36.7" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="35.2" y="755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (78 samples, 1.20%)</title><rect x="35.5" y="803.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 1.20%)</title><rect x="35.5" y="787.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 1.20%)</title><rect x="35.5" y="771.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (77 samples, 1.18%)</title><rect x="35.7" y="755.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (77 samples, 1.18%)</title><rect x="35.7" y="739.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="38.7" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (4 samples, 0.06%)</title><rect x="35.9" y="723.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="38.9" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="35.9" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="38.9" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="36.3" y="707.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="39.3" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (72 samples, 1.11%)</title><rect x="36.6" y="723.0" width="13.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="39.6" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (72 samples, 1.11%)</title><rect x="36.6" y="707.0" width="13.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="39.6" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (72 samples, 1.11%)</title><rect x="36.6" y="691.0" width="13.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="39.6" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (71 samples, 1.09%)</title><rect x="36.8" y="675.0" width="12.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="39.8" y="686.0"></text>
</g>
<g>
<title>do_futex (71 samples, 1.09%)</title><rect x="36.8" y="659.0" width="12.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="39.8" y="670.0"></text>
</g>
<g>
<title>futex_wake (71 samples, 1.09%)</title><rect x="36.8" y="643.0" width="12.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="39.8" y="654.0"></text>
</g>
<g>
<title>wake_up_q (67 samples, 1.03%)</title><rect x="37.5" y="627.0" width="12.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="40.5" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (67 samples, 1.03%)</title><rect x="37.5" y="611.0" width="12.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="40.5" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (67 samples, 1.03%)</title><rect x="37.5" y="595.0" width="12.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="40.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (163 samples, 2.50%)</title><rect x="49.8" y="803.0" width="29.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.8" y="814.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (163 samples, 2.50%)</title><rect x="49.8" y="787.0" width="29.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="52.8" y="798.0">jd..</text>
</g>
<g>
<title>Unsafe_Park (37 samples, 0.57%)</title><rect x="50.9" y="771.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="53.9" y="782.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.03%)</title><rect x="51.7" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="54.7" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.17%)</title><rect x="52.2" y="755.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="55.2" y="766.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title><rect x="53.5" y="739.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="56.5" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="53.8" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="56.8" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="54.4" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="57.4" y="766.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="54.7" y="755.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="57.7" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.09%)</title><rect x="55.1" y="755.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="58.1" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.08%)</title><rect x="55.3" y="739.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="58.3" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.08%)</title><rect x="55.3" y="723.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="58.3" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.08%)</title><rect x="55.3" y="707.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="58.3" y="718.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.08%)</title><rect x="55.3" y="691.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="58.3" y="702.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.08%)</title><rect x="55.3" y="675.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="58.3" y="686.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.05%)</title><rect x="55.6" y="659.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="58.6" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="56.2" y="755.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="59.2" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="56.5" y="755.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="59.5" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.05%)</title><rect x="57.1" y="755.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="60.1" y="766.0"></text>
</g>
<g>
<title>[unknown] (118 samples, 1.81%)</title><rect x="57.6" y="771.0" width="21.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="60.6" y="782.0">[..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="57.6" y="755.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="60.6" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (113 samples, 1.73%)</title><rect x="58.2" y="755.0" width="20.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="61.2" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (110 samples, 1.69%)</title><rect x="58.7" y="739.0" width="19.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="61.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (110 samples, 1.69%)</title><rect x="58.7" y="723.0" width="19.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="61.7" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (107 samples, 1.64%)</title><rect x="59.3" y="707.0" width="19.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="62.3" y="718.0"></text>
</g>
<g>
<title>do_futex (106 samples, 1.63%)</title><rect x="59.3" y="691.0" width="19.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="62.3" y="702.0"></text>
</g>
<g>
<title>futex_wait (104 samples, 1.60%)</title><rect x="59.4" y="675.0" width="18.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="62.4" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (95 samples, 1.46%)</title><rect x="59.8" y="659.0" width="17.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="62.8" y="670.0"></text>
</g>
<g>
<title>schedule (94 samples, 1.44%)</title><rect x="60.0" y="643.0" width="17.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="63.0" y="654.0"></text>
</g>
<g>
<title>__schedule (92 samples, 1.41%)</title><rect x="60.4" y="627.0" width="16.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="63.4" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (88 samples, 1.35%)</title><rect x="61.1" y="611.0" width="15.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="64.1" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (3 samples, 0.05%)</title><rect x="77.0" y="659.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="80.0" y="670.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.05%)</title><rect x="77.7" y="659.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="80.7" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title><rect x="79.0" y="771.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="82.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.20%)</title><rect x="79.4" y="819.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="82.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 0.17%)</title><rect x="79.7" y="803.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="82.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.12%)</title><rect x="79.7" y="787.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="82.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (2 samples, 0.03%)</title><rect x="81.2" y="787.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="81.2" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="81.2" y="755.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="84.2" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="81.2" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="81.2" y="723.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="84.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (212 samples, 3.25%)</title><rect x="81.7" y="819.0" width="38.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.7" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (2 samples, 0.03%)</title><rect x="81.7" y="803.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (210 samples, 3.22%)</title><rect x="82.1" y="803.0" width="38.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="85.1" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (210 samples, 3.22%)</title><rect x="82.1" y="787.0" width="38.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.1" y="798.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (210 samples, 3.22%)</title><rect x="82.1" y="771.0" width="38.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="85.1" y="782.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (210 samples, 3.22%)</title><rect x="82.1" y="755.0" width="38.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.1" y="766.0">jdk..</text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.11%)</title><rect x="82.3" y="739.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="85.3" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="82.6" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="85.6" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="83.2" y="723.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="86.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (201 samples, 3.09%)</title><rect x="83.5" y="739.0" width="36.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="86.5" y="750.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (194 samples, 2.98%)</title><rect x="84.8" y="723.0" width="35.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="87.8" y="734.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (194 samples, 2.98%)</title><rect x="84.8" y="707.0" width="35.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="87.8" y="718.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (194 samples, 2.98%)</title><rect x="84.8" y="691.0" width="35.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="87.8" y="702.0">__x..</text>
</g>
<g>
<title>do_futex (194 samples, 2.98%)</title><rect x="84.8" y="675.0" width="35.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="87.8" y="686.0">do_..</text>
</g>
<g>
<title>futex_wake (193 samples, 2.96%)</title><rect x="84.8" y="659.0" width="35.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="87.8" y="670.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (4 samples, 0.06%)</title><rect x="85.5" y="643.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="88.5" y="654.0"></text>
</g>
<g>
<title>wake_up_q (185 samples, 2.84%)</title><rect x="86.3" y="643.0" width="33.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="89.3" y="654.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (185 samples, 2.84%)</title><rect x="86.3" y="627.0" width="33.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="89.3" y="638.0">tr..</text>
</g>
<g>
<title>__lock_text_start (185 samples, 2.84%)</title><rect x="86.3" y="611.0" width="33.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="89.3" y="622.0">__..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="120.1" y="835.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="123.1" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="120.1" y="819.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="123.1" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="120.1" y="803.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="123.1" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$70/388576847.run (2,057 samples, 31.57%)</title><rect x="120.5" y="851.0" width="372.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.5" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceIm..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="120.5" y="835.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="123.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$2 (2,055 samples, 31.54%)</title><rect x="120.8" y="835.0" width="372.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.8" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceIm..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (817 samples, 12.54%)</title><rect x="121.2" y="819.0" width="148.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="124.2" y="830.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.12%)</title><rect x="122.3" y="803.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="125.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.12%)</title><rect x="122.3" y="787.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.12%)</title><rect x="122.3" y="771.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.3" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="123.0" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="126.0" y="766.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="123.0" y="739.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="126.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.06%)</title><rect x="123.0" y="723.0" width="0.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="126.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (797 samples, 12.23%)</title><rect x="123.7" y="803.0" width="144.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="126.7" y="814.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (23 samples, 0.35%)</title><rect x="123.7" y="787.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.21%)</title><rect x="124.5" y="771.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="127.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.21%)</title><rect x="124.5" y="755.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="127.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (14 samples, 0.21%)</title><rect x="124.5" y="739.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="127.5" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="125.6" y="723.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="128.6" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="125.7" y="707.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="128.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="125.7" y="691.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="128.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="125.7" y="675.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="128.7" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="126.5" y="723.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="129.5" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="126.5" y="707.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="129.5" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="126.5" y="691.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="129.5" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="127.0" y="771.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="130.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="127.0" y="755.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="130.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="127.0" y="739.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="130.0" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (773 samples, 11.86%)</title><rect x="127.9" y="787.0" width="140.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="130.9" y="798.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (773 samples, 11.86%)</title><rect x="127.9" y="771.0" width="140.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="130.9" y="782.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (771 samples, 11.83%)</title><rect x="128.3" y="755.0" width="139.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.3" y="766.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (765 samples, 11.74%)</title><rect x="129.2" y="739.0" width="138.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.2" y="750.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.20%)</title><rect x="130.1" y="723.0" width="2.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="133.1" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="131.0" y="707.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="134.0" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="131.0" y="691.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="134.0" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="131.0" y="675.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="134.0" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="131.0" y="659.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="134.0" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="131.4" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="134.4" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="131.7" y="707.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="134.7" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="132.1" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="135.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="132.1" y="691.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="135.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="132.1" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="135.1" y="686.0"></text>
</g>
<g>
<title>send (747 samples, 11.47%)</title><rect x="132.4" y="723.0" width="135.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="135.4" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (739 samples, 11.34%)</title><rect x="133.2" y="707.0" width="133.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="136.2" y="718.0">entry_SYSCALL_64_..</text>
</g>
<g>
<title>do_syscall_64 (739 samples, 11.34%)</title><rect x="133.2" y="691.0" width="133.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="136.2" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (729 samples, 11.19%)</title><rect x="133.7" y="675.0" width="132.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="136.7" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (729 samples, 11.19%)</title><rect x="133.7" y="659.0" width="132.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="136.7" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (713 samples, 10.94%)</title><rect x="134.6" y="643.0" width="129.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="137.6" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.05%)</title><rect x="134.8" y="627.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="137.8" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (705 samples, 10.82%)</title><rect x="135.3" y="627.0" width="127.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="138.3" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (703 samples, 10.79%)</title><rect x="135.5" y="611.0" width="127.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="138.5" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="135.5" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="138.5" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.06%)</title><rect x="136.2" y="595.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="139.2" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (692 samples, 10.62%)</title><rect x="137.0" y="595.0" width="125.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="140.0" y="606.0">tcp_sendmsg_loc..</text>
</g>
<g>
<title>_copy_from_iter_full (8 samples, 0.12%)</title><rect x="139.1" y="579.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="142.1" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.05%)</title><rect x="139.3" y="563.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="142.3" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (4 samples, 0.06%)</title><rect x="139.9" y="563.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="142.9" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (5 samples, 0.08%)</title><rect x="140.8" y="579.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="143.8" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.06%)</title><rect x="141.0" y="563.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="144.0" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (39 samples, 0.60%)</title><rect x="141.7" y="579.0" width="7.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="144.7" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (38 samples, 0.58%)</title><rect x="141.9" y="563.0" width="6.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="144.9" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (19 samples, 0.29%)</title><rect x="142.0" y="547.0" width="3.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="145.0" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (11 samples, 0.17%)</title><rect x="142.0" y="531.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="145.0" y="542.0"></text>
</g>
<g>
<title>memset (7 samples, 0.11%)</title><rect x="144.2" y="531.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="147.2" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (7 samples, 0.11%)</title><rect x="145.5" y="547.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="148.5" y="558.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.11%)</title><rect x="146.7" y="547.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="149.7" y="558.0"></text>
</g>
<g>
<title>__ksize (7 samples, 0.11%)</title><rect x="146.7" y="531.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="149.7" y="542.0"></text>
</g>
<g>
<title>memset (4 samples, 0.06%)</title><rect x="148.0" y="547.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="151.0" y="558.0"></text>
</g>
<g>
<title>tcp_push (620 samples, 9.52%)</title><rect x="148.9" y="579.0" width="112.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="151.9" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (620 samples, 9.52%)</title><rect x="148.9" y="563.0" width="112.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="151.9" y="574.0">__tcp_push_pen..</text>
</g>
<g>
<title>tcp_write_xmit (615 samples, 9.44%)</title><rect x="149.8" y="547.0" width="111.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="152.8" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (582 samples, 8.93%)</title><rect x="151.3" y="531.0" width="105.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="154.3" y="542.0">__tcp_transmi..</text>
</g>
<g>
<title>ip_queue_xmit (567 samples, 8.70%)</title><rect x="153.6" y="515.0" width="102.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="156.6" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (567 samples, 8.70%)</title><rect x="153.6" y="499.0" width="102.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="156.6" y="510.0">__ip_queue_x..</text>
</g>
<g>
<title>ip_local_out (560 samples, 8.60%)</title><rect x="154.4" y="483.0" width="101.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="157.4" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (558 samples, 8.56%)</title><rect x="154.7" y="467.0" width="101.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="157.7" y="478.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.03%)</title><rect x="154.7" y="451.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="157.7" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (556 samples, 8.53%)</title><rect x="155.1" y="451.0" width="100.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="158.1" y="462.0">ip_finish_ou..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="155.3" y="435.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="158.3" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (551 samples, 8.46%)</title><rect x="156.0" y="435.0" width="99.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="159.0" y="446.0">__ip_finish_..</text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.05%)</title><rect x="156.5" y="419.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="159.5" y="430.0"></text>
</g>
<g>
<title>ip_finish_output2 (545 samples, 8.37%)</title><rect x="157.1" y="419.0" width="98.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="160.1" y="430.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (522 samples, 8.01%)</title><rect x="158.7" y="403.0" width="94.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="161.7" y="414.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (520 samples, 7.98%)</title><rect x="159.1" y="387.0" width="94.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="162.1" y="398.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (517 samples, 7.94%)</title><rect x="159.6" y="371.0" width="93.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="162.6" y="382.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (515 samples, 7.90%)</title><rect x="159.6" y="355.0" width="93.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="162.6" y="366.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (503 samples, 7.72%)</title><rect x="161.8" y="339.0" width="91.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="164.8" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (501 samples, 7.69%)</title><rect x="162.1" y="323.0" width="90.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="165.1" y="334.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (496 samples, 7.61%)</title><rect x="163.0" y="307.0" width="89.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="166.0" y="318.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (495 samples, 7.60%)</title><rect x="163.2" y="291.0" width="89.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="166.2" y="302.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (4 samples, 0.06%)</title><rect x="163.2" y="275.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="166.2" y="286.0"></text>
</g>
<g>
<title>ip_rcv (491 samples, 7.54%)</title><rect x="164.0" y="275.0" width="88.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="167.0" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.03%)</title><rect x="164.3" y="259.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="167.3" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (486 samples, 7.46%)</title><rect x="164.7" y="259.0" width="88.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="167.7" y="270.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (482 samples, 7.40%)</title><rect x="164.9" y="243.0" width="87.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="167.9" y="254.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (481 samples, 7.38%)</title><rect x="165.0" y="227.0" width="87.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="168.0" y="238.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (480 samples, 7.37%)</title><rect x="165.2" y="211.0" width="87.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="168.2" y="222.0">ip_protoco..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="167.2" y="195.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="170.2" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (466 samples, 7.15%)</title><rect x="167.8" y="195.0" width="84.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="170.8" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (30 samples, 0.46%)</title><rect x="170.3" y="179.0" width="5.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="173.3" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.14%)</title><rect x="175.9" y="179.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="178.9" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.09%)</title><rect x="175.9" y="163.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="178.9" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="177.0" y="163.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="180.0" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (410 samples, 6.29%)</title><rect x="177.5" y="179.0" width="74.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="180.5" y="190.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (10 samples, 0.15%)</title><rect x="177.9" y="163.0" width="1.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="180.9" y="174.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.05%)</title><rect x="179.7" y="163.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="182.7" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (395 samples, 6.06%)</title><rect x="180.3" y="163.0" width="71.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="183.3" y="174.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (14 samples, 0.21%)</title><rect x="181.9" y="147.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="184.9" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (14 samples, 0.21%)</title><rect x="181.9" y="131.0" width="2.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="184.9" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (13 samples, 0.20%)</title><rect x="182.1" y="115.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="185.1" y="126.0"></text>
</g>
<g>
<title>mod_timer (13 samples, 0.20%)</title><rect x="182.1" y="99.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="185.1" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (9 samples, 0.14%)</title><rect x="182.4" y="83.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="185.4" y="94.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="184.1" y="83.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="187.1" y="94.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="184.4" y="147.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="187.4" y="158.0"></text>
</g>
<g>
<title>tcp_ack (64 samples, 0.98%)</title><rect x="185.0" y="147.0" width="11.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="188.0" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="187.3" y="131.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="190.3" y="142.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.05%)</title><rect x="187.7" y="131.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="190.7" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (41 samples, 0.63%)</title><rect x="188.4" y="131.0" width="7.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="191.4" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (28 samples, 0.43%)</title><rect x="189.9" y="115.0" width="5.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="192.9" y="126.0"></text>
</g>
<g>
<title>skb_release_all (27 samples, 0.41%)</title><rect x="189.9" y="99.0" width="4.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="192.9" y="110.0"></text>
</g>
<g>
<title>skb_release_data (26 samples, 0.40%)</title><rect x="189.9" y="83.0" width="4.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="192.9" y="94.0"></text>
</g>
<g>
<title>skb_free_head (8 samples, 0.12%)</title><rect x="193.1" y="67.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="196.1" y="78.0"></text>
</g>
<g>
<title>kfree (8 samples, 0.12%)</title><rect x="193.1" y="51.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="196.1" y="62.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="194.0" y="35.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="197.0" y="46.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (3 samples, 0.05%)</title><rect x="195.3" y="115.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="198.3" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="196.2" y="131.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="199.2" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (295 samples, 4.53%)</title><rect x="196.6" y="147.0" width="53.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="199.6" y="158.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (294 samples, 4.51%)</title><rect x="196.7" y="131.0" width="53.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="199.7" y="142.0">sock_..</text>
</g>
<g>
<title>__wake_up_sync_key (294 samples, 4.51%)</title><rect x="196.7" y="115.0" width="53.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="199.7" y="126.0">__wak..</text>
</g>
<g>
<title>__wake_up_common_lock (294 samples, 4.51%)</title><rect x="196.7" y="99.0" width="53.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="199.7" y="110.0">__wak..</text>
</g>
<g>
<title>__lock_text_start (294 samples, 4.51%)</title><rect x="196.7" y="83.0" width="53.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="199.7" y="94.0">__loc..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="250.0" y="147.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="253.0" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.08%)</title><rect x="250.3" y="147.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="253.3" y="158.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.08%)</title><rect x="250.3" y="131.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="253.3" y="142.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="251.4" y="147.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="254.4" y="158.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.03%)</title><rect x="251.8" y="179.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="254.8" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.03%)</title><rect x="252.3" y="243.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="255.3" y="254.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="252.9" y="355.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="255.9" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (13 samples, 0.20%)</title><rect x="253.2" y="403.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="256.2" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (13 samples, 0.20%)</title><rect x="253.2" y="387.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="256.2" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (8 samples, 0.12%)</title><rect x="253.6" y="371.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="256.6" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.12%)</title><rect x="253.6" y="355.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="256.6" y="366.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.06%)</title><rect x="254.0" y="339.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="257.0" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.06%)</title><rect x="254.0" y="323.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="257.0" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.06%)</title><rect x="254.0" y="307.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="257.0" y="318.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="255.8" y="483.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="258.8" y="494.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.03%)</title><rect x="256.3" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="259.3" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="256.9" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="259.9" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.14%)</title><rect x="258.0" y="531.0" width="1.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="261.0" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (6 samples, 0.09%)</title><rect x="258.5" y="515.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="261.5" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="258.9" y="499.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="261.9" y="510.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="258.9" y="483.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="261.9" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="258.9" y="467.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="261.9" y="478.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="259.8" y="531.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="262.8" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.08%)</title><rect x="260.1" y="531.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="263.1" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.05%)</title><rect x="260.5" y="515.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="263.5" y="526.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="260.5" y="499.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="263.5" y="510.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="261.2" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="264.2" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.06%)</title><rect x="261.6" y="579.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="264.6" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.05%)</title><rect x="261.8" y="563.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="264.8" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.05%)</title><rect x="262.3" y="595.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="265.3" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.06%)</title><rect x="263.0" y="627.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="266.0" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.05%)</title><rect x="263.2" y="611.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="266.2" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.05%)</title><rect x="263.2" y="595.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="266.2" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="263.4" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="266.4" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (11 samples, 0.17%)</title><rect x="263.7" y="643.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="266.7" y="654.0"></text>
</g>
<g>
<title>__fdget (10 samples, 0.15%)</title><rect x="263.7" y="627.0" width="1.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="266.7" y="638.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.15%)</title><rect x="263.7" y="611.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="266.7" y="622.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.15%)</title><rect x="263.7" y="595.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="266.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.11%)</title><rect x="265.7" y="675.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="268.7" y="686.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.11%)</title><rect x="265.7" y="659.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="268.7" y="670.0"></text>
</g>
<g>
<title>__schedule (7 samples, 0.11%)</title><rect x="265.7" y="643.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="268.7" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.08%)</title><rect x="266.1" y="627.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="269.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="267.0" y="707.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="270.0" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="267.0" y="691.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="270.0" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="267.0" y="675.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="270.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.03%)</title><rect x="268.1" y="803.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.1" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="268.5" y="803.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="271.5" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="268.5" y="787.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="271.5" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="268.5" y="771.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="271.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (1,235 samples, 18.96%)</title><rect x="269.2" y="819.0" width="223.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="272.2" y="830.0">ru/mail/polis/service/kovalko..</text>
</g>
<g>
<title>java/util/HashMap.get (19 samples, 0.29%)</title><rect x="269.4" y="803.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="272.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.09%)</title><rect x="269.4" y="787.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="272.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.20%)</title><rect x="270.5" y="787.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.20%)</title><rect x="270.5" y="771.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (13 samples, 0.20%)</title><rect x="270.5" y="755.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="273.5" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="271.9" y="739.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="274.9" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="271.9" y="723.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="274.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="271.9" y="707.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="274.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,215 samples, 18.65%)</title><rect x="272.8" y="803.0" width="220.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="275.8" y="814.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,215 samples, 18.65%)</title><rect x="272.8" y="787.0" width="220.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.8" y="798.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (189 samples, 2.90%)</title><rect x="274.1" y="771.0" width="34.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.1" y="782.0">on..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.12%)</title><rect x="277.2" y="755.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="280.2" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.11%)</title><rect x="277.3" y="739.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="280.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.11%)</title><rect x="277.3" y="723.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="280.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.11%)</title><rect x="277.3" y="707.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="280.3" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="277.9" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="280.9" y="702.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="278.2" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="281.2" y="702.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (159 samples, 2.44%)</title><rect x="278.8" y="755.0" width="28.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.8" y="766.0">on..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.08%)</title><rect x="280.1" y="739.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="283.1" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (18 samples, 0.28%)</title><rect x="281.0" y="739.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="284.0" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="282.4" y="723.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="285.4" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.09%)</title><rect x="282.9" y="723.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="285.9" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.06%)</title><rect x="283.3" y="707.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="286.3" y="718.0"></text>
</g>
<g>
<title>__recv (124 samples, 1.90%)</title><rect x="284.2" y="739.0" width="22.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="287.2" y="750.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (119 samples, 1.83%)</title><rect x="285.1" y="723.0" width="21.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="288.1" y="734.0">e..</text>
</g>
<g>
<title>do_syscall_64 (118 samples, 1.81%)</title><rect x="285.3" y="707.0" width="21.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="288.3" y="718.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (114 samples, 1.75%)</title><rect x="285.5" y="691.0" width="20.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="288.5" y="702.0"></text>
</g>
<g>
<title>__sys_recvfrom (114 samples, 1.75%)</title><rect x="285.5" y="675.0" width="20.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="288.5" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (108 samples, 1.66%)</title><rect x="286.0" y="659.0" width="19.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="289.0" y="670.0"></text>
</g>
<g>
<title>inet6_recvmsg (104 samples, 1.60%)</title><rect x="286.0" y="643.0" width="18.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="289.0" y="654.0"></text>
</g>
<g>
<title>tcp_recvmsg (102 samples, 1.57%)</title><rect x="286.4" y="627.0" width="18.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="289.4" y="638.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="287.3" y="611.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="290.3" y="622.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.03%)</title><rect x="287.3" y="595.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="290.3" y="606.0"></text>
</g>
<g>
<title>sk_wait_data (84 samples, 1.29%)</title><rect x="287.7" y="611.0" width="15.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="290.7" y="622.0"></text>
</g>
<g>
<title>wait_woken (81 samples, 1.24%)</title><rect x="288.2" y="595.0" width="14.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="291.2" y="606.0"></text>
</g>
<g>
<title>schedule_timeout (79 samples, 1.21%)</title><rect x="288.6" y="579.0" width="14.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="291.6" y="590.0"></text>
</g>
<g>
<title>__mod_timer (6 samples, 0.09%)</title><rect x="288.7" y="563.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="291.7" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.09%)</title><rect x="288.7" y="547.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="291.7" y="558.0"></text>
</g>
<g>
<title>schedule (72 samples, 1.11%)</title><rect x="289.8" y="563.0" width="13.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="292.8" y="574.0"></text>
</g>
<g>
<title>__schedule (72 samples, 1.11%)</title><rect x="289.8" y="547.0" width="13.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.8" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (70 samples, 1.07%)</title><rect x="290.2" y="531.0" width="12.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="293.2" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.05%)</title><rect x="302.9" y="611.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="305.9" y="622.0"></text>
</g>
<g>
<title>__skb_datagram_iter (3 samples, 0.05%)</title><rect x="302.9" y="595.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="305.9" y="606.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.05%)</title><rect x="302.9" y="579.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="305.9" y="590.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.05%)</title><rect x="302.9" y="563.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="305.9" y="574.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.05%)</title><rect x="303.4" y="611.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="306.4" y="622.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.03%)</title><rect x="303.6" y="595.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="306.6" y="606.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (2 samples, 0.03%)</title><rect x="303.6" y="579.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="306.6" y="590.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.03%)</title><rect x="303.6" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="306.6" y="574.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="303.6" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="306.6" y="558.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.03%)</title><rect x="303.6" y="531.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="306.6" y="542.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.03%)</title><rect x="303.6" y="515.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="306.6" y="526.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.03%)</title><rect x="303.6" y="499.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="306.6" y="510.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="303.6" y="483.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="306.6" y="494.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.03%)</title><rect x="303.6" y="467.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="306.6" y="478.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.03%)</title><rect x="303.6" y="451.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="306.6" y="462.0"></text>
</g>
<g>
<title>wait_woken (3 samples, 0.05%)</title><rect x="304.3" y="611.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="307.3" y="622.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.06%)</title><rect x="304.9" y="643.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="307.9" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.06%)</title><rect x="304.9" y="627.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="307.9" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.06%)</title><rect x="304.9" y="611.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="307.9" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="305.2" y="595.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="308.2" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.05%)</title><rect x="305.6" y="659.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="308.6" y="670.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="305.6" y="643.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="308.6" y="654.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="305.6" y="627.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="308.6" y="638.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.03%)</title><rect x="305.6" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="308.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="306.1" y="691.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="309.1" y="702.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="306.1" y="675.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="309.1" y="686.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.05%)</title><rect x="306.1" y="659.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="309.1" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="306.1" y="643.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="309.1" y="654.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="306.7" y="739.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="309.7" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="307.0" y="739.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="310.0" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="307.0" y="723.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="310.0" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="307.0" y="707.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.0" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="307.9" y="755.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="310.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="307.9" y="739.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="310.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="307.9" y="723.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="310.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (35 samples, 0.54%)</title><rect x="308.3" y="771.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="311.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.05%)</title><rect x="308.5" y="755.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="308.5" y="739.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="308.5" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="308.5" y="707.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="311.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.05%)</title><rect x="308.5" y="691.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.5" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.05%)</title><rect x="308.5" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="311.5" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (3 samples, 0.05%)</title><rect x="308.5" y="659.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="311.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.05%)</title><rect x="309.2" y="755.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title><rect x="309.4" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="309.4" y="723.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="309.4" y="707.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (8 samples, 0.12%)</title><rect x="309.8" y="755.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (8 samples, 0.12%)</title><rect x="309.8" y="739.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.09%)</title><rect x="310.1" y="723.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.1" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.14%)</title><rect x="311.2" y="755.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="314.2" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="312.5" y="739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="315.5" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="312.5" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="315.5" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="312.5" y="707.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="315.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.14%)</title><rect x="313.0" y="755.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.06%)</title><rect x="313.7" y="739.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.06%)</title><rect x="313.7" y="723.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (19 samples, 0.29%)</title><rect x="314.6" y="771.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.12%)</title><rect x="316.5" y="755.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="319.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.12%)</title><rect x="316.5" y="739.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="319.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.12%)</title><rect x="316.5" y="723.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="319.5" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="317.0" y="707.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="320.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (6 samples, 0.09%)</title><rect x="318.1" y="771.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="321.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.08%)</title><rect x="318.3" y="755.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="321.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="318.3" y="739.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.03%)</title><rect x="319.2" y="771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.2" y="782.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (101 samples, 1.55%)</title><rect x="319.5" y="771.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="322.5" y="782.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.05%)</title><rect x="319.9" y="755.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="322.9" y="766.0"></text>
</g>
<g>
<title>setsockopt (96 samples, 1.47%)</title><rect x="320.4" y="755.0" width="17.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="323.4" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (90 samples, 1.38%)</title><rect x="321.5" y="739.0" width="16.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="324.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (2 samples, 0.03%)</title><rect x="321.5" y="723.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="324.5" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (88 samples, 1.35%)</title><rect x="321.9" y="723.0" width="15.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="324.9" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (2 samples, 0.03%)</title><rect x="323.7" y="707.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="326.7" y="718.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (70 samples, 1.07%)</title><rect x="324.1" y="707.0" width="12.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="327.1" y="718.0"></text>
</g>
<g>
<title>__sys_setsockopt (68 samples, 1.04%)</title><rect x="324.1" y="691.0" width="12.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="327.1" y="702.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (3 samples, 0.05%)</title><rect x="325.0" y="675.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="328.0" y="686.0"></text>
</g>
<g>
<title>__get_user_4 (2 samples, 0.03%)</title><rect x="325.5" y="675.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="328.5" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (21 samples, 0.32%)</title><rect x="325.9" y="675.0" width="3.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="328.9" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="330.0" y="675.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="333.0" y="686.0"></text>
</g>
<g>
<title>security_socket_setsockopt (13 samples, 0.20%)</title><rect x="330.6" y="675.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="333.6" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (13 samples, 0.20%)</title><rect x="330.6" y="659.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="333.6" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (13 samples, 0.20%)</title><rect x="330.6" y="643.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="333.6" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (9 samples, 0.14%)</title><rect x="331.3" y="627.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="334.3" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.05%)</title><rect x="332.4" y="611.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="335.4" y="622.0"></text>
</g>
<g>
<title>sock_setsockopt (13 samples, 0.20%)</title><rect x="332.9" y="675.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="335.9" y="686.0"></text>
</g>
<g>
<title>sock_set_timeout (9 samples, 0.14%)</title><rect x="333.3" y="659.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="336.3" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.06%)</title><rect x="334.2" y="643.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="337.2" y="654.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="334.9" y="659.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="337.9" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (6 samples, 0.09%)</title><rect x="335.3" y="675.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="338.3" y="686.0"></text>
</g>
<g>
<title>__fdget (6 samples, 0.09%)</title><rect x="335.3" y="659.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="338.3" y="670.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.09%)</title><rect x="335.3" y="643.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="338.3" y="654.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.09%)</title><rect x="335.3" y="627.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="338.3" y="638.0"></text>
</g>
<g>
<title>sock_setsockopt (2 samples, 0.03%)</title><rect x="336.4" y="691.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="339.4" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.09%)</title><rect x="336.7" y="707.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="339.7" y="718.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.08%)</title><rect x="336.9" y="691.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="339.9" y="702.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.05%)</title><rect x="337.3" y="675.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="340.3" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (828 samples, 12.71%)</title><rect x="337.8" y="771.0" width="150.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.8" y="782.0">one/nio/net/NativeS..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (8 samples, 0.12%)</title><rect x="338.6" y="755.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="341.6" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.09%)</title><rect x="338.9" y="739.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="341.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.05%)</title><rect x="339.3" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="342.3" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="340.0" y="755.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="343.0" y="766.0"></text>
</g>
<g>
<title>send (814 samples, 12.49%)</title><rect x="340.4" y="755.0" width="147.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="343.4" y="766.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (809 samples, 12.42%)</title><rect x="341.3" y="739.0" width="146.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="344.3" y="750.0">entry_SYSCALL_64_a..</text>
</g>
<g>
<title>do_syscall_64 (809 samples, 12.42%)</title><rect x="341.3" y="723.0" width="146.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="344.3" y="734.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (777 samples, 11.93%)</title><rect x="341.5" y="707.0" width="140.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.5" y="718.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (776 samples, 11.91%)</title><rect x="341.5" y="691.0" width="140.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="344.5" y="702.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (773 samples, 11.86%)</title><rect x="341.8" y="675.0" width="140.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="344.8" y="686.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (768 samples, 11.79%)</title><rect x="342.2" y="659.0" width="139.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="345.2" y="670.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (765 samples, 11.74%)</title><rect x="342.4" y="643.0" width="138.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="345.4" y="654.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.06%)</title><rect x="342.5" y="627.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="345.5" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (757 samples, 11.62%)</title><rect x="343.4" y="627.0" width="137.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="346.4" y="638.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (4 samples, 0.06%)</title><rect x="344.7" y="611.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="347.7" y="622.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.06%)</title><rect x="344.7" y="595.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="347.7" y="606.0"></text>
</g>
<g>
<title>_copy_from_iter_full (6 samples, 0.09%)</title><rect x="345.4" y="611.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="348.4" y="622.0"></text>
</g>
<g>
<title>copy_user_generic_string (5 samples, 0.08%)</title><rect x="345.4" y="595.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="348.4" y="606.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (27 samples, 0.41%)</title><rect x="346.9" y="611.0" width="4.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="349.9" y="622.0"></text>
</g>
<g>
<title>__alloc_skb (27 samples, 0.41%)</title><rect x="346.9" y="595.0" width="4.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="349.9" y="606.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (17 samples, 0.26%)</title><rect x="347.1" y="579.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="350.1" y="590.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.06%)</title><rect x="347.1" y="563.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="350.1" y="574.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.03%)</title><rect x="347.8" y="563.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="350.8" y="574.0"></text>
</g>
<g>
<title>memset (11 samples, 0.17%)</title><rect x="348.2" y="563.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="351.2" y="574.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (5 samples, 0.08%)</title><rect x="350.1" y="579.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="353.1" y="590.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.03%)</title><rect x="351.2" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="354.2" y="590.0"></text>
</g>
<g>
<title>tcp_push (702 samples, 10.78%)</title><rect x="352.0" y="611.0" width="127.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="355.0" y="622.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (701 samples, 10.76%)</title><rect x="352.0" y="595.0" width="126.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="355.0" y="606.0">__tcp_push_pendi..</text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="352.0" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="355.0" y="590.0"></text>
</g>
<g>
<title>tcp_write_xmit (698 samples, 10.71%)</title><rect x="352.5" y="579.0" width="126.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="355.5" y="590.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (672 samples, 10.31%)</title><rect x="353.9" y="563.0" width="121.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="356.9" y="574.0">__tcp_transmit_..</text>
</g>
<g>
<title>ip_queue_xmit (665 samples, 10.21%)</title><rect x="355.0" y="547.0" width="120.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="358.0" y="558.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (665 samples, 10.21%)</title><rect x="355.0" y="531.0" width="120.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="358.0" y="542.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="355.6" y="515.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="358.6" y="526.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="355.6" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="358.6" y="510.0"></text>
</g>
<g>
<title>ip_local_out (659 samples, 10.12%)</title><rect x="355.9" y="515.0" width="119.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="358.9" y="526.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.05%)</title><rect x="356.1" y="499.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="359.1" y="510.0"></text>
</g>
<g>
<title>ip_output (653 samples, 10.02%)</title><rect x="356.7" y="499.0" width="118.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="359.7" y="510.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (648 samples, 9.95%)</title><rect x="357.6" y="483.0" width="117.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="360.6" y="494.0">ip_finish_output</text>
</g>
<g>
<title>__ip_finish_output (642 samples, 9.85%)</title><rect x="358.1" y="467.0" width="116.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="361.1" y="478.0">__ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="358.1" y="451.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="361.1" y="462.0"></text>
</g>
<g>
<title>ip_finish_output2 (639 samples, 9.81%)</title><rect x="358.5" y="451.0" width="115.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="361.5" y="462.0">ip_finish_outp..</text>
</g>
<g>
<title>__local_bh_enable_ip (622 samples, 9.55%)</title><rect x="359.4" y="435.0" width="112.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="362.4" y="446.0">__local_bh_ena..</text>
</g>
<g>
<title>do_softirq.part.0 (622 samples, 9.55%)</title><rect x="359.4" y="419.0" width="112.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="362.4" y="430.0">do_softirq.par..</text>
</g>
<g>
<title>do_softirq_own_stack (619 samples, 9.50%)</title><rect x="359.9" y="403.0" width="112.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="362.9" y="414.0">do_softirq_own..</text>
</g>
<g>
<title>__softirqentry_text_start (619 samples, 9.50%)</title><rect x="359.9" y="387.0" width="112.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="362.9" y="398.0">__softirqentry..</text>
</g>
<g>
<title>net_rx_action (615 samples, 9.44%)</title><rect x="360.5" y="371.0" width="111.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="363.5" y="382.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (610 samples, 9.36%)</title><rect x="361.4" y="355.0" width="110.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="364.4" y="366.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (606 samples, 9.30%)</title><rect x="362.1" y="339.0" width="109.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="365.1" y="350.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (604 samples, 9.27%)</title><rect x="362.3" y="323.0" width="109.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="365.3" y="334.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.08%)</title><rect x="362.3" y="307.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="365.3" y="318.0"></text>
</g>
<g>
<title>ip_rcv (599 samples, 9.19%)</title><rect x="363.2" y="307.0" width="108.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="366.2" y="318.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="363.2" y="291.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="366.2" y="302.0"></text>
</g>
<g>
<title>ip_rcv_finish (596 samples, 9.15%)</title><rect x="363.7" y="291.0" width="108.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="366.7" y="302.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (594 samples, 9.12%)</title><rect x="363.7" y="275.0" width="107.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="366.7" y="286.0">ip_local_deli..</text>
</g>
<g>
<title>ip_local_deliver_finish (593 samples, 9.10%)</title><rect x="363.9" y="259.0" width="107.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="366.9" y="270.0">ip_local_deli..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (593 samples, 9.10%)</title><rect x="363.9" y="243.0" width="107.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="366.9" y="254.0">ip_protocol_d..</text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="365.4" y="227.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="368.4" y="238.0"></text>
</g>
<g>
<title>tcp_v4_rcv (583 samples, 8.95%)</title><rect x="365.7" y="227.0" width="105.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="368.7" y="238.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (16 samples, 0.25%)</title><rect x="366.8" y="211.0" width="2.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="369.8" y="222.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="369.7" y="211.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="372.7" y="222.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="370.1" y="211.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="373.1" y="222.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (556 samples, 8.53%)</title><rect x="370.4" y="211.0" width="100.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="373.4" y="222.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_ack (2 samples, 0.03%)</title><rect x="370.6" y="195.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="373.6" y="206.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.05%)</title><rect x="371.0" y="195.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="374.0" y="206.0"></text>
</g>
<g>
<title>tcp_rcv_established (549 samples, 8.43%)</title><rect x="371.7" y="195.0" width="99.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="374.7" y="206.0">tcp_rcv_esta..</text>
</g>
<g>
<title>tcp_ack (43 samples, 0.66%)</title><rect x="372.8" y="179.0" width="7.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="375.8" y="190.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="374.6" y="163.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="377.6" y="174.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.03%)</title><rect x="375.0" y="163.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="378.0" y="174.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (26 samples, 0.40%)</title><rect x="375.3" y="163.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="378.3" y="174.0"></text>
</g>
<g>
<title>__kfree_skb (20 samples, 0.31%)</title><rect x="375.5" y="147.0" width="3.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="378.5" y="158.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.08%)</title><rect x="375.5" y="131.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="378.5" y="142.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="375.7" y="115.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="378.7" y="126.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="376.0" y="99.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="379.0" y="110.0"></text>
</g>
<g>
<title>skb_release_all (15 samples, 0.23%)</title><rect x="376.4" y="131.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="379.4" y="142.0"></text>
</g>
<g>
<title>skb_release_data (15 samples, 0.23%)</title><rect x="376.4" y="115.0" width="2.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="379.4" y="126.0"></text>
</g>
<g>
<title>skb_free_head (8 samples, 0.12%)</title><rect x="377.7" y="99.0" width="1.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="380.7" y="110.0"></text>
</g>
<g>
<title>kfree (8 samples, 0.12%)</title><rect x="377.7" y="83.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="380.7" y="94.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="378.6" y="67.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="381.6" y="78.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.03%)</title><rect x="379.5" y="147.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="382.5" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (491 samples, 7.54%)</title><rect x="380.6" y="179.0" width="88.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="383.6" y="190.0">tcp_data_r..</text>
</g>
<g>
<title>sock_def_readable (490 samples, 7.52%)</title><rect x="380.8" y="163.0" width="88.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="383.8" y="174.0">sock_def_r..</text>
</g>
<g>
<title>__wake_up_sync_key (488 samples, 7.49%)</title><rect x="381.1" y="147.0" width="88.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="384.1" y="158.0">__wake_up_..</text>
</g>
<g>
<title>__wake_up_common_lock (488 samples, 7.49%)</title><rect x="381.1" y="131.0" width="88.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="384.1" y="142.0">__wake_up_..</text>
</g>
<g>
<title>__lock_text_start (486 samples, 7.46%)</title><rect x="381.3" y="115.0" width="88.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="384.3" y="126.0">__lock_tex..</text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="469.7" y="179.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="472.7" y="190.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="469.7" y="163.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="472.7" y="174.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.03%)</title><rect x="470.0" y="179.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="473.0" y="190.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="470.8" y="179.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="473.8" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.03%)</title><rect x="471.3" y="275.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="474.3" y="286.0"></text>
</g>
<g>
<title>dev_queue_xmit (12 samples, 0.18%)</title><rect x="472.0" y="435.0" width="2.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="475.0" y="446.0"></text>
</g>
<g>
<title>__dev_queue_xmit (12 samples, 0.18%)</title><rect x="472.0" y="419.0" width="2.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="475.0" y="430.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.15%)</title><rect x="472.4" y="403.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="475.4" y="414.0"></text>
</g>
<g>
<title>loopback_xmit (8 samples, 0.12%)</title><rect x="472.6" y="387.0" width="1.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="475.6" y="398.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.06%)</title><rect x="472.8" y="371.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="475.8" y="382.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.06%)</title><rect x="472.8" y="355.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="475.8" y="366.0"></text>
</g>
<g>
<title>enqueue_to_backlog (4 samples, 0.06%)</title><rect x="472.8" y="339.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="475.8" y="350.0"></text>
</g>
<g>
<title>sk_free (3 samples, 0.05%)</title><rect x="473.5" y="371.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="476.5" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="474.6" y="467.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="477.6" y="478.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="474.9" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="477.9" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.05%)</title><rect x="475.8" y="563.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="478.8" y="574.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.06%)</title><rect x="476.4" y="563.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="479.4" y="574.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.08%)</title><rect x="477.1" y="563.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="480.1" y="574.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.08%)</title><rect x="477.1" y="547.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="480.1" y="558.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="477.3" y="531.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="480.3" y="542.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="477.3" y="515.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="480.3" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="478.6" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="481.6" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.12%)</title><rect x="479.1" y="611.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="482.1" y="622.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="479.1" y="595.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="482.1" y="606.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.09%)</title><rect x="479.5" y="595.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="482.5" y="606.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="480.6" y="627.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="483.6" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.03%)</title><rect x="480.9" y="643.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="483.9" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.03%)</title><rect x="481.5" y="659.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="484.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (31 samples, 0.48%)</title><rect x="482.2" y="707.0" width="5.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="485.2" y="718.0"></text>
</g>
<g>
<title>schedule (30 samples, 0.46%)</title><rect x="482.4" y="691.0" width="5.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="485.4" y="702.0"></text>
</g>
<g>
<title>__schedule (30 samples, 0.46%)</title><rect x="482.4" y="675.0" width="5.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="485.4" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (26 samples, 0.40%)</title><rect x="483.1" y="659.0" width="4.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="486.1" y="670.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (11 samples, 0.17%)</title><rect x="487.8" y="771.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.8" y="782.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (17 samples, 0.26%)</title><rect x="489.8" y="771.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.8" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="492.3" y="755.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="495.3" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="492.3" y="739.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="495.3" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="492.3" y="723.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="495.3" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$74/2003223169.run (2,324 samples, 35.67%)</title><rect x="493.0" y="851.0" width="421.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="496.0" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lam..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$get$3 (2,324 samples, 35.67%)</title><rect x="493.0" y="835.0" width="421.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="496.0" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lamb..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="496.1" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="499.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="496.1" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.03%)</title><rect x="496.1" y="787.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="499.1" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="496.1" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="499.1" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="496.1" y="755.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="499.1" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.11%)</title><rect x="496.5" y="819.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="499.5" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,173 samples, 18.00%)</title><rect x="497.8" y="819.0" width="212.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="500.8" y="830.0">one/nio/http/HttpSession.sen..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.03%)</title><rect x="501.2" y="803.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="504.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.15%)</title><rect x="501.6" y="803.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.15%)</title><rect x="501.6" y="787.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.15%)</title><rect x="501.6" y="771.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="501.7" y="755.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="504.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="501.7" y="739.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="504.7" y="750.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="502.1" y="755.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="505.1" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="502.6" y="755.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="505.6" y="766.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="502.8" y="739.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="505.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="503.0" y="723.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="506.0" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,134 samples, 17.41%)</title><rect x="503.4" y="803.0" width="205.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.4" y="814.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (29 samples, 0.45%)</title><rect x="503.6" y="787.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="506.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.08%)</title><rect x="505.2" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.2" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.08%)</title><rect x="505.2" y="755.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="508.2" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.08%)</title><rect x="505.2" y="739.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="508.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.08%)</title><rect x="505.2" y="723.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="508.2" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.08%)</title><rect x="505.2" y="707.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="508.2" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="505.2" y="691.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="508.2" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="505.4" y="675.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="508.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="505.5" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="508.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="505.5" y="643.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="508.5" y="654.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.03%)</title><rect x="505.5" y="627.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="508.5" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.03%)</title><rect x="505.5" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="508.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.20%)</title><rect x="506.1" y="771.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.20%)</title><rect x="506.1" y="755.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="509.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13 samples, 0.20%)</title><rect x="506.1" y="739.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.1" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="507.5" y="723.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="510.5" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="508.4" y="771.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="511.4" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="508.4" y="755.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="511.4" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="508.4" y="739.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="511.4" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,104 samples, 16.95%)</title><rect x="508.8" y="787.0" width="200.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="511.8" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="508.8" y="771.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="511.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="508.8" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="511.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="508.8" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="511.8" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="509.0" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="512.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,101 samples, 16.90%)</title><rect x="509.3" y="771.0" width="199.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="512.3" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,100 samples, 16.88%)</title><rect x="509.5" y="755.0" width="199.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="512.5" y="766.0">one/nio/net/Session$ArrayQ..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.05%)</title><rect x="510.8" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.8" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,089 samples, 16.72%)</title><rect x="511.3" y="739.0" width="197.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.3" y="750.0">one/nio/net/NativeSocket.w..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="512.4" y="723.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="515.4" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (29 samples, 0.45%)</title><rect x="512.8" y="723.0" width="5.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="515.8" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="515.7" y="707.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="518.7" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.15%)</title><rect x="516.2" y="707.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="519.2" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.08%)</title><rect x="517.1" y="691.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="520.1" y="702.0"></text>
</g>
<g>
<title>send (1,050 samples, 16.12%)</title><rect x="518.2" y="723.0" width="190.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="521.2" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,040 samples, 15.96%)</title><rect x="519.9" y="707.0" width="188.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="522.9" y="718.0">entry_SYSCALL_64_after_h..</text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.05%)</title><rect x="519.9" y="691.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="522.9" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1,037 samples, 15.92%)</title><rect x="520.4" y="691.0" width="187.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="523.4" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,019 samples, 15.64%)</title><rect x="522.6" y="675.0" width="184.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="525.6" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,016 samples, 15.59%)</title><rect x="522.6" y="659.0" width="184.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="525.6" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (981 samples, 15.06%)</title><rect x="523.7" y="643.0" width="177.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="526.7" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.11%)</title><rect x="523.8" y="627.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="526.8" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (956 samples, 14.67%)</title><rect x="525.1" y="627.0" width="173.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="528.1" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (953 samples, 14.63%)</title><rect x="525.3" y="611.0" width="172.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="528.3" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.05%)</title><rect x="525.8" y="595.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="528.8" y="606.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="525.8" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="528.8" y="590.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.05%)</title><rect x="526.7" y="595.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="529.7" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (7 samples, 0.11%)</title><rect x="527.3" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="530.3" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (929 samples, 14.26%)</title><rect x="528.9" y="595.0" width="168.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="531.9" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.05%)</title><rect x="531.1" y="579.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="534.1" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.05%)</title><rect x="531.1" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="534.1" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (15 samples, 0.23%)</title><rect x="532.0" y="579.0" width="2.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="535.0" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (13 samples, 0.20%)</title><rect x="532.0" y="563.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="535.0" y="574.0"></text>
</g>
<g>
<title>check_stack_object (4 samples, 0.06%)</title><rect x="534.7" y="579.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="537.7" y="590.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.05%)</title><rect x="535.4" y="579.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="538.4" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (12 samples, 0.18%)</title><rect x="536.2" y="579.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="539.2" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (12 samples, 0.18%)</title><rect x="536.2" y="563.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="539.2" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (89 samples, 1.37%)</title><rect x="538.3" y="579.0" width="16.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="541.3" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (80 samples, 1.23%)</title><rect x="539.4" y="563.0" width="14.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="542.4" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (3 samples, 0.05%)</title><rect x="540.0" y="547.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="543.0" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (39 samples, 0.60%)</title><rect x="540.5" y="547.0" width="7.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="543.5" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (25 samples, 0.38%)</title><rect x="540.5" y="531.0" width="4.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="543.5" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="544.5" y="515.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="547.5" y="526.0"></text>
</g>
<g>
<title>memset (11 samples, 0.17%)</title><rect x="545.4" y="531.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="548.4" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (13 samples, 0.20%)</title><rect x="547.6" y="547.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="550.6" y="558.0"></text>
</g>
<g>
<title>ksize (8 samples, 0.12%)</title><rect x="549.9" y="547.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="552.9" y="558.0"></text>
</g>
<g>
<title>__ksize (8 samples, 0.12%)</title><rect x="549.9" y="531.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="552.9" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.03%)</title><rect x="551.4" y="547.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="554.4" y="558.0"></text>
</g>
<g>
<title>memset (11 samples, 0.17%)</title><rect x="551.7" y="547.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="554.7" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (2 samples, 0.03%)</title><rect x="553.9" y="563.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="556.9" y="574.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.05%)</title><rect x="554.4" y="579.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="557.4" y="590.0"></text>
</g>
<g>
<title>tcp_push (774 samples, 11.88%)</title><rect x="555.2" y="579.0" width="140.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="558.2" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (774 samples, 11.88%)</title><rect x="555.2" y="563.0" width="140.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="558.2" y="574.0">__tcp_push_pending..</text>
</g>
<g>
<title>tcp_write_xmit (772 samples, 11.85%)</title><rect x="555.5" y="547.0" width="139.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="558.5" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (742 samples, 11.39%)</title><rect x="556.6" y="531.0" width="134.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="559.6" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="558.1" y="515.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="561.1" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (724 samples, 11.11%)</title><rect x="558.4" y="515.0" width="131.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="561.4" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (723 samples, 11.10%)</title><rect x="558.4" y="499.0" width="131.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="561.4" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (718 samples, 11.02%)</title><rect x="559.2" y="483.0" width="130.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="562.2" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.06%)</title><rect x="559.3" y="467.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="562.3" y="478.0"></text>
</g>
<g>
<title>ip_send_check (2 samples, 0.03%)</title><rect x="559.7" y="451.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="562.7" y="462.0"></text>
</g>
<g>
<title>ip_output (713 samples, 10.94%)</title><rect x="560.1" y="467.0" width="129.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="563.1" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (712 samples, 10.93%)</title><rect x="560.2" y="451.0" width="129.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="563.2" y="462.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.08%)</title><rect x="560.6" y="435.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="563.6" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (704 samples, 10.81%)</title><rect x="561.5" y="435.0" width="127.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="564.5" y="446.0">__ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (701 samples, 10.76%)</title><rect x="562.1" y="419.0" width="126.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="565.1" y="430.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (645 samples, 9.90%)</title><rect x="564.4" y="403.0" width="116.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="567.4" y="414.0">__local_bh_ena..</text>
</g>
<g>
<title>do_softirq.part.0 (645 samples, 9.90%)</title><rect x="564.4" y="387.0" width="116.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="567.4" y="398.0">do_softirq.par..</text>
</g>
<g>
<title>do_softirq_own_stack (641 samples, 9.84%)</title><rect x="565.1" y="371.0" width="116.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="568.1" y="382.0">do_softirq_own..</text>
</g>
<g>
<title>__softirqentry_text_start (641 samples, 9.84%)</title><rect x="565.1" y="355.0" width="116.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="568.1" y="366.0">__softirqentry..</text>
</g>
<g>
<title>net_rx_action (625 samples, 9.59%)</title><rect x="567.5" y="339.0" width="113.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="570.5" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (622 samples, 9.55%)</title><rect x="568.0" y="323.0" width="112.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="571.0" y="334.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (619 samples, 9.50%)</title><rect x="568.6" y="307.0" width="112.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="571.6" y="318.0">__netif_receiv..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (618 samples, 9.49%)</title><rect x="568.8" y="291.0" width="111.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="571.8" y="302.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.09%)</title><rect x="568.9" y="275.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="571.9" y="286.0"></text>
</g>
<g>
<title>ip_rcv (611 samples, 9.38%)</title><rect x="570.0" y="275.0" width="110.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="573.0" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="570.0" y="259.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="573.0" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.06%)</title><rect x="570.4" y="259.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="573.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (605 samples, 9.29%)</title><rect x="571.1" y="259.0" width="109.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="574.1" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (600 samples, 9.21%)</title><rect x="571.1" y="243.0" width="108.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="574.1" y="254.0">ip_local_deli..</text>
</g>
<g>
<title>ip_local_deliver_finish (598 samples, 9.18%)</title><rect x="571.5" y="227.0" width="108.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="574.5" y="238.0">ip_local_deli..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (596 samples, 9.15%)</title><rect x="571.7" y="211.0" width="107.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="574.7" y="222.0">ip_protocol_d..</text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="572.9" y="195.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="575.9" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (587 samples, 9.01%)</title><rect x="573.3" y="195.0" width="106.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="576.3" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (12 samples, 0.18%)</title><rect x="575.6" y="179.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="578.6" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="578.0" y="179.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="581.0" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (5 samples, 0.08%)</title><rect x="578.4" y="179.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="581.4" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="578.5" y="163.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="581.5" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="578.9" y="163.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="581.9" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (549 samples, 8.43%)</title><rect x="579.3" y="179.0" width="99.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="582.3" y="190.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.06%)</title><rect x="579.6" y="163.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="582.6" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (543 samples, 8.33%)</title><rect x="580.3" y="163.0" width="98.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="583.3" y="174.0">tcp_rcv_esta..</text>
</g>
<g>
<title>__tcp_ack_snd_check (10 samples, 0.15%)</title><rect x="582.2" y="147.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="585.2" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (9 samples, 0.14%)</title><rect x="582.3" y="131.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="585.3" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (9 samples, 0.14%)</title><rect x="582.3" y="115.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="585.3" y="126.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.14%)</title><rect x="582.3" y="99.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="585.3" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.12%)</title><rect x="582.5" y="83.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="585.5" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.05%)</title><rect x="584.3" y="147.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="587.3" y="158.0"></text>
</g>
<g>
<title>tcp_ack (74 samples, 1.14%)</title><rect x="584.9" y="147.0" width="13.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="587.9" y="158.0"></text>
</g>
<g>
<title>rb_first (3 samples, 0.05%)</title><rect x="587.8" y="131.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="590.8" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (50 samples, 0.77%)</title><rect x="588.3" y="131.0" width="9.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="591.3" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (38 samples, 0.58%)</title><rect x="589.6" y="115.0" width="6.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="592.6" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.12%)</title><rect x="589.6" y="99.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="592.6" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="590.3" y="83.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="593.3" y="94.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="590.5" y="67.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.5" y="78.0"></text>
</g>
<g>
<title>skb_release_all (30 samples, 0.46%)</title><rect x="591.0" y="99.0" width="5.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="594.0" y="110.0"></text>
</g>
<g>
<title>skb_release_data (29 samples, 0.45%)</title><rect x="591.2" y="83.0" width="5.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="594.2" y="94.0"></text>
</g>
<g>
<title>skb_free_head (11 samples, 0.17%)</title><rect x="594.5" y="67.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="597.5" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="594.5" y="51.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="597.5" y="62.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.14%)</title><rect x="594.8" y="51.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="597.8" y="62.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.08%)</title><rect x="595.6" y="35.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="598.6" y="46.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.03%)</title><rect x="597.0" y="115.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="600.0" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (430 samples, 6.60%)</title><rect x="598.3" y="147.0" width="77.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="601.3" y="158.0">tcp_data_..</text>
</g>
<g>
<title>sock_def_readable (429 samples, 6.58%)</title><rect x="598.5" y="131.0" width="77.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="601.5" y="142.0">sock_def_..</text>
</g>
<g>
<title>__wake_up_sync_key (427 samples, 6.55%)</title><rect x="598.8" y="115.0" width="77.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="601.8" y="126.0">__wake_up..</text>
</g>
<g>
<title>__wake_up_common_lock (427 samples, 6.55%)</title><rect x="598.8" y="99.0" width="77.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="601.8" y="110.0">__wake_up..</text>
</g>
<g>
<title>__lock_text_start (425 samples, 6.52%)</title><rect x="598.8" y="83.0" width="77.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="601.8" y="94.0">__lock_t..</text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="675.8" y="83.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="678.8" y="94.0"></text>
</g>
<g>
<title>tcp_event_data_recv (7 samples, 0.11%)</title><rect x="676.2" y="147.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="679.2" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.06%)</title><rect x="677.4" y="147.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="680.4" y="158.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.05%)</title><rect x="677.6" y="131.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="680.6" y="142.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (3 samples, 0.05%)</title><rect x="678.7" y="179.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="681.7" y="190.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (2 samples, 0.03%)</title><rect x="679.2" y="179.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="682.2" y="190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.05%)</title><rect x="679.8" y="243.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="682.8" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (2 samples, 0.03%)</title><rect x="680.3" y="243.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="683.3" y="254.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.05%)</title><rect x="680.7" y="339.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="683.7" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (42 samples, 0.64%)</title><rect x="681.2" y="403.0" width="7.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="684.2" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (40 samples, 0.61%)</title><rect x="681.4" y="387.0" width="7.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="684.4" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (19 samples, 0.29%)</title><rect x="683.6" y="371.0" width="3.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="686.6" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (13 samples, 0.20%)</title><rect x="684.3" y="355.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="687.3" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.06%)</title><rect x="684.3" y="339.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="687.3" y="350.0"></text>
</g>
<g>
<title>netif_rx (6 samples, 0.09%)</title><rect x="685.0" y="339.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="688.0" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (5 samples, 0.08%)</title><rect x="685.2" y="323.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="688.2" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.08%)</title><rect x="685.2" y="307.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="688.2" y="318.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="686.1" y="339.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="689.1" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.03%)</title><rect x="686.7" y="355.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="689.7" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.05%)</title><rect x="687.0" y="371.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="690.0" y="382.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (2 samples, 0.03%)</title><rect x="687.6" y="371.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="690.6" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="687.9" y="371.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="690.9" y="382.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.03%)</title><rect x="688.3" y="371.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="691.3" y="382.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.06%)</title><rect x="689.6" y="515.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="692.6" y="526.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.05%)</title><rect x="689.7" y="499.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="692.7" y="510.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.03%)</title><rect x="690.7" y="515.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="693.7" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="691.2" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="694.2" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (11 samples, 0.17%)</title><rect x="692.3" y="531.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="695.3" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (8 samples, 0.12%)</title><rect x="692.8" y="515.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="695.8" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.11%)</title><rect x="693.0" y="499.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="696.0" y="510.0"></text>
</g>
<g>
<title>mod_timer (7 samples, 0.11%)</title><rect x="693.0" y="483.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="696.0" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.08%)</title><rect x="693.2" y="467.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="696.2" y="478.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.03%)</title><rect x="694.8" y="531.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="697.8" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (8 samples, 0.12%)</title><rect x="695.5" y="579.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="698.5" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.12%)</title><rect x="695.5" y="563.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="698.5" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.05%)</title><rect x="696.4" y="547.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="699.4" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.05%)</title><rect x="697.2" y="595.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="700.2" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.03%)</title><rect x="697.9" y="611.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="700.9" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (17 samples, 0.26%)</title><rect x="698.3" y="627.0" width="3.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="701.3" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (17 samples, 0.26%)</title><rect x="698.3" y="611.0" width="3.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="701.3" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (17 samples, 0.26%)</title><rect x="698.3" y="595.0" width="3.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="701.3" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (12 samples, 0.18%)</title><rect x="699.2" y="579.0" width="2.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="702.2" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.05%)</title><rect x="700.8" y="563.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="703.8" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (29 samples, 0.45%)</title><rect x="701.3" y="643.0" width="5.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.3" y="654.0"></text>
</g>
<g>
<title>__fdget (22 samples, 0.34%)</title><rect x="701.5" y="627.0" width="4.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="704.5" y="638.0"></text>
</g>
<g>
<title>__fget_light (21 samples, 0.32%)</title><rect x="701.7" y="611.0" width="3.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="704.7" y="622.0"></text>
</g>
<g>
<title>__fget (21 samples, 0.32%)</title><rect x="701.7" y="595.0" width="3.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="704.7" y="606.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.09%)</title><rect x="705.5" y="627.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="708.5" y="638.0"></text>
</g>
<g>
<title>fput (2 samples, 0.03%)</title><rect x="706.6" y="659.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="709.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="707.1" y="675.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="710.1" y="686.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.08%)</title><rect x="707.1" y="659.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="710.1" y="670.0"></text>
</g>
<g>
<title>__schedule (5 samples, 0.08%)</title><rect x="707.1" y="643.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="710.1" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.06%)</title><rect x="707.3" y="627.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="710.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8 samples, 0.12%)</title><rect x="708.8" y="803.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="711.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.06%)</title><rect x="709.5" y="787.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="712.5" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.06%)</title><rect x="709.5" y="771.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="712.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (2 samples, 0.03%)</title><rect x="710.2" y="819.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="713.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.get (1,120 samples, 17.19%)</title><rect x="710.8" y="819.0" width="202.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="713.8" y="830.0">ru/mail/polis/dao/kovalkov..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,110 samples, 17.04%)</title><rect x="710.8" y="803.0" width="201.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="713.8" y="814.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1,110 samples, 17.04%)</title><rect x="710.8" y="787.0" width="201.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="713.8" y="798.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (3 samples, 0.05%)</title><rect x="711.8" y="771.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="714.8" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (1,047 samples, 16.07%)</title><rect x="712.4" y="771.0" width="189.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="715.4" y="782.0">Java_org_rocksdb_RocksDB_..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (6 samples, 0.09%)</title><rect x="712.6" y="755.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="715.6" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (5 samples, 0.08%)</title><rect x="713.8" y="755.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="716.8" y="766.0"></text>
</g>
<g>
<title>cfree (19 samples, 0.29%)</title><rect x="714.9" y="755.0" width="3.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="717.9" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="717.8" y="739.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="720.8" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="717.8" y="723.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="720.8" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="717.8" y="707.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="720.8" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.05%)</title><rect x="718.4" y="755.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="721.4" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="718.9" y="755.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="721.9" y="766.0"></text>
</g>
<g>
<title>operator delete[](void*) (5 samples, 0.08%)</title><rect x="719.4" y="755.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="722.4" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (7 samples, 0.11%)</title><rect x="720.4" y="755.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="723.4" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (13 samples, 0.20%)</title><rect x="721.6" y="755.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="724.6" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (6 samples, 0.09%)</title><rect x="724.0" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="727.0" y="766.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (6 samples, 0.09%)</title><rect x="725.1" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="728.1" y="766.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (958 samples, 14.70%)</title><rect x="726.3" y="755.0" width="173.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="729.3" y="766.0">rocksdb_get_helper(JNI..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="727.1" y="739.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="730.1" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="727.8" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="730.8" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (12 samples, 0.18%)</title><rect x="728.3" y="739.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="731.3" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (8 samples, 0.12%)</title><rect x="729.0" y="723.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="732.0" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.12%)</title><rect x="730.5" y="739.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="733.5" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.08%)</title><rect x="731.0" y="723.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="734.0" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (4 samples, 0.06%)</title><rect x="731.9" y="739.0" width="0.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="734.9" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.12%)</title><rect x="732.7" y="739.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="735.7" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (4 samples, 0.06%)</title><rect x="734.1" y="739.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.1" y="750.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (815 samples, 12.51%)</title><rect x="734.8" y="739.0" width="147.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="737.8" y="750.0">rocksdb::DB::Get(ro..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (7 samples, 0.11%)</title><rect x="735.2" y="723.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="738.2" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (803 samples, 12.33%)</title><rect x="736.7" y="723.0" width="145.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="739.7" y="734.0">rocksdb::DB::Get(r..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (792 samples, 12.16%)</title><rect x="737.7" y="707.0" width="143.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.7" y="718.0">rocksdb::DBImpl::G..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (788 samples, 12.10%)</title><rect x="737.9" y="691.0" width="142.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.9" y="702.0">rocksdb::DBImpl::G..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (7 samples, 0.11%)</title><rect x="737.9" y="675.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="740.9" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (12 samples, 0.18%)</title><rect x="739.2" y="675.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="742.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (12 samples, 0.18%)</title><rect x="741.4" y="675.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="744.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (11 samples, 0.17%)</title><rect x="743.5" y="675.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="746.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.03%)</title><rect x="745.5" y="675.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="748.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (6 samples, 0.09%)</title><rect x="745.9" y="675.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="748.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (711 samples, 10.91%)</title><rect x="747.0" y="675.0" width="128.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="750.0" y="686.0">rocksdb::DBImpl:..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.06%)</title><rect x="750.8" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="753.8" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (18 samples, 0.28%)</title><rect x="751.7" y="659.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="754.7" y="670.0"></text>
</g>
<g>
<title>memcpy (5 samples, 0.08%)</title><rect x="755.1" y="659.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="758.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::DBImpl*) (25 samples, 0.38%)</title><rect x="756.0" y="659.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="759.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (3 samples, 0.05%)</title><rect x="757.1" y="643.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="760.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="757.7" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="760.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (9 samples, 0.14%)</title><rect x="758.0" y="643.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="761.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (4 samples, 0.06%)</title><rect x="758.9" y="627.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="761.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.06%)</title><rect x="759.7" y="643.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="762.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (4 samples, 0.06%)</title><rect x="759.7" y="627.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="762.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (6 samples, 0.09%)</title><rect x="760.6" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="763.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (20 samples, 0.31%)</title><rect x="761.8" y="659.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="764.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (10 samples, 0.15%)</title><rect x="761.8" y="643.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="764.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (5 samples, 0.08%)</title><rect x="762.4" y="627.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="765.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="762.9" y="611.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="765.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.03%)</title><rect x="763.3" y="627.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (6 samples, 0.09%)</title><rect x="763.6" y="643.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="766.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (3 samples, 0.05%)</title><rect x="764.7" y="643.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="767.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.06%)</title><rect x="765.5" y="659.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="768.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (4 samples, 0.06%)</title><rect x="766.2" y="659.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (578 samples, 8.87%)</title><rect x="766.9" y="659.0" width="104.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="769.9" y="670.0">rocksdb::Mem..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (8 samples, 0.12%)</title><rect x="768.7" y="643.0" width="1.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="771.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (554 samples, 8.50%)</title><rect x="770.3" y="643.0" width="100.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="773.3" y="654.0">rocksdb::Mem..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (545 samples, 8.37%)</title><rect x="771.2" y="627.0" width="98.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="774.2" y="638.0">/tmp/librock..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (12 samples, 0.18%)</title><rect x="772.3" y="611.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="775.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (472 samples, 7.24%)</title><rect x="774.5" y="611.0" width="85.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="777.5" y="622.0">rocksdb::I..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (39 samples, 0.60%)</title><rect x="812.5" y="595.0" width="7.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="815.5" y="606.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (22 samples, 0.34%)</title><rect x="819.6" y="595.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="822.6" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="823.2" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="826.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="823.2" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="826.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="823.2" y="547.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="826.2" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (71 samples, 1.09%)</title><rect x="823.6" y="595.0" width="12.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="826.6" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.09%)</title><rect x="835.4" y="579.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="838.4" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.09%)</title><rect x="835.4" y="563.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="838.4" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.09%)</title><rect x="835.4" y="547.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="838.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (121 samples, 1.86%)</title><rect x="836.5" y="595.0" width="21.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="839.5" y="606.0">r..</text>
</g>
<g>
<title>/tmp/librocksdbjni16370637072289468973.so (8 samples, 0.12%)</title><rect x="839.7" y="579.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="842.7" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (54 samples, 0.83%)</title><rect x="841.2" y="579.0" width="9.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="844.2" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="850.6" y="563.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="853.6" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="850.6" y="547.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="853.6" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="850.6" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="853.6" y="542.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (9 samples, 0.14%)</title><rect x="850.9" y="579.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="853.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="852.2" y="563.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="855.2" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="852.2" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="855.2" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="852.2" y="531.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="855.2" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (28 samples, 0.43%)</title><rect x="852.6" y="579.0" width="5.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="855.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="857.3" y="563.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="860.3" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="857.3" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="860.3" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="857.3" y="531.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="860.3" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="858.0" y="579.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="861.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="858.0" y="563.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="861.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="858.0" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="861.0" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.14%)</title><rect x="858.4" y="595.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="861.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (9 samples, 0.14%)</title><rect x="858.4" y="579.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="861.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (9 samples, 0.14%)</title><rect x="858.4" y="563.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="861.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (31 samples, 0.48%)</title><rect x="860.0" y="611.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="863.0" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.08%)</title><rect x="864.7" y="595.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="867.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.08%)</title><rect x="864.7" y="579.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="867.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.08%)</title><rect x="864.7" y="563.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="867.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (7 samples, 0.11%)</title><rect x="865.6" y="611.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.6" y="622.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (17 samples, 0.26%)</title><rect x="866.9" y="611.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="869.9" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="869.6" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="872.6" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="869.6" y="579.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="872.6" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="869.6" y="563.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="872.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (4 samples, 0.06%)</title><rect x="870.0" y="627.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="873.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (4 samples, 0.06%)</title><rect x="870.7" y="643.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="873.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::GetFromTable(rocksdb::LookupKey const&amp;, unsigned long, bool, rocksdb::ReadCallback*, bool*, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, bool*, bool*) (7 samples, 0.11%)</title><rect x="871.6" y="659.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (2 samples, 0.03%)</title><rect x="873.0" y="659.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="876.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (4 samples, 0.06%)</title><rect x="873.4" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.03%)</title><rect x="874.1" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="877.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (4 samples, 0.06%)</title><rect x="874.7" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="877.7" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="875.4" y="659.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="878.4" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="875.4" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="878.4" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="875.4" y="627.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="878.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (4 samples, 0.06%)</title><rect x="875.8" y="675.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long, rocksdb::Slice const*) (3 samples, 0.05%)</title><rect x="876.5" y="675.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="879.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*, bool) (4 samples, 0.06%)</title><rect x="877.0" y="675.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="880.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MergeContext::~MergeContext() (4 samples, 0.06%)</title><rect x="877.7" y="675.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (7 samples, 0.11%)</title><rect x="878.5" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (5 samples, 0.08%)</title><rect x="879.7" y="675.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (3 samples, 0.05%)</title><rect x="880.6" y="691.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="883.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::string*) (4 samples, 0.06%)</title><rect x="881.2" y="707.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.03%)</title><rect x="882.1" y="723.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="885.1" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.05%)</title><rect x="882.5" y="739.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (91 samples, 1.40%)</title><rect x="883.0" y="739.0" width="16.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.0" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="883.9" y="723.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="886.9" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.05%)</title><rect x="884.3" y="723.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="887.3" y="734.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.05%)</title><rect x="884.8" y="723.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="887.8" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.08%)</title><rect x="885.7" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.7" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.03%)</title><rect x="886.6" y="723.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="889.6" y="734.0"></text>
</g>
<g>
<title>jni_NewByteArray (68 samples, 1.04%)</title><rect x="887.0" y="723.0" width="12.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="890.0" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (5 samples, 0.08%)</title><rect x="888.3" y="707.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.11%)</title><rect x="889.2" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="892.2" y="718.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title><rect x="890.4" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="893.4" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (47 samples, 0.72%)</title><rect x="890.8" y="707.0" width="8.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (36 samples, 0.55%)</title><rect x="891.7" y="691.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="894.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (25 samples, 0.38%)</title><rect x="891.7" y="675.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.7" y="686.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="892.8" y="659.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="895.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (2 samples, 0.03%)</title><rect x="893.1" y="659.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="896.1" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (10 samples, 0.15%)</title><rect x="893.7" y="659.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.7" y="670.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (4 samples, 0.06%)</title><rect x="895.5" y="659.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.5" y="670.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="896.2" y="675.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="899.2" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (3 samples, 0.05%)</title><rect x="896.9" y="675.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="899.9" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="897.5" y="675.0" width="0.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="900.5" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.09%)</title><rect x="898.2" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="901.2" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="899.5" y="739.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="902.5" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="899.5" y="723.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="902.5" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="899.5" y="707.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="902.5" y="718.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (10 samples, 0.15%)</title><rect x="899.8" y="755.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="902.8" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (2 samples, 0.03%)</title><rect x="901.7" y="755.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.20%)</title><rect x="902.0" y="771.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="905.0" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.12%)</title><rect x="902.0" y="755.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="905.0" y="766.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (5 samples, 0.08%)</title><rect x="903.5" y="755.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.5" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (21 samples, 0.32%)</title><rect x="904.4" y="771.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="907.4" y="782.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="908.2" y="771.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="911.2" y="782.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (11 samples, 0.17%)</title><rect x="908.5" y="771.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.5" y="782.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (3 samples, 0.05%)</title><rect x="910.5" y="771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="913.5" y="782.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (4 samples, 0.06%)</title><rect x="911.1" y="771.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="914.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (10 samples, 0.15%)</title><rect x="911.8" y="803.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="914.8" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="912.9" y="787.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="915.9" y="798.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,500 samples, 23.02%)</title><rect x="914.0" y="899.0" width="271.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="917.0" y="910.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.06%)</title><rect x="914.9" y="883.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="917.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (4 samples, 0.06%)</title><rect x="914.9" y="867.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="917.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (4 samples, 0.06%)</title><rect x="914.9" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="917.9" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (487 samples, 7.48%)</title><rect x="915.6" y="883.0" width="88.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.6" y="894.0">one/nio/ne..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="919.6" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="922.6" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="919.6" y="851.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="922.6" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="919.6" y="835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="922.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="919.6" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="922.6" y="830.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (463 samples, 7.11%)</title><rect x="919.9" y="867.0" width="83.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="922.9" y="878.0">one/nio/n..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="923.8" y="851.0" width="0.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="926.8" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.08%)</title><rect x="924.5" y="851.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="927.5" y="862.0"></text>
</g>
<g>
<title>clock_gettime (25 samples, 0.38%)</title><rect x="925.4" y="851.0" width="4.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="928.4" y="862.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.09%)</title><rect x="928.8" y="835.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="931.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.08%)</title><rect x="929.0" y="819.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="932.0" y="830.0"></text>
</g>
<g>
<title>epoll_wait (408 samples, 6.26%)</title><rect x="929.9" y="851.0" width="73.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="932.9" y="862.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (374 samples, 5.74%)</title><rect x="936.1" y="835.0" width="67.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="939.1" y="846.0">entry_S..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (4 samples, 0.06%)</title><rect x="936.1" y="819.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="939.1" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (370 samples, 5.68%)</title><rect x="936.8" y="819.0" width="67.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="939.8" y="830.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (360 samples, 5.53%)</title><rect x="938.6" y="803.0" width="65.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="941.6" y="814.0">__x64_s..</text>
</g>
<g>
<title>do_epoll_wait (360 samples, 5.53%)</title><rect x="938.6" y="787.0" width="65.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="941.6" y="798.0">do_epol..</text>
</g>
<g>
<title>__fdget (7 samples, 0.11%)</title><rect x="939.1" y="771.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="942.1" y="782.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.11%)</title><rect x="939.1" y="755.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="942.1" y="766.0"></text>
</g>
<g>
<title>__fget (6 samples, 0.09%)</title><rect x="939.3" y="739.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="942.3" y="750.0"></text>
</g>
<g>
<title>ep_poll (341 samples, 5.23%)</title><rect x="940.8" y="771.0" width="61.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="943.8" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (49 samples, 0.75%)</title><rect x="943.3" y="755.0" width="8.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="946.3" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (40 samples, 0.61%)</title><rect x="944.9" y="739.0" width="7.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="947.9" y="750.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (31 samples, 0.48%)</title><rect x="946.2" y="723.0" width="5.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="949.2" y="734.0"></text>
</g>
<g>
<title>sock_poll (23 samples, 0.35%)</title><rect x="947.3" y="707.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="950.3" y="718.0"></text>
</g>
<g>
<title>tcp_poll (7 samples, 0.11%)</title><rect x="949.8" y="691.0" width="1.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="952.8" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="951.1" y="691.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="954.1" y="702.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.03%)</title><rect x="951.5" y="707.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="954.5" y="718.0"></text>
</g>
<g>
<title>sock_poll (2 samples, 0.03%)</title><rect x="951.8" y="723.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="954.8" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (4 samples, 0.06%)</title><rect x="952.2" y="755.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="955.2" y="766.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.03%)</title><rect x="952.9" y="755.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="955.9" y="766.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (269 samples, 4.13%)</title><rect x="953.3" y="755.0" width="48.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="956.3" y="766.0">sche..</text>
</g>
<g>
<title>schedule (7 samples, 0.11%)</title><rect x="953.3" y="739.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="956.3" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (262 samples, 4.02%)</title><rect x="954.5" y="739.0" width="47.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="957.5" y="750.0">sche..</text>
</g>
<g>
<title>schedule (262 samples, 4.02%)</title><rect x="954.5" y="723.0" width="47.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="957.5" y="734.0">sche..</text>
</g>
<g>
<title>__schedule (262 samples, 4.02%)</title><rect x="954.5" y="707.0" width="47.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="957.5" y="718.0">__sc..</text>
</g>
<g>
<title>finish_task_switch (242 samples, 3.71%)</title><rect x="958.2" y="691.0" width="43.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="961.2" y="702.0">fini..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.05%)</title><rect x="1002.0" y="755.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1005.0" y="766.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.08%)</title><rect x="1002.7" y="771.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1005.7" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,004 samples, 15.41%)</title><rect x="1003.8" y="883.0" width="181.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1006.8" y="894.0">one/nio/net/Session.pro..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (983 samples, 15.09%)</title><rect x="1007.6" y="867.0" width="178.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1010.6" y="878.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (659 samples, 10.12%)</title><rect x="1008.0" y="851.0" width="119.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1011.0" y="862.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (520 samples, 7.98%)</title><rect x="1013.8" y="835.0" width="94.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1016.8" y="846.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (520 samples, 7.98%)</title><rect x="1013.8" y="819.0" width="94.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.8" y="830.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (447 samples, 6.86%)</title><rect x="1013.8" y="803.0" width="80.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1016.8" y="814.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (51 samples, 0.78%)</title><rect x="1013.8" y="787.0" width="9.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1016.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (44 samples, 0.68%)</title><rect x="1015.0" y="771.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1018.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.14%)</title><rect x="1018.8" y="755.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.14%)</title><rect x="1018.8" y="739.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1021.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (7 samples, 0.11%)</title><rect x="1019.2" y="723.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1022.2" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (5 samples, 0.08%)</title><rect x="1020.5" y="755.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1023.5" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="1021.4" y="755.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1024.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.06%)</title><rect x="1022.3" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1025.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1022.3" y="739.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1022.3" y="723.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1025.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="1022.3" y="707.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1025.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.get (396 samples, 6.08%)</title><rect x="1023.0" y="787.0" width="71.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1026.0" y="798.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (323 samples, 4.96%)</title><rect x="1024.1" y="771.0" width="58.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1027.1" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (316 samples, 4.85%)</title><rect x="1025.4" y="755.0" width="57.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1028.4" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (15 samples, 0.23%)</title><rect x="1025.5" y="739.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1028.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 0.23%)</title><rect x="1025.5" y="723.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 0.23%)</title><rect x="1025.5" y="707.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 0.23%)</title><rect x="1025.5" y="691.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1028.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.14%)</title><rect x="1028.3" y="739.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1031.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (9 samples, 0.14%)</title><rect x="1028.3" y="723.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1031.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.11%)</title><rect x="1028.3" y="707.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1031.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.11%)</title><rect x="1028.3" y="691.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1031.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.11%)</title><rect x="1028.3" y="675.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1031.3" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.11%)</title><rect x="1028.3" y="659.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1031.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1028.6" y="643.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1031.6" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.06%)</title><rect x="1028.6" y="627.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1031.6" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.06%)</title><rect x="1028.6" y="611.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1031.6" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.06%)</title><rect x="1028.6" y="595.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1031.6" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.06%)</title><rect x="1028.6" y="579.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1031.6" y="590.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.06%)</title><rect x="1028.6" y="563.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1031.6" y="574.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.06%)</title><rect x="1028.6" y="547.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1031.6" y="558.0"></text>
</g>
<g>
<title>futex_wait_setup (3 samples, 0.05%)</title><rect x="1028.8" y="531.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1031.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="1029.5" y="707.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1032.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="1029.5" y="691.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1032.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (291 samples, 4.47%)</title><rect x="1029.9" y="739.0" width="52.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1032.9" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (290 samples, 4.45%)</title><rect x="1030.1" y="723.0" width="52.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1033.1" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (287 samples, 4.41%)</title><rect x="1030.6" y="707.0" width="52.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1033.6" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (287 samples, 4.41%)</title><rect x="1030.6" y="691.0" width="52.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1033.6" y="702.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (287 samples, 4.41%)</title><rect x="1030.6" y="675.0" width="52.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1033.6" y="686.0">jdk/i..</text>
</g>
<g>
<title>Unsafe_Unpark (18 samples, 0.28%)</title><rect x="1030.8" y="659.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1033.8" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="1031.3" y="643.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.3" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1031.7" y="643.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.7" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.05%)</title><rect x="1032.1" y="643.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.1" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="1032.6" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1035.6" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="1033.1" y="643.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.1" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.05%)</title><rect x="1033.5" y="643.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1036.5" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (263 samples, 4.04%)</title><rect x="1034.1" y="659.0" width="47.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1037.1" y="670.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (258 samples, 3.96%)</title><rect x="1035.0" y="643.0" width="46.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1038.0" y="654.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (258 samples, 3.96%)</title><rect x="1035.0" y="627.0" width="46.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1038.0" y="638.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (258 samples, 3.96%)</title><rect x="1035.0" y="611.0" width="46.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1038.0" y="622.0">__x6..</text>
</g>
<g>
<title>do_futex (258 samples, 3.96%)</title><rect x="1035.0" y="595.0" width="46.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1038.0" y="606.0">do_f..</text>
</g>
<g>
<title>futex_wake (256 samples, 3.93%)</title><rect x="1035.1" y="579.0" width="46.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1038.1" y="590.0">fute..</text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="1036.6" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1039.6" y="574.0"></text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.08%)</title><rect x="1037.1" y="563.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1040.1" y="574.0"></text>
</g>
<g>
<title>wake_up_q (239 samples, 3.67%)</title><rect x="1038.2" y="563.0" width="43.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1041.2" y="574.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (239 samples, 3.67%)</title><rect x="1038.2" y="547.0" width="43.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1041.2" y="558.0">try_..</text>
</g>
<g>
<title>__lock_text_start (239 samples, 3.67%)</title><rect x="1038.2" y="531.0" width="43.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1041.2" y="542.0">__lo..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="1081.7" y="659.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1084.7" y="670.0"></text>
</g>
<g>
<title>pthread_cond_signal (3 samples, 0.05%)</title><rect x="1082.1" y="659.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1085.1" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (16 samples, 0.25%)</title><rect x="1082.6" y="771.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (8 samples, 0.12%)</title><rect x="1082.6" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 0.12%)</title><rect x="1082.6" y="739.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (8 samples, 0.12%)</title><rect x="1082.6" y="723.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.6" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.12%)</title><rect x="1082.6" y="707.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="1083.3" y="691.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1086.3" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1083.3" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1086.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1083.3" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.3" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1083.3" y="643.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (8 samples, 0.12%)</title><rect x="1084.0" y="755.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1087.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (8 samples, 0.12%)</title><rect x="1084.0" y="739.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1087.0" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction$Murmur3_32Hasher.putBytes (8 samples, 0.12%)</title><rect x="1084.0" y="723.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1087.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (51 samples, 0.78%)</title><rect x="1085.5" y="771.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1088.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (50 samples, 0.77%)</title><rect x="1085.7" y="755.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1088.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (37 samples, 0.57%)</title><rect x="1088.0" y="739.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1091.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (5 samples, 0.08%)</title><rect x="1088.2" y="723.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1091.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.08%)</title><rect x="1088.2" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1091.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.08%)</title><rect x="1088.2" y="691.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1091.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.08%)</title><rect x="1088.2" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1091.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.05%)</title><rect x="1089.1" y="723.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1092.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="1089.1" y="707.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1092.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.05%)</title><rect x="1089.1" y="691.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1092.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.05%)</title><rect x="1089.1" y="675.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="1089.1" y="659.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1092.1" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="1089.1" y="643.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1092.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.05%)</title><rect x="1089.1" y="627.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1092.1" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (3 samples, 0.05%)</title><rect x="1089.1" y="611.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1092.1" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="1089.1" y="595.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1092.1" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="1089.1" y="579.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1092.1" y="590.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.05%)</title><rect x="1089.1" y="563.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1092.1" y="574.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.05%)</title><rect x="1089.1" y="547.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1092.1" y="558.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="1089.3" y="531.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1092.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 0.43%)</title><rect x="1089.7" y="723.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1092.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 0.41%)</title><rect x="1089.8" y="707.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1092.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 0.41%)</title><rect x="1089.8" y="691.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 0.41%)</title><rect x="1089.8" y="675.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1092.8" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (27 samples, 0.41%)</title><rect x="1089.8" y="659.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.8" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.03%)</title><rect x="1089.8" y="643.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1092.8" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="1089.8" y="627.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1092.8" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_signal (25 samples, 0.38%)</title><rect x="1090.2" y="643.0" width="4.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1093.2" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.38%)</title><rect x="1090.2" y="627.0" width="4.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1093.2" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.38%)</title><rect x="1090.2" y="611.0" width="4.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1093.2" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (25 samples, 0.38%)</title><rect x="1090.2" y="595.0" width="4.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1093.2" y="606.0"></text>
</g>
<g>
<title>do_futex (25 samples, 0.38%)</title><rect x="1090.2" y="579.0" width="4.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1093.2" y="590.0"></text>
</g>
<g>
<title>futex_wake (25 samples, 0.38%)</title><rect x="1090.2" y="563.0" width="4.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1093.2" y="574.0"></text>
</g>
<g>
<title>wake_up_q (25 samples, 0.38%)</title><rect x="1090.2" y="547.0" width="4.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1093.2" y="558.0"></text>
</g>
<g>
<title>try_to_wake_up (25 samples, 0.38%)</title><rect x="1090.2" y="531.0" width="4.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1093.2" y="542.0"></text>
</g>
<g>
<title>__lock_text_start (25 samples, 0.38%)</title><rect x="1090.2" y="515.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1093.2" y="526.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (67 samples, 1.03%)</title><rect x="1094.7" y="803.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1097.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (67 samples, 1.03%)</title><rect x="1094.7" y="787.0" width="12.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1097.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (29 samples, 0.45%)</title><rect x="1094.7" y="771.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1097.7" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.08%)</title><rect x="1099.1" y="755.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1102.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (38 samples, 0.58%)</title><rect x="1100.0" y="771.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (38 samples, 0.58%)</title><rect x="1100.0" y="755.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1103.0" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (38 samples, 0.58%)</title><rect x="1100.0" y="739.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1103.0" y="750.0"></text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (17 samples, 0.26%)</title><rect x="1100.5" y="723.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.5" y="734.0"></text>
</g>
<g>
<title>itable stub (17 samples, 0.26%)</title><rect x="1103.8" y="723.0" width="3.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1106.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6 samples, 0.09%)</title><rect x="1106.9" y="803.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1109.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.09%)</title><rect x="1106.9" y="787.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1109.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.09%)</title><rect x="1106.9" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1109.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="1107.2" y="755.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="1107.2" y="739.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1107.2" y="723.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (72 samples, 1.11%)</title><rect x="1108.0" y="835.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1111.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (16 samples, 0.25%)</title><rect x="1111.2" y="819.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1114.2" y="830.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.03%)</title><rect x="1111.2" y="803.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.09%)</title><rect x="1111.8" y="803.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.8" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (6 samples, 0.09%)</title><rect x="1111.8" y="787.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.09%)</title><rect x="1111.8" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.8" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="1111.8" y="755.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1114.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.09%)</title><rect x="1113.0" y="803.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1116.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.09%)</title><rect x="1113.0" y="787.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1116.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.09%)</title><rect x="1113.0" y="771.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1116.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="1113.7" y="755.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1116.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.45%)</title><rect x="1114.1" y="819.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1117.1" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 0.41%)</title><rect x="1114.5" y="803.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1117.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.11%)</title><rect x="1117.9" y="787.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.9" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.11%)</title><rect x="1117.9" y="771.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1120.9" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.11%)</title><rect x="1117.9" y="755.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.9" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.11%)</title><rect x="1117.9" y="739.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1120.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="1118.5" y="723.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="1118.5" y="707.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.5" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="1118.8" y="691.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1121.8" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (9 samples, 0.14%)</title><rect x="1119.4" y="819.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1122.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (17 samples, 0.26%)</title><rect x="1121.0" y="835.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1124.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (18 samples, 0.28%)</title><rect x="1124.1" y="835.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1127.1" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (3 samples, 0.05%)</title><rect x="1124.4" y="819.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1127.4" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.20%)</title><rect x="1125.0" y="819.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1128.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.06%)</title><rect x="1126.4" y="803.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.4" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1126.6" y="787.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1126.6" y="771.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1126.6" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (321 samples, 4.93%)</title><rect x="1127.5" y="851.0" width="58.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1130.5" y="862.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (290 samples, 4.45%)</title><rect x="1129.1" y="835.0" width="52.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1132.1" y="846.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (76 samples, 1.17%)</title><rect x="1131.5" y="819.0" width="13.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1134.5" y="830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="1133.7" y="803.0" width="0.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1136.7" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.08%)</title><rect x="1134.4" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.4" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.03%)</title><rect x="1135.5" y="803.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1138.5" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (50 samples, 0.77%)</title><rect x="1135.8" y="803.0" width="9.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1138.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (9 samples, 0.14%)</title><rect x="1137.8" y="787.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.8" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (30 samples, 0.46%)</title><rect x="1139.5" y="787.0" width="5.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1142.5" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.03%)</title><rect x="1144.9" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.9" y="814.0"></text>
</g>
<g>
<title>__recv (192 samples, 2.95%)</title><rect x="1145.3" y="819.0" width="34.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1148.3" y="830.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (180 samples, 2.76%)</title><rect x="1147.4" y="803.0" width="32.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1150.4" y="814.0">en..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.05%)</title><rect x="1147.4" y="787.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (177 samples, 2.72%)</title><rect x="1148.0" y="787.0" width="32.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1151.0" y="798.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (165 samples, 2.53%)</title><rect x="1150.2" y="771.0" width="29.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1153.2" y="782.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (165 samples, 2.53%)</title><rect x="1150.2" y="755.0" width="29.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1153.2" y="766.0">__..</text>
</g>
<g>
<title>sock_recvmsg (145 samples, 2.23%)</title><rect x="1151.4" y="739.0" width="26.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1154.4" y="750.0">s..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.06%)</title><rect x="1151.8" y="723.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1154.8" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (113 samples, 1.73%)</title><rect x="1152.5" y="723.0" width="20.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1155.5" y="734.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.05%)</title><rect x="1153.2" y="707.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1156.2" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (106 samples, 1.63%)</title><rect x="1153.8" y="707.0" width="19.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1156.8" y="718.0"></text>
</g>
<g>
<title>__kfree_skb (13 samples, 0.20%)</title><rect x="1158.1" y="691.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1161.1" y="702.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="1158.1" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1161.1" y="686.0"></text>
</g>
<g>
<title>skb_release_all (11 samples, 0.17%)</title><rect x="1158.5" y="675.0" width="2.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1161.5" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (7 samples, 0.11%)</title><rect x="1158.8" y="659.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1161.8" y="670.0"></text>
</g>
<g>
<title>dst_release (6 samples, 0.09%)</title><rect x="1159.0" y="643.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1162.0" y="654.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="1160.1" y="659.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1163.1" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="1160.5" y="691.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1163.5" y="702.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.12%)</title><rect x="1161.2" y="691.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.05%)</title><rect x="1161.2" y="675.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.06%)</title><rect x="1161.9" y="675.0" width="0.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1164.9" y="686.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (4 samples, 0.06%)</title><rect x="1161.9" y="659.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1164.9" y="670.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (34 samples, 0.52%)</title><rect x="1162.7" y="691.0" width="6.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>__skb_datagram_iter (34 samples, 0.52%)</title><rect x="1162.7" y="675.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1165.7" y="686.0"></text>
</g>
<g>
<title>simple_copy_to_iter (22 samples, 0.34%)</title><rect x="1164.8" y="659.0" width="4.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1167.8" y="670.0"></text>
</g>
<g>
<title>__check_object_size (8 samples, 0.12%)</title><rect x="1164.8" y="643.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1167.8" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.08%)</title><rect x="1165.4" y="627.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1168.4" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.17%)</title><rect x="1166.5" y="643.0" width="1.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1169.5" y="654.0"></text>
</g>
<g>
<title>copy_user_generic_string (9 samples, 0.14%)</title><rect x="1166.6" y="627.0" width="1.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1169.6" y="638.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.03%)</title><rect x="1168.4" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1171.4" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (10 samples, 0.15%)</title><rect x="1168.8" y="691.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1171.8" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="1170.6" y="691.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1173.6" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (10 samples, 0.15%)</title><rect x="1171.0" y="691.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.08%)</title><rect x="1171.9" y="675.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1174.9" y="686.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.06%)</title><rect x="1172.1" y="659.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1175.1" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (26 samples, 0.40%)</title><rect x="1173.0" y="723.0" width="4.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1176.0" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (25 samples, 0.38%)</title><rect x="1173.2" y="707.0" width="4.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1176.2" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (24 samples, 0.37%)</title><rect x="1173.3" y="691.0" width="4.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1176.3" y="702.0"></text>
</g>
<g>
<title>aa_label_next_confined (3 samples, 0.05%)</title><rect x="1175.7" y="675.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (7 samples, 0.11%)</title><rect x="1176.2" y="675.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1179.2" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (5 samples, 0.08%)</title><rect x="1176.6" y="659.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.20%)</title><rect x="1177.7" y="739.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.14%)</title><rect x="1177.7" y="723.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.14%)</title><rect x="1177.7" y="707.0" width="1.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.14%)</title><rect x="1177.7" y="691.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.06%)</title><rect x="1179.3" y="723.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1182.3" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.14%)</title><rect x="1180.0" y="819.0" width="1.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (22 samples, 0.34%)</title><rect x="1181.7" y="835.0" width="4.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="1182.0" y="819.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4 samples, 0.06%)</title><rect x="1182.6" y="819.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1185.6" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (13 samples, 0.20%)</title><rect x="1183.3" y="819.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.11%)</title><rect x="1184.4" y="803.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1187.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.09%)</title><rect x="1184.6" y="787.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1187.6" y="798.0"></text>
</g>
<g>
<title>start_thread (24 samples, 0.37%)</title><rect x="1185.7" y="899.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1188.7" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (24 samples, 0.37%)</title><rect x="1185.7" y="883.0" width="4.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1188.7" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (24 samples, 0.37%)</title><rect x="1185.7" y="867.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 0.20%)</title><rect x="1185.7" y="851.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="862.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 0.12%)</title><rect x="1185.7" y="835.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 0.09%)</title><rect x="1185.7" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="830.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.08%)</title><rect x="1185.8" y="803.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.03%)</title><rect x="1186.7" y="819.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.7" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.03%)</title><rect x="1186.7" y="803.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.7" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1186.7" y="787.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.03%)</title><rect x="1186.7" y="771.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.7" y="782.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (4 samples, 0.06%)</title><rect x="1187.1" y="835.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.06%)</title><rect x="1187.1" y="819.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.0] (4 samples, 0.06%)</title><rect x="1187.1" y="803.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.05%)</title><rect x="1187.3" y="787.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="798.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (9 samples, 0.14%)</title><rect x="1188.0" y="851.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.0" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (8 samples, 0.12%)</title><rect x="1188.0" y="835.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (8 samples, 0.12%)</title><rect x="1188.0" y="819.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.12%)</title><rect x="1188.0" y="803.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.0" y="814.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (8 samples, 0.12%)</title><rect x="1188.0" y="787.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.0" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (5 samples, 0.08%)</title><rect x="1188.0" y="771.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (4 samples, 0.06%)</title><rect x="1188.2" y="755.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (2 samples, 0.03%)</title><rect x="1188.9" y="771.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1189.6" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.6" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1189.6" y="835.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.6" y="846.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="1189.6" y="819.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1192.6" y="830.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1189.6" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.6" y="814.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1189.6" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.6" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1189.6" y="771.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.6" y="782.0"></text>
</g>
</g>
</svg>
