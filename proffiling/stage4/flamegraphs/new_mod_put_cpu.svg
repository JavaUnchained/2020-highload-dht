<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (6,264 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="10.0" y="915.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="899.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="883.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (3 samples, 0.05%)</title><rect x="10.0" y="867.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>[not_walkable_Java] (22 samples, 0.35%)</title><rect x="10.6" y="915.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.6" y="926.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (3 samples, 0.05%)</title><rect x="10.6" y="899.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (16 samples, 0.26%)</title><rect x="11.5" y="899.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (16 samples, 0.26%)</title><rect x="11.5" y="883.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.5" y="894.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (9 samples, 0.14%)</title><rect x="11.5" y="867.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title><rect x="11.5" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.5" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (6 samples, 0.10%)</title><rect x="11.9" y="851.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.9" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.11%)</title><rect x="13.2" y="867.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.2" y="878.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (5 samples, 0.08%)</title><rect x="13.6" y="851.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.6" y="862.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title><rect x="13.8" y="835.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.03%)</title><rect x="14.1" y="835.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.1" y="846.0"></text>
</g>
<g>
<title>[unknown] (127 samples, 2.03%)</title><rect x="14.7" y="915.0" width="23.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="17.7" y="926.0">[..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="14.7" y="899.0" width="0.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="17.7" y="910.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (6 samples, 0.10%)</title><rect x="15.7" y="899.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.7" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.10%)</title><rect x="15.7" y="883.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="18.7" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.10%)</title><rect x="15.7" y="867.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="18.7" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 0.10%)</title><rect x="15.7" y="851.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="18.7" y="862.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.08%)</title><rect x="15.8" y="835.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="18.8" y="846.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.06%)</title><rect x="16.0" y="819.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="19.0" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.05%)</title><rect x="16.2" y="803.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="19.2" y="814.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="16.2" y="787.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="19.2" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="16.2" y="771.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="19.2" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="16.2" y="755.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="19.2" y="766.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="16.8" y="899.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (*)(void*), rocksdb::BGThreadMetadata*&gt; &gt; &gt;::~_State_impl() (113 samples, 1.80%)</title><rect x="17.3" y="899.0" width="21.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="20.3" y="910.0">s..</text>
</g>
<g>
<title>[unknown] (113 samples, 1.80%)</title><rect x="17.3" y="883.0" width="21.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="20.3" y="894.0">[..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (113 samples, 1.80%)</title><rect x="17.3" y="867.0" width="21.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="20.3" y="878.0">/..</text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThreadWrapper(void*) (113 samples, 1.80%)</title><rect x="17.3" y="851.0" width="21.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.3" y="862.0">r..</text>
</g>
<g>
<title>rocksdb::ThreadPoolImpl::Impl::BGThread(unsigned long) (113 samples, 1.80%)</title><rect x="17.3" y="835.0" width="21.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.3" y="846.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundCallFlush(rocksdb::Env::Priority) (113 samples, 1.80%)</title><rect x="17.3" y="819.0" width="21.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.3" y="830.0">r..</text>
</g>
<g>
<title>rocksdb::DBImpl::BackgroundFlush(bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::FlushReason*, rocksdb::Env::Priority) (111 samples, 1.77%)</title><rect x="17.3" y="803.0" width="21.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.3" y="814.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTablesToOutputFiles(rocksdb::autovector&lt;rocksdb::DBImpl::BGFlushArg, 8ul&gt; const&amp;, bool*, rocksdb::JobContext*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (111 samples, 1.77%)</title><rect x="17.3" y="787.0" width="21.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.3" y="798.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::FlushMemTableToOutputFile(rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, bool*, rocksdb::JobContext*, rocksdb::SuperVersionContext*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;&amp;, unsigned long, rocksdb::SnapshotChecker*, rocksdb::LogBuffer*, rocksdb::Env::Priority) (110 samples, 1.76%)</title><rect x="17.3" y="771.0" width="20.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="20.3" y="782.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::Run(rocksdb::LogsWithPrepTracker*, rocksdb::FileMetaData*) (110 samples, 1.76%)</title><rect x="17.3" y="755.0" width="20.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::FlushJob::WriteLevel0Table() (110 samples, 1.76%)</title><rect x="17.3" y="739.0" width="20.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::BuildTable(std::string const&amp;, rocksdb::Env*, rocksdb::FileSystem*, rocksdb::ImmutableCFOptions const&amp;, rocksdb::MutableCFOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::vector&lt;std::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt; &gt; &gt; &gt;, rocksdb::FileMetaData*, rocksdb::InternalKeyComparator const&amp;, std::vector&lt;std::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::default_delete&lt;rocksdb::IntTblPropCollectorFactory&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;rocksdb::IntTblPropCollectorFactory, std::default_del (107 samples, 1.71%)</title><rect x="17.7" y="723.0" width="20.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Add(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (43 samples, 0.69%)</title><rect x="17.7" y="707.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="20.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::Flush() (36 samples, 0.57%)</title><rect x="17.9" y="691.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::BlockBuilder*, rocksdb::BlockHandle*, bool) (36 samples, 0.57%)</title><rect x="17.9" y="675.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteBlock(rocksdb::Slice const&amp;, rocksdb::BlockHandle*, bool) (36 samples, 0.57%)</title><rect x="17.9" y="659.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::CompressAndVerifyBlock(rocksdb::Slice const&amp;, bool, rocksdb::CompressionContext&amp;, rocksdb::UncompressionContext*, std::string*, rocksdb::Slice*, rocksdb::CompressionType*, rocksdb::Status*) (34 samples, 0.54%)</title><rect x="17.9" y="643.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="20.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::CompressBlock(rocksdb::Slice const&amp;, rocksdb::CompressionInfo const&amp;, rocksdb::CompressionType*, unsigned int, bool, std::string*, std::string*, std::string*) (34 samples, 0.54%)</title><rect x="17.9" y="627.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.9" y="638.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (34 samples, 0.54%)</title><rect x="17.9" y="611.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="20.9" y="622.0"></text>
</g>
<g>
<title>snappy::RawCompress(char const*, unsigned long, char*, unsigned long*) (34 samples, 0.54%)</title><rect x="17.9" y="595.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="20.9" y="606.0"></text>
</g>
<g>
<title>snappy::Compress(snappy::Source*, snappy::Sink*) (33 samples, 0.53%)</title><rect x="18.1" y="579.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="21.1" y="590.0"></text>
</g>
<g>
<title>snappy::internal::CompressFragment(char const*, unsigned long, char*, unsigned short*, int) (33 samples, 0.53%)</title><rect x="18.1" y="563.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.1" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (18 samples, 0.29%)</title><rect x="19.6" y="547.0" width="3.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="22.6" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.06%)</title><rect x="20.7" y="531.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="23.7" y="542.0"></text>
</g>
<g>
<title>snappy::LittleEndian::FromHost32(unsigned int) (2 samples, 0.03%)</title><rect x="20.9" y="515.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.9" y="526.0"></text>
</g>
<g>
<title>snappy::LittleEndian::Store32(void*, unsigned int) (3 samples, 0.05%)</title><rect x="21.5" y="531.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="24.5" y="542.0"></text>
</g>
<g>
<title>std::pair&lt;unsigned long, bool&gt;::pair&lt;unsigned long&amp;, bool, true&gt;(unsigned long&amp;, bool&amp;&amp;) (4 samples, 0.06%)</title><rect x="22.1" y="531.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="25.1" y="542.0"></text>
</g>
<g>
<title>snappy::LittleEndian::IsLittleEndian() (6 samples, 0.10%)</title><rect x="23.0" y="547.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="26.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::BlockBasedTableBuilder::WriteRawBlock(rocksdb::Slice const&amp;, rocksdb::CompressionType, rocksdb::BlockHandle*, bool) (2 samples, 0.03%)</title><rect x="24.3" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="27.3" y="654.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (4 samples, 0.06%)</title><rect x="25.1" y="691.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::Next() (56 samples, 0.89%)</title><rect x="26.0" y="707.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="29.0" y="718.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.06%)</title><rect x="26.2" y="691.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="29.2" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="27.0" y="691.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="30.0" y="702.0"></text>
</g>
<g>
<title>memcpy (4 samples, 0.06%)</title><rect x="27.5" y="691.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="30.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::CompactionIterator::NextFromInput() (35 samples, 0.56%)</title><rect x="28.3" y="691.0" width="6.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.3" y="702.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (9 samples, 0.14%)</title><rect x="29.0" y="675.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="32.0" y="686.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.11%)</title><rect x="30.7" y="675.0" width="1.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="33.7" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.08%)</title><rect x="32.0" y="675.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="35.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Next() (5 samples, 0.08%)</title><rect x="33.4" y="675.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="36.4" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="33.5" y="659.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="36.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::key() const (2 samples, 0.03%)</title><rect x="34.3" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="37.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Next() (4 samples, 0.06%)</title><rect x="34.9" y="691.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="37.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::Valid() const (2 samples, 0.03%)</title><rect x="35.6" y="691.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="38.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::MemTableIterator::value() const (2 samples, 0.03%)</title><rect x="36.2" y="691.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="39.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::FileMetaData::UpdateBoundaries(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, unsigned long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="36.6" y="707.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.6" y="718.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.10%)</title><rect x="38.6" y="915.0" width="1.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="41.6" y="926.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="39.0" y="899.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="42.0" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.03%)</title><rect x="39.4" y="899.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="42.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="39.4" y="883.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="42.4" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="39.4" y="867.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="42.4" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="39.4" y="851.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="42.4" y="862.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="39.4" y="835.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="42.4" y="846.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="39.4" y="819.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="42.4" y="830.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.03%)</title><rect x="39.4" y="803.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="42.4" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.03%)</title><rect x="39.4" y="787.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="42.4" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="39.4" y="771.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="42.4" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,767 samples, 76.10%)</title><rect x="40.0" y="915.0" width="898.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.0" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,767 samples, 76.10%)</title><rect x="40.0" y="899.0" width="898.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.0" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,767 samples, 76.10%)</title><rect x="40.0" y="883.0" width="898.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.0" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (13 samples, 0.21%)</title><rect x="40.1" y="867.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.21%)</title><rect x="40.1" y="851.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.21%)</title><rect x="40.1" y="835.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.03%)</title><rect x="40.1" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.16%)</title><rect x="40.5" y="819.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (453 samples, 7.23%)</title><rect x="42.6" y="867.0" width="85.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="45.6" y="878.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (451 samples, 7.20%)</title><rect x="43.0" y="851.0" width="84.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="46.0" y="862.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (267 samples, 4.26%)</title><rect x="43.5" y="835.0" width="50.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.5" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (62 samples, 0.99%)</title><rect x="43.5" y="819.0" width="11.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (62 samples, 0.99%)</title><rect x="43.5" y="803.0" width="11.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (48 samples, 0.77%)</title><rect x="46.0" y="787.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="49.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (48 samples, 0.77%)</title><rect x="46.0" y="771.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (48 samples, 0.77%)</title><rect x="46.0" y="755.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.0" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.03%)</title><rect x="46.2" y="739.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="49.2" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="46.2" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="49.2" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 0.72%)</title><rect x="46.5" y="739.0" width="8.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="49.5" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (45 samples, 0.72%)</title><rect x="46.5" y="723.0" width="8.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="49.5" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (45 samples, 0.72%)</title><rect x="46.5" y="707.0" width="8.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="49.5" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (45 samples, 0.72%)</title><rect x="46.5" y="691.0" width="8.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="49.5" y="702.0"></text>
</g>
<g>
<title>do_futex (45 samples, 0.72%)</title><rect x="46.5" y="675.0" width="8.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.5" y="686.0"></text>
</g>
<g>
<title>futex_wake (45 samples, 0.72%)</title><rect x="46.5" y="659.0" width="8.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="49.5" y="670.0"></text>
</g>
<g>
<title>wake_up_q (40 samples, 0.64%)</title><rect x="47.5" y="643.0" width="7.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="50.5" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (40 samples, 0.64%)</title><rect x="47.5" y="627.0" width="7.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="50.5" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (40 samples, 0.64%)</title><rect x="47.5" y="611.0" width="7.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="50.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (205 samples, 3.27%)</title><rect x="55.2" y="819.0" width="38.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.2" y="830.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (192 samples, 3.07%)</title><rect x="57.5" y="803.0" width="36.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="60.5" y="814.0">jdk..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="57.7" y="787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="60.7" y="798.0"></text>
</g>
<g>
<title>Unsafe_Park (36 samples, 0.57%)</title><rect x="58.0" y="787.0" width="6.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="61.0" y="798.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.05%)</title><rect x="58.4" y="771.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="61.4" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 0.18%)</title><rect x="59.0" y="771.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="62.0" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.08%)</title><rect x="59.7" y="755.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="62.7" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="60.7" y="755.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="63.7" y="766.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="61.2" y="771.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="64.2" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.13%)</title><rect x="61.8" y="771.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="64.8" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.10%)</title><rect x="62.2" y="755.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="65.2" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.10%)</title><rect x="62.2" y="739.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="65.2" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.08%)</title><rect x="62.2" y="723.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="65.2" y="734.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.06%)</title><rect x="62.4" y="707.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="65.4" y="718.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.05%)</title><rect x="62.4" y="691.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="65.4" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="63.5" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="66.5" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.05%)</title><rect x="64.1" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="67.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (147 samples, 2.35%)</title><rect x="64.8" y="787.0" width="27.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="67.8" y="798.0">[..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.05%)</title><rect x="64.8" y="771.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="67.8" y="782.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (2 samples, 0.03%)</title><rect x="65.4" y="771.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="68.4" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (136 samples, 2.17%)</title><rect x="65.8" y="771.0" width="25.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="68.8" y="782.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (131 samples, 2.09%)</title><rect x="66.7" y="755.0" width="24.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="69.7" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (131 samples, 2.09%)</title><rect x="66.7" y="739.0" width="24.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="69.7" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (128 samples, 2.04%)</title><rect x="67.1" y="723.0" width="24.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="70.1" y="734.0">_..</text>
</g>
<g>
<title>do_futex (127 samples, 2.03%)</title><rect x="67.1" y="707.0" width="23.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="70.1" y="718.0">d..</text>
</g>
<g>
<title>futex_wait (127 samples, 2.03%)</title><rect x="67.1" y="691.0" width="23.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="70.1" y="702.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (121 samples, 1.93%)</title><rect x="67.8" y="675.0" width="22.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="70.8" y="686.0">f..</text>
</g>
<g>
<title>schedule (121 samples, 1.93%)</title><rect x="67.8" y="659.0" width="22.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="70.8" y="670.0">s..</text>
</g>
<g>
<title>__sched_text_start (120 samples, 1.92%)</title><rect x="68.0" y="643.0" width="22.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="71.0" y="654.0">_..</text>
</g>
<g>
<title>finish_task_switch (113 samples, 1.80%)</title><rect x="69.3" y="627.0" width="21.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="72.3" y="638.0">f..</text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.03%)</title><rect x="90.6" y="675.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="93.6" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.08%)</title><rect x="91.4" y="771.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="94.4" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.10%)</title><rect x="92.5" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="95.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (3 samples, 0.05%)</title><rect x="93.8" y="835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (3 samples, 0.05%)</title><rect x="93.8" y="819.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.05%)</title><rect x="93.8" y="803.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="94.0" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="94.0" y="771.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="97.0" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="94.0" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="94.0" y="739.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="97.0" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="94.0" y="723.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="97.0" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="94.0" y="707.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="97.0" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="94.0" y="691.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="97.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="94.0" y="675.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="97.0" y="686.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="94.0" y="659.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="97.0" y="670.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="94.0" y="643.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="97.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (178 samples, 2.84%)</title><rect x="94.4" y="835.0" width="33.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.4" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (178 samples, 2.84%)</title><rect x="94.4" y="819.0" width="33.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.4" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (178 samples, 2.84%)</title><rect x="94.4" y="803.0" width="33.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.4" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (178 samples, 2.84%)</title><rect x="94.4" y="787.0" width="33.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.4" y="798.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (175 samples, 2.79%)</title><rect x="95.0" y="771.0" width="32.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.0" y="782.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.18%)</title><rect x="95.3" y="755.0" width="2.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="98.3" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.06%)</title><rect x="95.7" y="739.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="98.7" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.05%)</title><rect x="96.7" y="739.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="99.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (162 samples, 2.59%)</title><rect x="97.4" y="755.0" width="30.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="100.4" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (160 samples, 2.55%)</title><rect x="97.6" y="739.0" width="30.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="100.6" y="750.0">en..</text>
</g>
<g>
<title>do_syscall_64 (160 samples, 2.55%)</title><rect x="97.6" y="723.0" width="30.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="100.6" y="734.0">do..</text>
</g>
<g>
<title>__x64_sys_futex (158 samples, 2.52%)</title><rect x="98.0" y="707.0" width="29.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="101.0" y="718.0">__..</text>
</g>
<g>
<title>do_futex (158 samples, 2.52%)</title><rect x="98.0" y="691.0" width="29.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="101.0" y="702.0">do..</text>
</g>
<g>
<title>futex_wake (158 samples, 2.52%)</title><rect x="98.0" y="675.0" width="29.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="101.0" y="686.0">fu..</text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.03%)</title><rect x="98.3" y="659.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="101.3" y="670.0"></text>
</g>
<g>
<title>wake_up_q (153 samples, 2.44%)</title><rect x="98.9" y="659.0" width="28.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="101.9" y="670.0">wa..</text>
</g>
<g>
<title>try_to_wake_up (153 samples, 2.44%)</title><rect x="98.9" y="643.0" width="28.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="101.9" y="654.0">tr..</text>
</g>
<g>
<title>__lock_text_start (153 samples, 2.44%)</title><rect x="98.9" y="627.0" width="28.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="101.9" y="638.0">__..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$78/1266216553.run (1,689 samples, 26.96%)</title><rect x="127.9" y="867.0" width="318.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="130.9" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="127.9" y="851.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="130.9" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="127.9" y="835.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="130.9" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="127.9" y="819.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="130.9" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="127.9" y="803.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="130.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$1 (1,687 samples, 26.93%)</title><rect x="128.3" y="851.0" width="317.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="131.3" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncS..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (609 samples, 9.72%)</title><rect x="128.5" y="835.0" width="114.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="131.5" y="846.0">one/nio/http/H..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.16%)</title><rect x="130.4" y="819.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="133.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.16%)</title><rect x="130.4" y="803.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.16%)</title><rect x="130.4" y="787.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="133.4" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="130.8" y="771.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="133.8" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="130.8" y="755.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="133.8" y="766.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="131.1" y="771.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="134.1" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="131.5" y="771.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="134.5" y="782.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="131.7" y="755.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="134.7" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="131.7" y="739.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="134.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (581 samples, 9.28%)</title><rect x="132.3" y="819.0" width="109.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.3" y="830.0">one/nio/http/..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.26%)</title><rect x="132.3" y="803.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.08%)</title><rect x="133.8" y="787.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="136.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="133.8" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="133.8" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="136.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (5 samples, 0.08%)</title><rect x="133.8" y="739.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.08%)</title><rect x="133.8" y="723.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="136.8" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="134.3" y="707.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="137.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="134.3" y="691.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="137.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="134.3" y="675.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="137.3" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="134.7" y="787.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="137.7" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="134.7" y="771.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="137.7" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="134.7" y="755.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="137.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (565 samples, 9.02%)</title><rect x="135.3" y="803.0" width="106.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.3" y="814.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/Session.write (565 samples, 9.02%)</title><rect x="135.3" y="787.0" width="106.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.3" y="798.0">one/nio/net/S..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.06%)</title><rect x="135.5" y="771.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="138.5" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (560 samples, 8.94%)</title><rect x="136.2" y="771.0" width="105.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="139.2" y="782.0">one/nio/net/S..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (558 samples, 8.91%)</title><rect x="136.6" y="755.0" width="105.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.6" y="766.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.06%)</title><rect x="137.5" y="739.0" width="0.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="140.5" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="137.9" y="723.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="140.9" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.05%)</title><rect x="138.3" y="739.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="141.3" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="138.5" y="723.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="141.5" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="138.5" y="707.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="141.5" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="138.5" y="691.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="141.5" y="702.0"></text>
</g>
<g>
<title>send (545 samples, 8.70%)</title><rect x="138.9" y="739.0" width="102.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="141.9" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (542 samples, 8.65%)</title><rect x="139.2" y="723.0" width="102.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="142.2" y="734.0">entry_SYSCAL..</text>
</g>
<g>
<title>do_syscall_64 (542 samples, 8.65%)</title><rect x="139.2" y="707.0" width="102.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="142.2" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (2 samples, 0.03%)</title><rect x="140.0" y="691.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="143.0" y="702.0"></text>
</g>
<g>
<title>__x64_sys_sendto (530 samples, 8.46%)</title><rect x="140.4" y="691.0" width="99.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="143.4" y="702.0">__x64_sys_se..</text>
</g>
<g>
<title>__sys_sendto (528 samples, 8.43%)</title><rect x="140.4" y="675.0" width="99.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="143.4" y="686.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (503 samples, 8.03%)</title><rect x="141.1" y="659.0" width="94.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="144.1" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.06%)</title><rect x="141.5" y="643.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="144.5" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (485 samples, 7.74%)</title><rect x="142.2" y="643.0" width="91.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="145.2" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (483 samples, 7.71%)</title><rect x="142.6" y="627.0" width="91.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="145.6" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_rate_check_app_limited (8 samples, 0.13%)</title><rect x="143.4" y="611.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="146.4" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (470 samples, 7.50%)</title><rect x="144.9" y="611.0" width="88.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="147.9" y="622.0">tcp_sendms..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="145.6" y="595.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="148.6" y="606.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="145.6" y="579.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="148.6" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (3 samples, 0.05%)</title><rect x="146.4" y="595.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="149.4" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.05%)</title><rect x="146.4" y="579.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="149.4" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (22 samples, 0.35%)</title><rect x="147.0" y="595.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="150.0" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (22 samples, 0.35%)</title><rect x="147.0" y="579.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="150.0" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (12 samples, 0.19%)</title><rect x="147.7" y="563.0" width="2.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.7" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (9 samples, 0.14%)</title><rect x="147.9" y="547.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="150.9" y="558.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.03%)</title><rect x="149.2" y="531.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="152.2" y="542.0"></text>
</g>
<g>
<title>memset (2 samples, 0.03%)</title><rect x="149.6" y="547.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="152.6" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.06%)</title><rect x="150.0" y="563.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="153.0" y="574.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.03%)</title><rect x="151.1" y="595.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="154.1" y="606.0"></text>
</g>
<g>
<title>tcp_push (429 samples, 6.85%)</title><rect x="151.7" y="595.0" width="80.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="154.7" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (428 samples, 6.83%)</title><rect x="151.7" y="579.0" width="80.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="154.7" y="590.0">__tcp_pus..</text>
</g>
<g>
<title>tcp_write_xmit (426 samples, 6.80%)</title><rect x="152.0" y="563.0" width="80.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="155.0" y="574.0">tcp_write..</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.05%)</title><rect x="152.6" y="547.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="155.6" y="558.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (402 samples, 6.42%)</title><rect x="153.2" y="547.0" width="75.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="156.2" y="558.0">__tcp_tr..</text>
</g>
<g>
<title>ip_queue_xmit (394 samples, 6.29%)</title><rect x="154.1" y="531.0" width="74.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.1" y="542.0">ip_queue..</text>
</g>
<g>
<title>__ip_queue_xmit (393 samples, 6.27%)</title><rect x="154.1" y="515.0" width="74.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="157.1" y="526.0">__ip_que..</text>
</g>
<g>
<title>ip_local_out (389 samples, 6.21%)</title><rect x="154.5" y="499.0" width="73.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="157.5" y="510.0">ip_local..</text>
</g>
<g>
<title>ip_output (387 samples, 6.18%)</title><rect x="154.9" y="483.0" width="72.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="157.9" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (386 samples, 6.16%)</title><rect x="155.1" y="467.0" width="72.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="158.1" y="478.0">ip_finis..</text>
</g>
<g>
<title>__ip_finish_output (384 samples, 6.13%)</title><rect x="155.2" y="451.0" width="72.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="158.2" y="462.0">__ip_fin..</text>
</g>
<g>
<title>ip_finish_output2 (383 samples, 6.11%)</title><rect x="155.4" y="435.0" width="72.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="158.4" y="446.0">ip_finis..</text>
</g>
<g>
<title>__local_bh_enable_ip (356 samples, 5.68%)</title><rect x="156.6" y="419.0" width="67.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="159.6" y="430.0">__local..</text>
</g>
<g>
<title>do_softirq.part.0 (356 samples, 5.68%)</title><rect x="156.6" y="403.0" width="67.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="159.6" y="414.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (353 samples, 5.64%)</title><rect x="157.1" y="387.0" width="66.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="160.1" y="398.0">do_soft..</text>
</g>
<g>
<title>__softirqentry_text_start (351 samples, 5.60%)</title><rect x="157.1" y="371.0" width="66.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="160.1" y="382.0">__softi..</text>
</g>
<g>
<title>net_rx_action (346 samples, 5.52%)</title><rect x="157.9" y="355.0" width="65.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="160.9" y="366.0">net_rx_..</text>
</g>
<g>
<title>process_backlog (343 samples, 5.48%)</title><rect x="158.4" y="339.0" width="64.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="161.4" y="350.0">process..</text>
</g>
<g>
<title>__netif_receive_skb (342 samples, 5.46%)</title><rect x="158.6" y="323.0" width="64.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="161.6" y="334.0">__netif..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (342 samples, 5.46%)</title><rect x="158.6" y="307.0" width="64.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="161.6" y="318.0">__netif..</text>
</g>
<g>
<title>ip_rcv (339 samples, 5.41%)</title><rect x="159.2" y="291.0" width="63.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="162.2" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.05%)</title><rect x="159.4" y="275.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="162.4" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (335 samples, 5.35%)</title><rect x="159.9" y="275.0" width="63.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="162.9" y="286.0">ip_rcv_..</text>
</g>
<g>
<title>ip_local_deliver (332 samples, 5.30%)</title><rect x="160.1" y="259.0" width="62.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="163.1" y="270.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (331 samples, 5.28%)</title><rect x="160.1" y="243.0" width="62.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="163.1" y="254.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (329 samples, 5.25%)</title><rect x="160.3" y="227.0" width="62.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="163.3" y="238.0">ip_pro..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.05%)</title><rect x="160.9" y="211.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="163.9" y="222.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="161.5" y="211.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="164.5" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (321 samples, 5.12%)</title><rect x="161.8" y="211.0" width="60.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="164.8" y="222.0">tcp_v4..</text>
</g>
<g>
<title>__inet_lookup_established (15 samples, 0.24%)</title><rect x="163.2" y="195.0" width="2.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="166.2" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (8 samples, 0.13%)</title><rect x="166.2" y="195.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="169.2" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.08%)</title><rect x="166.2" y="179.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="169.2" y="190.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (2 samples, 0.03%)</title><rect x="167.1" y="179.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="170.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (289 samples, 4.61%)</title><rect x="167.9" y="195.0" width="54.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="170.9" y="206.0">tcp_v..</text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.05%)</title><rect x="167.9" y="179.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="170.9" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (286 samples, 4.57%)</title><rect x="168.4" y="179.0" width="53.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="171.4" y="190.0">tcp_r..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.05%)</title><rect x="169.7" y="163.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="172.7" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.05%)</title><rect x="169.7" y="147.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="172.7" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.05%)</title><rect x="169.7" y="131.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="172.7" y="142.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="169.7" y="115.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="172.7" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="169.7" y="99.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="172.7" y="110.0"></text>
</g>
<g>
<title>sock_def_readable (2 samples, 0.03%)</title><rect x="170.3" y="163.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="173.3" y="174.0"></text>
</g>
<g>
<title>tcp_ack (39 samples, 0.62%)</title><rect x="170.7" y="163.0" width="7.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="173.7" y="174.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="172.2" y="147.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="175.2" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (25 samples, 0.40%)</title><rect x="172.8" y="147.0" width="4.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="175.8" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (17 samples, 0.27%)</title><rect x="173.5" y="131.0" width="3.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="176.5" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="173.7" y="115.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="176.7" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.03%)</title><rect x="173.7" y="99.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="176.7" y="110.0"></text>
</g>
<g>
<title>skb_release_all (14 samples, 0.22%)</title><rect x="174.1" y="115.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="177.1" y="126.0"></text>
</g>
<g>
<title>skb_release_data (13 samples, 0.21%)</title><rect x="174.1" y="99.0" width="2.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="177.1" y="110.0"></text>
</g>
<g>
<title>skb_free_head (7 samples, 0.11%)</title><rect x="175.2" y="83.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="178.2" y="94.0"></text>
</g>
<g>
<title>kfree (7 samples, 0.11%)</title><rect x="175.2" y="67.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="178.2" y="78.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.06%)</title><rect x="175.8" y="51.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="178.8" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.05%)</title><rect x="176.7" y="131.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="179.7" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (2 samples, 0.03%)</title><rect x="177.7" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="180.7" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (232 samples, 3.70%)</title><rect x="178.0" y="163.0" width="43.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="181.0" y="174.0">tcp_..</text>
</g>
<g>
<title>sock_def_readable (232 samples, 3.70%)</title><rect x="178.0" y="147.0" width="43.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="181.0" y="158.0">sock..</text>
</g>
<g>
<title>__wake_up_sync_key (229 samples, 3.66%)</title><rect x="178.6" y="131.0" width="43.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="181.6" y="142.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (229 samples, 3.66%)</title><rect x="178.6" y="115.0" width="43.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="181.6" y="126.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (229 samples, 3.66%)</title><rect x="178.6" y="99.0" width="43.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="181.6" y="110.0">__lo..</text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="223.2" y="371.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="226.2" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (21 samples, 0.34%)</title><rect x="223.6" y="419.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="226.6" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (21 samples, 0.34%)</title><rect x="223.6" y="403.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="226.6" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (10 samples, 0.16%)</title><rect x="224.9" y="387.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="227.9" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (7 samples, 0.11%)</title><rect x="225.3" y="371.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="228.3" y="382.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.03%)</title><rect x="226.1" y="355.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="229.1" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.03%)</title><rect x="226.1" y="339.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="229.1" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.03%)</title><rect x="226.1" y="323.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="229.1" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.03%)</title><rect x="227.0" y="387.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="230.0" y="398.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.03%)</title><rect x="228.3" y="531.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="231.3" y="542.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.06%)</title><rect x="228.9" y="547.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="231.9" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.06%)</title><rect x="230.0" y="547.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="233.0" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.06%)</title><rect x="230.0" y="531.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="233.0" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="230.0" y="515.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="233.0" y="526.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="230.0" y="499.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="233.0" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.06%)</title><rect x="230.0" y="483.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="233.0" y="494.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="231.3" y="547.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="234.3" y="558.0"></text>
</g>
<g>
<title>tcp_v4_send_check (3 samples, 0.05%)</title><rect x="231.7" y="547.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="234.7" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.06%)</title><rect x="232.7" y="595.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="235.7" y="606.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.06%)</title><rect x="232.7" y="579.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="235.7" y="590.0"></text>
</g>
<g>
<title>security_socket_sendmsg (11 samples, 0.18%)</title><rect x="233.8" y="643.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="236.8" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (9 samples, 0.14%)</title><rect x="234.2" y="627.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="237.2" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (9 samples, 0.14%)</title><rect x="234.2" y="611.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="237.2" y="622.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="234.4" y="595.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="237.4" y="606.0"></text>
</g>
<g>
<title>preempt_schedule_common (2 samples, 0.03%)</title><rect x="234.4" y="579.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="237.4" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (2 samples, 0.03%)</title><rect x="234.4" y="563.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="237.4" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="234.4" y="547.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="237.4" y="558.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (5 samples, 0.08%)</title><rect x="234.7" y="595.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="237.7" y="606.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.03%)</title><rect x="235.3" y="579.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="238.3" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (21 samples, 0.34%)</title><rect x="235.9" y="659.0" width="3.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="238.9" y="670.0"></text>
</g>
<g>
<title>__fdget (16 samples, 0.26%)</title><rect x="236.1" y="643.0" width="3.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="239.1" y="654.0"></text>
</g>
<g>
<title>__fget_light (16 samples, 0.26%)</title><rect x="236.1" y="627.0" width="3.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="239.1" y="638.0"></text>
</g>
<g>
<title>__fget (16 samples, 0.26%)</title><rect x="236.1" y="611.0" width="3.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="239.1" y="622.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.06%)</title><rect x="239.1" y="643.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="242.1" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.10%)</title><rect x="240.2" y="691.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="243.2" y="702.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.10%)</title><rect x="240.2" y="675.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="243.2" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (6 samples, 0.10%)</title><rect x="240.2" y="659.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="243.2" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.08%)</title><rect x="240.4" y="643.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="243.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.10%)</title><rect x="241.7" y="819.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="241.7" y="803.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="241.7" y="787.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.7" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="242.3" y="803.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="245.3" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="242.3" y="787.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="245.3" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="242.3" y="771.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="245.3" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="242.8" y="819.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="245.8" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="242.8" y="803.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="245.8" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="242.8" y="787.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="245.8" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (1,077 samples, 17.19%)</title><rect x="243.2" y="835.0" width="202.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.2" y="846.0">ru/mail/polis/service/kova..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="243.2" y="819.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.2" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/817406040.invoke (2 samples, 0.03%)</title><rect x="243.2" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.2" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1300109446.invoke (2 samples, 0.03%)</title><rect x="243.2" y="787.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.03%)</title><rect x="243.2" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (2 samples, 0.03%)</title><rect x="243.2" y="755.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="246.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="243.2" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (17 samples, 0.27%)</title><rect x="243.6" y="819.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.18%)</title><rect x="243.6" y="803.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="245.1" y="787.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="248.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.10%)</title><rect x="245.7" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="248.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.10%)</title><rect x="245.7" y="787.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (6 samples, 0.10%)</title><rect x="245.7" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.7" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="246.4" y="755.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="249.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="246.4" y="739.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="249.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="246.4" y="723.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="249.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,058 samples, 16.89%)</title><rect x="246.8" y="819.0" width="199.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.8" y="830.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,058 samples, 16.89%)</title><rect x="246.8" y="803.0" width="199.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.8" y="814.0">one/nio/http/HttpClient.in..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (215 samples, 3.43%)</title><rect x="248.1" y="787.0" width="40.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.1" y="798.0">one..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (19 samples, 0.30%)</title><rect x="251.1" y="771.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="254.1" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (19 samples, 0.30%)</title><rect x="251.1" y="755.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 0.27%)</title><rect x="251.5" y="739.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.5" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (16 samples, 0.26%)</title><rect x="251.7" y="723.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="254.7" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.10%)</title><rect x="251.7" y="707.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="254.7" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="252.4" y="691.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="255.4" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="252.4" y="675.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="255.4" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="252.4" y="659.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="255.4" y="670.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (5 samples, 0.08%)</title><rect x="253.2" y="707.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="256.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.03%)</title><rect x="253.4" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="256.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="253.4" y="675.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="256.4" y="686.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.03%)</title><rect x="253.4" y="659.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="256.4" y="670.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title><rect x="254.1" y="707.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="257.1" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (173 samples, 2.76%)</title><rect x="254.9" y="771.0" width="32.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.9" y="782.0">on..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="255.6" y="755.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="258.6" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (15 samples, 0.24%)</title><rect x="256.0" y="755.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="259.0" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="256.8" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="259.8" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="257.2" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="260.2" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (7 samples, 0.11%)</title><rect x="257.5" y="739.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="260.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="258.5" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="261.5" y="734.0"></text>
</g>
<g>
<title>__recv (151 samples, 2.41%)</title><rect x="258.8" y="755.0" width="28.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="261.8" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (145 samples, 2.31%)</title><rect x="260.0" y="739.0" width="27.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="263.0" y="750.0">e..</text>
</g>
<g>
<title>do_syscall_64 (145 samples, 2.31%)</title><rect x="260.0" y="723.0" width="27.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="263.0" y="734.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (142 samples, 2.27%)</title><rect x="260.0" y="707.0" width="26.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="263.0" y="718.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (142 samples, 2.27%)</title><rect x="260.0" y="691.0" width="26.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="263.0" y="702.0">_..</text>
</g>
<g>
<title>fput_many (2 samples, 0.03%)</title><rect x="260.5" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="263.5" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (135 samples, 2.16%)</title><rect x="260.9" y="675.0" width="25.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="263.9" y="686.0">s..</text>
</g>
<g>
<title>inet6_recvmsg (131 samples, 2.09%)</title><rect x="261.1" y="659.0" width="24.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="264.1" y="670.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (130 samples, 2.08%)</title><rect x="261.3" y="643.0" width="24.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="264.3" y="654.0">t..</text>
</g>
<g>
<title>sk_wait_data (97 samples, 1.55%)</title><rect x="262.8" y="627.0" width="18.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="265.8" y="638.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="262.8" y="611.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="265.8" y="622.0"></text>
</g>
<g>
<title>wait_woken (92 samples, 1.47%)</title><rect x="263.7" y="611.0" width="17.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="266.7" y="622.0"></text>
</g>
<g>
<title>schedule_timeout (90 samples, 1.44%)</title><rect x="264.1" y="595.0" width="17.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="267.1" y="606.0"></text>
</g>
<g>
<title>__mod_timer (2 samples, 0.03%)</title><rect x="264.1" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="267.1" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="264.1" y="563.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="267.1" y="574.0"></text>
</g>
<g>
<title>schedule (88 samples, 1.40%)</title><rect x="264.5" y="579.0" width="16.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="267.5" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (88 samples, 1.40%)</title><rect x="264.5" y="563.0" width="16.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="267.5" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (84 samples, 1.34%)</title><rect x="265.3" y="547.0" width="15.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="268.3" y="558.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (6 samples, 0.10%)</title><rect x="281.1" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="284.1" y="638.0"></text>
</g>
<g>
<title>__skb_datagram_iter (6 samples, 0.10%)</title><rect x="281.1" y="611.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="284.1" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (4 samples, 0.06%)</title><rect x="281.5" y="595.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="284.5" y="606.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.05%)</title><rect x="281.6" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="284.6" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.05%)</title><rect x="281.6" y="563.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="284.6" y="574.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (14 samples, 0.22%)</title><rect x="282.2" y="627.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="285.2" y="638.0"></text>
</g>
<g>
<title>tcp_send_ack (13 samples, 0.21%)</title><rect x="282.4" y="611.0" width="2.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="285.4" y="622.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (13 samples, 0.21%)</title><rect x="282.4" y="595.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="285.4" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (5 samples, 0.08%)</title><rect x="282.4" y="579.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="285.4" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (3 samples, 0.05%)</title><rect x="282.4" y="563.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="285.4" y="574.0"></text>
</g>
<g>
<title>memset (2 samples, 0.03%)</title><rect x="282.6" y="547.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="285.6" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (2 samples, 0.03%)</title><rect x="283.0" y="563.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="286.0" y="574.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (8 samples, 0.13%)</title><rect x="283.3" y="579.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="286.3" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (7 samples, 0.11%)</title><rect x="283.5" y="563.0" width="1.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="286.5" y="574.0"></text>
</g>
<g>
<title>__ip_queue_xmit (7 samples, 0.11%)</title><rect x="283.5" y="547.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="286.5" y="558.0"></text>
</g>
<g>
<title>ip_local_out (6 samples, 0.10%)</title><rect x="283.7" y="531.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="286.7" y="542.0"></text>
</g>
<g>
<title>ip_output (6 samples, 0.10%)</title><rect x="283.7" y="515.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="286.7" y="526.0"></text>
</g>
<g>
<title>ip_finish_output (6 samples, 0.10%)</title><rect x="283.7" y="499.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="286.7" y="510.0"></text>
</g>
<g>
<title>__ip_finish_output (6 samples, 0.10%)</title><rect x="283.7" y="483.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="286.7" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (6 samples, 0.10%)</title><rect x="283.7" y="467.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="286.7" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (6 samples, 0.10%)</title><rect x="283.7" y="451.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="286.7" y="462.0"></text>
</g>
<g>
<title>do_softirq.part.0 (6 samples, 0.10%)</title><rect x="283.7" y="435.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="286.7" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (6 samples, 0.10%)</title><rect x="283.7" y="419.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="286.7" y="430.0"></text>
</g>
<g>
<title>__softirqentry_text_start (6 samples, 0.10%)</title><rect x="283.7" y="403.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="286.7" y="414.0"></text>
</g>
<g>
<title>net_rx_action (6 samples, 0.10%)</title><rect x="283.7" y="387.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="286.7" y="398.0"></text>
</g>
<g>
<title>process_backlog (6 samples, 0.10%)</title><rect x="283.7" y="371.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="286.7" y="382.0"></text>
</g>
<g>
<title>__netif_receive_skb (6 samples, 0.10%)</title><rect x="283.7" y="355.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="286.7" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (6 samples, 0.10%)</title><rect x="283.7" y="339.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="286.7" y="350.0"></text>
</g>
<g>
<title>ip_rcv (6 samples, 0.10%)</title><rect x="283.7" y="323.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="286.7" y="334.0"></text>
</g>
<g>
<title>ip_rcv_finish (6 samples, 0.10%)</title><rect x="283.7" y="307.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="286.7" y="318.0"></text>
</g>
<g>
<title>ip_local_deliver (6 samples, 0.10%)</title><rect x="283.7" y="291.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="286.7" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (5 samples, 0.08%)</title><rect x="283.9" y="275.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="286.9" y="286.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (5 samples, 0.08%)</title><rect x="283.9" y="259.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="286.9" y="270.0"></text>
</g>
<g>
<title>tcp_v4_rcv (5 samples, 0.08%)</title><rect x="283.9" y="243.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="286.9" y="254.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (3 samples, 0.05%)</title><rect x="284.3" y="227.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="287.3" y="238.0"></text>
</g>
<g>
<title>tcp_rcv_established (3 samples, 0.05%)</title><rect x="284.3" y="211.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="287.3" y="222.0"></text>
</g>
<g>
<title>tcp_ack (2 samples, 0.03%)</title><rect x="284.5" y="195.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="287.5" y="206.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.03%)</title><rect x="284.5" y="179.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="287.5" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.03%)</title><rect x="285.0" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="288.0" y="638.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="285.4" y="627.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="288.4" y="638.0"></text>
</g>
<g>
<title>security_socket_recvmsg (3 samples, 0.05%)</title><rect x="285.8" y="659.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="288.8" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.03%)</title><rect x="286.0" y="643.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="289.0" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="286.0" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="289.0" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="286.4" y="675.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="289.4" y="686.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="286.4" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="289.4" y="670.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="286.4" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="289.4" y="654.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.03%)</title><rect x="286.4" y="627.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="289.4" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="286.7" y="707.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="289.7" y="718.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="286.7" y="691.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="289.7" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="286.7" y="675.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="289.7" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="286.7" y="659.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="289.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (4 samples, 0.06%)</title><rect x="287.5" y="771.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.5" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="288.2" y="771.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="291.2" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="288.2" y="755.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="291.2" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="288.2" y="739.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="291.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (26 samples, 0.42%)</title><rect x="288.6" y="787.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="289.4" y="771.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (8 samples, 0.13%)</title><rect x="290.1" y="771.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="293.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.11%)</title><rect x="290.3" y="755.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.11%)</title><rect x="290.3" y="739.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (9 samples, 0.14%)</title><rect x="291.8" y="771.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.08%)</title><rect x="292.4" y="755.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="295.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.08%)</title><rect x="292.4" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.4" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="292.9" y="723.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="295.9" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="292.9" y="707.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="295.9" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="292.9" y="691.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="295.9" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (26 samples, 0.42%)</title><rect x="293.5" y="787.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.5" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="296.5" y="771.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="299.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.10%)</title><rect x="297.1" y="771.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.10%)</title><rect x="297.1" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.10%)</title><rect x="297.1" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.10%)</title><rect x="297.1" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.10%)</title><rect x="297.1" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.06%)</title><rect x="298.4" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="301.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.05%)</title><rect x="298.6" y="771.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.05%)</title><rect x="298.6" y="755.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.6" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (79 samples, 1.26%)</title><rect x="299.3" y="787.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="302.3" y="798.0"></text>
</g>
<g>
<title>setsockopt (72 samples, 1.15%)</title><rect x="300.7" y="771.0" width="13.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="303.7" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (65 samples, 1.04%)</title><rect x="302.0" y="755.0" width="12.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="305.0" y="766.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (2 samples, 0.03%)</title><rect x="302.0" y="739.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="305.0" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (63 samples, 1.01%)</title><rect x="302.4" y="739.0" width="11.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="305.4" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (52 samples, 0.83%)</title><rect x="303.9" y="723.0" width="9.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="306.9" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (50 samples, 0.80%)</title><rect x="304.1" y="707.0" width="9.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="307.1" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (3 samples, 0.05%)</title><rect x="304.2" y="691.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="307.2" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (7 samples, 0.11%)</title><rect x="304.8" y="691.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="307.8" y="702.0"></text>
</g>
<g>
<title>security_socket_setsockopt (12 samples, 0.19%)</title><rect x="306.3" y="691.0" width="2.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="309.3" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (11 samples, 0.18%)</title><rect x="306.5" y="675.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="309.5" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (11 samples, 0.18%)</title><rect x="306.5" y="659.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="309.5" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (10 samples, 0.16%)</title><rect x="306.7" y="643.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="309.7" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (6 samples, 0.10%)</title><rect x="307.4" y="627.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="310.4" y="638.0"></text>
</g>
<g>
<title>sock_setsockopt (12 samples, 0.19%)</title><rect x="308.8" y="691.0" width="2.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="311.8" y="702.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.08%)</title><rect x="309.1" y="675.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="312.1" y="686.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (2 samples, 0.03%)</title><rect x="309.5" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="312.5" y="670.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (2 samples, 0.03%)</title><rect x="309.5" y="643.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="312.5" y="654.0"></text>
</g>
<g>
<title>sock_set_timeout (3 samples, 0.05%)</title><rect x="310.1" y="675.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="313.1" y="686.0"></text>
</g>
<g>
<title>_copy_from_user (2 samples, 0.03%)</title><rect x="310.1" y="659.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="313.1" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="310.7" y="675.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="313.7" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.21%)</title><rect x="311.0" y="691.0" width="2.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="314.0" y="702.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.14%)</title><rect x="311.2" y="675.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="314.2" y="686.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.14%)</title><rect x="311.2" y="659.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="314.2" y="670.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.14%)</title><rect x="311.2" y="643.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="314.2" y="654.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="312.9" y="675.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="315.9" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="313.7" y="723.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="316.7" y="734.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="313.7" y="707.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="316.7" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="313.7" y="691.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="316.7" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="313.7" y="675.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="316.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (686 samples, 10.95%)</title><rect x="314.2" y="787.0" width="129.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.2" y="798.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (7 samples, 0.11%)</title><rect x="315.0" y="771.0" width="1.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="318.0" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="315.4" y="755.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="318.4" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.03%)</title><rect x="315.9" y="755.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="318.9" y="766.0"></text>
</g>
<g>
<title>send (673 samples, 10.74%)</title><rect x="316.7" y="771.0" width="126.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="319.7" y="782.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (669 samples, 10.68%)</title><rect x="317.4" y="755.0" width="126.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="320.4" y="766.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>do_syscall_64 (669 samples, 10.68%)</title><rect x="317.4" y="739.0" width="126.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="320.4" y="750.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (640 samples, 10.22%)</title><rect x="317.6" y="723.0" width="120.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="320.6" y="734.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (640 samples, 10.22%)</title><rect x="317.6" y="707.0" width="120.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="320.6" y="718.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (639 samples, 10.20%)</title><rect x="317.8" y="691.0" width="120.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="320.8" y="702.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (635 samples, 10.14%)</title><rect x="318.0" y="675.0" width="119.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="321.0" y="686.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (634 samples, 10.12%)</title><rect x="318.2" y="659.0" width="119.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="321.2" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.05%)</title><rect x="318.8" y="643.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="321.8" y="654.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (625 samples, 9.98%)</title><rect x="319.5" y="643.0" width="117.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="322.5" y="654.0">tcp_sendmsg_lo..</text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.03%)</title><rect x="321.6" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="324.6" y="638.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.03%)</title><rect x="321.6" y="611.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="324.6" y="622.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (38 samples, 0.61%)</title><rect x="322.1" y="627.0" width="7.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="325.1" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (36 samples, 0.57%)</title><rect x="322.5" y="611.0" width="6.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="325.5" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (17 samples, 0.27%)</title><rect x="322.9" y="595.0" width="3.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.9" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.08%)</title><rect x="322.9" y="579.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="325.9" y="590.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.03%)</title><rect x="323.5" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="326.5" y="574.0"></text>
</g>
<g>
<title>memset (12 samples, 0.19%)</title><rect x="323.8" y="579.0" width="2.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="326.8" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.10%)</title><rect x="326.1" y="595.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="329.1" y="606.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.06%)</title><rect x="327.2" y="595.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="330.2" y="606.0"></text>
</g>
<g>
<title>__ksize (4 samples, 0.06%)</title><rect x="327.2" y="579.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="330.2" y="590.0"></text>
</g>
<g>
<title>memset (6 samples, 0.10%)</title><rect x="328.2" y="595.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.2" y="606.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.03%)</title><rect x="329.3" y="627.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="332.3" y="638.0"></text>
</g>
<g>
<title>tcp_push (559 samples, 8.92%)</title><rect x="329.7" y="627.0" width="105.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="332.7" y="638.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (559 samples, 8.92%)</title><rect x="329.7" y="611.0" width="105.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="332.7" y="622.0">__tcp_push_pe..</text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="329.9" y="595.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="332.9" y="606.0"></text>
</g>
<g>
<title>tcp_write_xmit (555 samples, 8.86%)</title><rect x="330.4" y="595.0" width="104.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="333.4" y="606.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (537 samples, 8.57%)</title><rect x="331.0" y="579.0" width="101.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="334.0" y="590.0">__tcp_transm..</text>
</g>
<g>
<title>ip_queue_xmit (529 samples, 8.45%)</title><rect x="331.4" y="563.0" width="99.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="334.4" y="574.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (526 samples, 8.40%)</title><rect x="331.4" y="547.0" width="99.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="334.4" y="558.0">__ip_queue_x..</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.05%)</title><rect x="331.6" y="531.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="334.6" y="542.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.05%)</title><rect x="331.6" y="515.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="334.6" y="526.0"></text>
</g>
<g>
<title>ip_local_out (522 samples, 8.33%)</title><rect x="332.1" y="531.0" width="98.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="335.1" y="542.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (6 samples, 0.10%)</title><rect x="332.3" y="515.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="335.3" y="526.0"></text>
</g>
<g>
<title>ip_send_check (4 samples, 0.06%)</title><rect x="332.7" y="499.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="335.7" y="510.0"></text>
</g>
<g>
<title>ip_output (514 samples, 8.21%)</title><rect x="333.4" y="515.0" width="96.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="336.4" y="526.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (510 samples, 8.14%)</title><rect x="334.2" y="499.0" width="96.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="337.2" y="510.0">ip_finish_o..</text>
</g>
<g>
<title>__ip_finish_output (508 samples, 8.11%)</title><rect x="334.4" y="483.0" width="95.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.4" y="494.0">__ip_finish..</text>
</g>
<g>
<title>ip_finish_output2 (507 samples, 8.09%)</title><rect x="334.6" y="467.0" width="95.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="337.6" y="478.0">ip_finish_o..</text>
</g>
<g>
<title>__local_bh_enable_ip (494 samples, 7.89%)</title><rect x="335.1" y="451.0" width="93.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="338.1" y="462.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (492 samples, 7.85%)</title><rect x="335.5" y="435.0" width="92.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="338.5" y="446.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (488 samples, 7.79%)</title><rect x="336.3" y="419.0" width="91.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="339.3" y="430.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (488 samples, 7.79%)</title><rect x="336.3" y="403.0" width="91.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="339.3" y="414.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (483 samples, 7.71%)</title><rect x="336.8" y="387.0" width="91.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="339.8" y="398.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (482 samples, 7.69%)</title><rect x="337.0" y="371.0" width="90.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="340.0" y="382.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (480 samples, 7.66%)</title><rect x="337.4" y="355.0" width="90.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="340.4" y="366.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (480 samples, 7.66%)</title><rect x="337.4" y="339.0" width="90.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="340.4" y="350.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.05%)</title><rect x="337.4" y="323.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="340.4" y="334.0"></text>
</g>
<g>
<title>ip_rcv (477 samples, 7.61%)</title><rect x="338.0" y="323.0" width="89.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="341.0" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.03%)</title><rect x="338.2" y="307.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="341.2" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (474 samples, 7.57%)</title><rect x="338.5" y="307.0" width="89.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="341.5" y="318.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (473 samples, 7.55%)</title><rect x="338.7" y="291.0" width="89.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="341.7" y="302.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (472 samples, 7.54%)</title><rect x="338.7" y="275.0" width="88.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="341.7" y="286.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (470 samples, 7.50%)</title><rect x="338.9" y="259.0" width="88.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="341.9" y="270.0">ip_protoco..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="339.1" y="243.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="342.1" y="254.0"></text>
</g>
<g>
<title>tcp_v4_rcv (467 samples, 7.46%)</title><rect x="339.5" y="243.0" width="87.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="342.5" y="254.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (6 samples, 0.10%)</title><rect x="340.4" y="227.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="343.4" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (453 samples, 7.23%)</title><rect x="341.7" y="227.0" width="85.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="344.7" y="238.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.05%)</title><rect x="342.3" y="211.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="345.3" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (447 samples, 7.14%)</title><rect x="342.9" y="211.0" width="84.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="345.9" y="222.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.06%)</title><rect x="343.6" y="195.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="346.6" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.06%)</title><rect x="343.6" y="179.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="346.6" y="190.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="343.6" y="163.0" width="0.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="346.6" y="174.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="343.6" y="147.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="346.6" y="158.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="343.8" y="131.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="346.8" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.05%)</title><rect x="344.4" y="195.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="347.4" y="206.0"></text>
</g>
<g>
<title>tcp_ack (43 samples, 0.69%)</title><rect x="345.1" y="195.0" width="8.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="348.1" y="206.0"></text>
</g>
<g>
<title>rb_first (4 samples, 0.06%)</title><rect x="346.6" y="179.0" width="0.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="349.6" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (29 samples, 0.46%)</title><rect x="347.6" y="179.0" width="5.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="350.6" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (23 samples, 0.37%)</title><rect x="348.3" y="163.0" width="4.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="351.3" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.13%)</title><rect x="348.3" y="147.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="351.3" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.13%)</title><rect x="348.3" y="131.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="351.3" y="142.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="349.3" y="115.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="352.3" y="126.0"></text>
</g>
<g>
<title>skb_release_all (15 samples, 0.24%)</title><rect x="349.8" y="147.0" width="2.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="352.8" y="158.0"></text>
</g>
<g>
<title>skb_release_data (15 samples, 0.24%)</title><rect x="349.8" y="131.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="352.8" y="142.0"></text>
</g>
<g>
<title>skb_free_head (6 samples, 0.10%)</title><rect x="351.5" y="115.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="354.5" y="126.0"></text>
</g>
<g>
<title>kfree (6 samples, 0.10%)</title><rect x="351.5" y="99.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="354.5" y="110.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.06%)</title><rect x="351.9" y="83.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="354.9" y="94.0"></text>
</g>
<g>
<title>tcp_data_ready (387 samples, 6.18%)</title><rect x="353.2" y="195.0" width="72.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="356.2" y="206.0">tcp_data..</text>
</g>
<g>
<title>sock_def_readable (386 samples, 6.16%)</title><rect x="353.4" y="179.0" width="72.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="356.4" y="190.0">sock_def..</text>
</g>
<g>
<title>__wake_up_sync_key (385 samples, 6.15%)</title><rect x="353.6" y="163.0" width="72.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="356.6" y="174.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (385 samples, 6.15%)</title><rect x="353.6" y="147.0" width="72.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="356.6" y="158.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (385 samples, 6.15%)</title><rect x="353.6" y="131.0" width="72.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="356.6" y="142.0">__lock_t..</text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="426.5" y="195.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="429.5" y="206.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="426.5" y="179.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="429.5" y="190.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="426.5" y="163.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="429.5" y="174.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.03%)</title><rect x="426.5" y="147.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="429.5" y="158.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="427.8" y="387.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="430.8" y="398.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.16%)</title><rect x="428.2" y="451.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="431.2" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.16%)</title><rect x="428.2" y="435.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="431.2" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (7 samples, 0.11%)</title><rect x="428.4" y="419.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="431.4" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.10%)</title><rect x="428.6" y="403.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="431.6" y="414.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.05%)</title><rect x="429.0" y="387.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="432.0" y="398.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.05%)</title><rect x="429.0" y="371.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="432.0" y="382.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.05%)</title><rect x="429.0" y="355.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="432.0" y="366.0"></text>
</g>
<g>
<title>ip_copy_addrs (3 samples, 0.05%)</title><rect x="430.5" y="547.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="433.5" y="558.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.05%)</title><rect x="431.0" y="563.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="434.0" y="574.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="431.2" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="434.2" y="558.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="432.5" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="435.5" y="590.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="432.5" y="563.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="435.5" y="574.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.03%)</title><rect x="432.5" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="435.5" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (7 samples, 0.11%)</title><rect x="432.9" y="579.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="435.9" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (5 samples, 0.08%)</title><rect x="433.3" y="563.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="436.3" y="574.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="433.5" y="547.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="436.5" y="558.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="433.7" y="531.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="436.7" y="542.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.05%)</title><rect x="435.0" y="627.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="438.0" y="638.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.11%)</title><rect x="435.5" y="627.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="438.5" y="638.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.06%)</title><rect x="436.1" y="611.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="439.1" y="622.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="436.9" y="627.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="439.9" y="638.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="437.2" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="440.2" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.05%)</title><rect x="437.6" y="675.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="440.6" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (2 samples, 0.03%)</title><rect x="437.8" y="659.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="440.8" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="437.8" y="643.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="440.8" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="437.8" y="627.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="440.8" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (28 samples, 0.45%)</title><rect x="438.2" y="723.0" width="5.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="441.2" y="734.0"></text>
</g>
<g>
<title>schedule (27 samples, 0.43%)</title><rect x="438.4" y="707.0" width="5.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="441.4" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (25 samples, 0.40%)</title><rect x="438.7" y="691.0" width="4.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="441.7" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (22 samples, 0.35%)</title><rect x="439.3" y="675.0" width="4.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="442.3" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (6 samples, 0.10%)</title><rect x="443.5" y="787.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.5" y="798.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (8 samples, 0.13%)</title><rect x="444.6" y="787.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.6" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="445.3" y="771.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="448.3" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="445.3" y="755.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="448.3" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="445.3" y="739.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="448.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$80/729377274.run (2,611 samples, 41.68%)</title><rect x="446.1" y="867.0" width="491.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="449.1" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$80/729..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncPut$3 (2,611 samples, 41.68%)</title><rect x="446.1" y="851.0" width="491.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="449.1" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncPu..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.putInternal (2,611 samples, 41.68%)</title><rect x="446.1" y="835.0" width="491.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="449.1" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.putInternal</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="447.8" y="819.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="450.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (949 samples, 15.15%)</title><rect x="448.2" y="819.0" width="178.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="451.2" y="830.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (10 samples, 0.16%)</title><rect x="451.4" y="803.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.16%)</title><rect x="451.4" y="787.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="454.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.16%)</title><rect x="451.4" y="771.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="454.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.06%)</title><rect x="451.7" y="755.0" width="0.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="454.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="451.7" y="739.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="454.7" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.06%)</title><rect x="452.5" y="755.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="455.5" y="766.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.06%)</title><rect x="452.5" y="739.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="455.5" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.06%)</title><rect x="452.5" y="723.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="455.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (910 samples, 14.53%)</title><rect x="453.3" y="803.0" width="171.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.3" y="814.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (29 samples, 0.46%)</title><rect x="453.8" y="787.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (6 samples, 0.10%)</title><rect x="456.5" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.08%)</title><rect x="456.5" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="459.5" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.06%)</title><rect x="456.6" y="739.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="459.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.06%)</title><rect x="456.6" y="723.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="459.6" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="456.6" y="707.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="459.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="456.6" y="691.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="459.6" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (9 samples, 0.14%)</title><rect x="457.6" y="771.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.14%)</title><rect x="457.6" y="755.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="460.6" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.14%)</title><rect x="457.6" y="739.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.6" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (9 samples, 0.14%)</title><rect x="457.6" y="723.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="460.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.13%)</title><rect x="457.8" y="707.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="458.5" y="691.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="461.5" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (878 samples, 14.02%)</title><rect x="459.3" y="787.0" width="165.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.3" y="798.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (877 samples, 14.00%)</title><rect x="459.5" y="771.0" width="165.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.5" y="782.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (875 samples, 13.97%)</title><rect x="459.8" y="755.0" width="164.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.8" y="766.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.05%)</title><rect x="460.2" y="739.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.2" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (870 samples, 13.89%)</title><rect x="460.8" y="739.0" width="163.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.8" y="750.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (27 samples, 0.43%)</title><rect x="462.3" y="723.0" width="5.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="465.3" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="465.5" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="468.5" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.11%)</title><rect x="465.9" y="707.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="468.9" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.05%)</title><rect x="466.6" y="691.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="469.6" y="702.0"></text>
</g>
<g>
<title>send (834 samples, 13.31%)</title><rect x="467.4" y="723.0" width="157.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="470.4" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (824 samples, 13.15%)</title><rect x="469.3" y="707.0" width="155.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="472.3" y="718.0">entry_SYSCALL_64_aft..</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.06%)</title><rect x="469.3" y="691.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="472.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (820 samples, 13.09%)</title><rect x="470.0" y="691.0" width="154.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="473.0" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (810 samples, 12.93%)</title><rect x="471.3" y="675.0" width="152.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="474.3" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (808 samples, 12.90%)</title><rect x="471.3" y="659.0" width="152.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="474.3" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (779 samples, 12.44%)</title><rect x="473.6" y="643.0" width="146.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="476.6" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.08%)</title><rect x="474.0" y="627.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="477.0" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (765 samples, 12.21%)</title><rect x="474.9" y="627.0" width="144.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="477.9" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (764 samples, 12.20%)</title><rect x="475.1" y="611.0" width="143.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.1" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="475.3" y="595.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="478.3" y="606.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="476.8" y="595.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="479.8" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (751 samples, 11.99%)</title><rect x="477.2" y="595.0" width="141.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="480.2" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.03%)</title><rect x="479.4" y="579.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="482.4" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.03%)</title><rect x="479.4" y="563.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="482.4" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (8 samples, 0.13%)</title><rect x="480.0" y="579.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="483.0" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (8 samples, 0.13%)</title><rect x="480.0" y="563.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="483.0" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (56 samples, 0.89%)</title><rect x="481.5" y="579.0" width="10.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="484.5" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (48 samples, 0.77%)</title><rect x="482.5" y="563.0" width="9.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="485.5" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (23 samples, 0.37%)</title><rect x="483.2" y="547.0" width="4.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="486.2" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (8 samples, 0.13%)</title><rect x="483.6" y="531.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="486.6" y="542.0"></text>
</g>
<g>
<title>memset (11 samples, 0.18%)</title><rect x="485.5" y="531.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="488.5" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 0.13%)</title><rect x="487.5" y="547.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="490.5" y="558.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.10%)</title><rect x="489.0" y="547.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="492.0" y="558.0"></text>
</g>
<g>
<title>__ksize (6 samples, 0.10%)</title><rect x="489.0" y="531.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="492.0" y="542.0"></text>
</g>
<g>
<title>memset (7 samples, 0.11%)</title><rect x="490.2" y="547.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="493.2" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (3 samples, 0.05%)</title><rect x="491.5" y="563.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="494.5" y="574.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.03%)</title><rect x="492.1" y="579.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="495.1" y="590.0"></text>
</g>
<g>
<title>tcp_push (660 samples, 10.54%)</title><rect x="492.6" y="579.0" width="124.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="495.6" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (659 samples, 10.52%)</title><rect x="492.8" y="563.0" width="124.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="495.8" y="574.0">__tcp_push_pend..</text>
</g>
<g>
<title>ktime_get (3 samples, 0.05%)</title><rect x="493.0" y="547.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="496.0" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (653 samples, 10.42%)</title><rect x="493.9" y="547.0" width="123.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="496.9" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (4 samples, 0.06%)</title><rect x="495.8" y="531.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="498.8" y="542.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (616 samples, 9.83%)</title><rect x="496.6" y="531.0" width="116.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="499.6" y="542.0">__tcp_transmit..</text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="497.9" y="515.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="500.9" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (594 samples, 9.48%)</title><rect x="498.5" y="515.0" width="111.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="501.5" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (593 samples, 9.47%)</title><rect x="498.5" y="499.0" width="111.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="501.5" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="499.4" y="483.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="502.4" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="499.4" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="502.4" y="478.0"></text>
</g>
<g>
<title>ip_local_out (586 samples, 9.36%)</title><rect x="499.8" y="483.0" width="110.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="502.8" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.06%)</title><rect x="499.8" y="467.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="502.8" y="478.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.05%)</title><rect x="500.0" y="451.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="503.0" y="462.0"></text>
</g>
<g>
<title>ip_output (582 samples, 9.29%)</title><rect x="500.5" y="467.0" width="109.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="503.5" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (581 samples, 9.28%)</title><rect x="500.7" y="451.0" width="109.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.7" y="462.0">ip_finish_out..</text>
</g>
<g>
<title>__ip_finish_output (580 samples, 9.26%)</title><rect x="500.9" y="435.0" width="109.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="503.9" y="446.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (578 samples, 9.23%)</title><rect x="501.3" y="419.0" width="108.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="504.3" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (543 samples, 8.67%)</title><rect x="503.4" y="403.0" width="102.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="506.4" y="414.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq.part.0 (543 samples, 8.67%)</title><rect x="503.4" y="387.0" width="102.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="506.4" y="398.0">do_softirq.p..</text>
</g>
<g>
<title>do_softirq_own_stack (542 samples, 8.65%)</title><rect x="503.6" y="371.0" width="102.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="506.6" y="382.0">do_softirq_o..</text>
</g>
<g>
<title>__softirqentry_text_start (542 samples, 8.65%)</title><rect x="503.6" y="355.0" width="102.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="506.6" y="366.0">__softirqent..</text>
</g>
<g>
<title>net_rx_action (537 samples, 8.57%)</title><rect x="504.5" y="339.0" width="101.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="507.5" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (536 samples, 8.56%)</title><rect x="504.7" y="323.0" width="101.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="507.7" y="334.0">process_back..</text>
</g>
<g>
<title>__netif_receive_skb (530 samples, 8.46%)</title><rect x="505.6" y="307.0" width="99.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="508.6" y="318.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (527 samples, 8.41%)</title><rect x="506.2" y="291.0" width="99.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="509.2" y="302.0">__netif_rece..</text>
</g>
<g>
<title>__netif_receive_skb_core (4 samples, 0.06%)</title><rect x="506.8" y="275.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="509.8" y="286.0"></text>
</g>
<g>
<title>ip_rcv (520 samples, 8.30%)</title><rect x="507.5" y="275.0" width="98.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="510.5" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.06%)</title><rect x="507.5" y="259.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="510.5" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (515 samples, 8.22%)</title><rect x="508.3" y="259.0" width="97.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="511.3" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (510 samples, 8.14%)</title><rect x="508.6" y="243.0" width="96.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="511.6" y="254.0">ip_local_de..</text>
</g>
<g>
<title>ip_local_deliver_finish (510 samples, 8.14%)</title><rect x="508.6" y="227.0" width="96.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="511.6" y="238.0">ip_local_de..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (509 samples, 8.13%)</title><rect x="508.6" y="211.0" width="95.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="511.6" y="222.0">ip_protocol..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.03%)</title><rect x="508.8" y="195.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="511.8" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (503 samples, 8.03%)</title><rect x="509.8" y="195.0" width="94.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="512.8" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (16 samples, 0.26%)</title><rect x="511.8" y="179.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="514.8" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.03%)</title><rect x="514.5" y="163.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="517.5" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.05%)</title><rect x="515.6" y="179.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="518.6" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (466 samples, 7.44%)</title><rect x="516.4" y="179.0" width="87.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="519.4" y="190.0">tcp_v4_do_..</text>
</g>
<g>
<title>tcp_check_space (7 samples, 0.11%)</title><rect x="516.4" y="163.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="519.4" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (458 samples, 7.31%)</title><rect x="517.9" y="163.0" width="86.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="520.9" y="174.0">tcp_rcv_es..</text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.06%)</title><rect x="519.6" y="147.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="522.6" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.06%)</title><rect x="519.6" y="131.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="522.6" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.06%)</title><rect x="519.6" y="115.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="522.6" y="126.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.06%)</title><rect x="519.6" y="99.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="522.6" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="519.9" y="83.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="522.9" y="94.0"></text>
</g>
<g>
<title>tcp_ack (68 samples, 1.09%)</title><rect x="520.7" y="147.0" width="12.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="523.7" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="524.3" y="131.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="527.3" y="142.0"></text>
</g>
<g>
<title>rb_erase (2 samples, 0.03%)</title><rect x="524.6" y="131.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="527.6" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (36 samples, 0.57%)</title><rect x="525.8" y="131.0" width="6.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="528.8" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (26 samples, 0.42%)</title><rect x="526.5" y="115.0" width="4.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="529.5" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.08%)</title><rect x="526.5" y="99.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="529.5" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (5 samples, 0.08%)</title><rect x="526.5" y="83.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="529.5" y="94.0"></text>
</g>
<g>
<title>skb_release_all (19 samples, 0.30%)</title><rect x="527.5" y="99.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="530.5" y="110.0"></text>
</g>
<g>
<title>skb_release_data (19 samples, 0.30%)</title><rect x="527.5" y="83.0" width="3.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="530.5" y="94.0"></text>
</g>
<g>
<title>skb_free_head (7 samples, 0.11%)</title><rect x="529.7" y="67.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="532.7" y="78.0"></text>
</g>
<g>
<title>kfree (7 samples, 0.11%)</title><rect x="529.7" y="51.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="532.7" y="62.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.06%)</title><rect x="530.3" y="35.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="533.3" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="531.4" y="115.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="534.4" y="126.0"></text>
</g>
<g>
<title>jiffies_to_usecs (2 samples, 0.03%)</title><rect x="531.8" y="115.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="534.8" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (369 samples, 5.89%)</title><rect x="533.5" y="147.0" width="69.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="536.5" y="158.0">tcp_dat..</text>
</g>
<g>
<title>sock_def_readable (368 samples, 5.87%)</title><rect x="533.7" y="131.0" width="69.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="536.7" y="142.0">sock_de..</text>
</g>
<g>
<title>__wake_up_sync_key (368 samples, 5.87%)</title><rect x="533.7" y="115.0" width="69.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="536.7" y="126.0">__wake_..</text>
</g>
<g>
<title>__wake_up_common_lock (368 samples, 5.87%)</title><rect x="533.7" y="99.0" width="69.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="536.7" y="110.0">__wake_..</text>
</g>
<g>
<title>__lock_text_start (368 samples, 5.87%)</title><rect x="533.7" y="83.0" width="69.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="536.7" y="94.0">__lock_..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="603.0" y="147.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="606.0" y="158.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="604.1" y="179.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="607.1" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3 samples, 0.05%)</title><rect x="604.7" y="243.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="607.7" y="254.0"></text>
</g>
<g>
<title>dev_queue_xmit (24 samples, 0.38%)</title><rect x="605.7" y="403.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="608.7" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (22 samples, 0.35%)</title><rect x="605.8" y="387.0" width="4.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="608.8" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (12 samples, 0.19%)</title><rect x="606.8" y="371.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="609.8" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (11 samples, 0.18%)</title><rect x="607.0" y="355.0" width="2.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="610.0" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.06%)</title><rect x="607.2" y="339.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="610.2" y="350.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.05%)</title><rect x="607.9" y="339.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="610.9" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (3 samples, 0.05%)</title><rect x="607.9" y="323.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="610.9" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.05%)</title><rect x="607.9" y="307.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="610.9" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (3 samples, 0.05%)</title><rect x="609.2" y="371.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="612.2" y="382.0"></text>
</g>
<g>
<title>skb_clone (7 samples, 0.11%)</title><rect x="610.4" y="515.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="613.4" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="610.9" y="499.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="613.9" y="510.0"></text>
</g>
<g>
<title>__skb_clone (2 samples, 0.03%)</title><rect x="611.3" y="499.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="614.3" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="611.3" y="483.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="614.3" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (3 samples, 0.05%)</title><rect x="612.6" y="531.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="615.6" y="542.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.06%)</title><rect x="613.6" y="531.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="616.6" y="542.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="613.9" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="616.9" y="526.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.03%)</title><rect x="613.9" y="499.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="616.9" y="510.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.08%)</title><rect x="614.5" y="531.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="617.5" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.06%)</title><rect x="614.7" y="515.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="617.7" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="615.1" y="499.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="618.1" y="510.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="615.1" y="483.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="618.1" y="494.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.06%)</title><rect x="615.8" y="531.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="618.8" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.11%)</title><rect x="617.0" y="579.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="620.0" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (6 samples, 0.10%)</title><rect x="617.1" y="563.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="620.1" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="617.9" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="620.9" y="558.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="618.3" y="579.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="621.3" y="590.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="618.6" y="595.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="621.6" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.11%)</title><rect x="619.0" y="627.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="622.0" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (7 samples, 0.11%)</title><rect x="619.0" y="611.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="622.0" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (7 samples, 0.11%)</title><rect x="619.0" y="595.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="622.0" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (6 samples, 0.10%)</title><rect x="619.2" y="579.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="622.2" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (17 samples, 0.27%)</title><rect x="620.3" y="643.0" width="3.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="623.3" y="654.0"></text>
</g>
<g>
<title>__fdget (12 samples, 0.19%)</title><rect x="620.9" y="627.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="623.9" y="638.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.19%)</title><rect x="620.9" y="611.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="623.9" y="622.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.19%)</title><rect x="620.9" y="595.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="623.9" y="606.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="623.2" y="627.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="626.2" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="623.9" y="675.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="626.9" y="686.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="623.9" y="659.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="626.9" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="623.9" y="643.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="626.9" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="623.9" y="627.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="626.9" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (9 samples, 0.14%)</title><rect x="624.7" y="803.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="627.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.10%)</title><rect x="625.2" y="787.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="628.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.10%)</title><rect x="625.2" y="771.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="628.2" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="626.4" y="803.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="629.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="626.4" y="787.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="629.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="626.4" y="771.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="629.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.08%)</title><rect x="626.9" y="819.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="629.9" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="627.3" y="803.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="630.3" y="814.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2 samples, 0.03%)</title><rect x="627.9" y="819.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.9" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.upsert (1,644 samples, 26.25%)</title><rect x="628.3" y="819.0" width="309.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.3" y="830.0">ru/mail/polis/dao/kovalkov/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,624 samples, 25.93%)</title><rect x="628.3" y="803.0" width="305.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="631.3" y="814.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="628.8" y="787.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="631.8" y="798.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1,618 samples, 25.83%)</title><rect x="629.4" y="787.0" width="304.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.4" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="630.5" y="771.0" width="0.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="633.5" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,434 samples, 22.89%)</title><rect x="631.3" y="771.0" width="270.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="634.3" y="782.0">Java_org_rocksdb_RocksDB_put__J_3BII..</text>
</g>
<g>
<title>__libc_malloc (2 samples, 0.03%)</title><rect x="632.6" y="755.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="635.6" y="766.0"></text>
</g>
<g>
<title>cfree (6 samples, 0.10%)</title><rect x="633.0" y="755.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="636.0" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (6 samples, 0.10%)</title><rect x="634.3" y="755.0" width="1.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="637.3" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.08%)</title><rect x="635.4" y="755.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="638.4" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="636.4" y="755.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="639.4" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,404 samples, 22.41%)</title><rect x="636.9" y="755.0" width="264.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="639.9" y="766.0">rocksdb_put_helper(JNIEnv_*, rocksd..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="637.5" y="739.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="640.5" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (8 samples, 0.13%)</title><rect x="637.9" y="739.0" width="1.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="640.9" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (6 samples, 0.10%)</title><rect x="638.2" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.2" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.14%)</title><rect x="639.4" y="739.0" width="1.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="642.4" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.10%)</title><rect x="639.9" y="723.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="642.9" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,376 samples, 21.97%)</title><rect x="641.1" y="739.0" width="259.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="644.1" y="750.0">rocksdb::DB::Put(rocksdb::WriteOpti..</text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,373 samples, 21.92%)</title><rect x="641.6" y="723.0" width="258.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="644.6" y="734.0">rocksdb::DBImpl::Put(rocksdb::Writ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,357 samples, 21.66%)</title><rect x="641.8" y="707.0" width="255.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="644.8" y="718.0">rocksdb::DB::Put(rocksdb::WriteOpt..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.03%)</title><rect x="642.6" y="691.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="645.6" y="702.0"></text>
</g>
<g>
<title>cfree (14 samples, 0.22%)</title><rect x="643.0" y="691.0" width="2.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="646.0" y="702.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="645.6" y="691.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="648.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (8 samples, 0.13%)</title><rect x="646.0" y="691.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="649.0" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="646.9" y="675.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="649.9" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="646.9" y="659.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.9" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="646.9" y="643.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="649.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,269 samples, 20.26%)</title><rect x="647.5" y="691.0" width="239.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="650.5" y="702.0">rocksdb::DBImpl::Write(rocksdb::..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (5 samples, 0.08%)</title><rect x="647.5" y="675.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="650.5" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.13%)</title><rect x="648.4" y="675.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="651.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.06%)</title><rect x="650.3" y="675.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="653.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (3 samples, 0.05%)</title><rect x="651.1" y="675.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="654.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1,213 samples, 19.36%)</title><rect x="651.6" y="675.0" width="228.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="654.6" y="686.0">rocksdb::DBImpl::WriteImpl(roc..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.06%)</title><rect x="660.8" y="659.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="663.8" y="670.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (2 samples, 0.03%)</title><rect x="661.6" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="664.6" y="670.0"></text>
</g>
<g>
<title>__sched_yield (43 samples, 0.69%)</title><rect x="662.0" y="659.0" width="8.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="665.0" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (40 samples, 0.64%)</title><rect x="662.5" y="643.0" width="7.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="665.5" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (3 samples, 0.05%)</title><rect x="662.5" y="627.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="665.5" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (37 samples, 0.59%)</title><rect x="663.1" y="627.0" width="7.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="666.1" y="638.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (32 samples, 0.51%)</title><rect x="664.0" y="611.0" width="6.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="667.0" y="622.0"></text>
</g>
<g>
<title>do_sched_yield (32 samples, 0.51%)</title><rect x="664.0" y="595.0" width="6.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="667.0" y="606.0"></text>
</g>
<g>
<title>schedule (31 samples, 0.49%)</title><rect x="664.2" y="579.0" width="5.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="667.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (31 samples, 0.49%)</title><rect x="664.2" y="563.0" width="5.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="667.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.08%)</title><rect x="669.1" y="547.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="672.1" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.27%)</title><rect x="670.1" y="659.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="673.1" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="672.9" y="643.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="675.9" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="672.9" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="675.9" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="672.9" y="611.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="675.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (10 samples, 0.16%)</title><rect x="673.8" y="659.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="676.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (3 samples, 0.05%)</title><rect x="675.7" y="659.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="678.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (456 samples, 7.28%)</title><rect x="676.3" y="659.0" width="85.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="679.3" y="670.0">rocksdb::D..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (6 samples, 0.10%)</title><rect x="676.9" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="679.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="677.6" y="627.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="680.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (442 samples, 7.06%)</title><rect x="678.0" y="643.0" width="83.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="681.0" y="654.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.05%)</title><rect x="680.2" y="627.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="683.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (425 samples, 6.78%)</title><rect x="680.8" y="627.0" width="80.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="683.8" y="638.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (24 samples, 0.38%)</title><rect x="684.4" y="611.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="687.4" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="688.5" y="595.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="691.5" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="688.5" y="579.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="691.5" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="688.5" y="563.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="691.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (2 samples, 0.03%)</title><rect x="689.1" y="611.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="692.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="689.5" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="692.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (338 samples, 5.40%)</title><rect x="689.9" y="611.0" width="63.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="692.9" y="622.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::GetPerfLevel() [clone .plt] (2 samples, 0.03%)</title><rect x="691.2" y="595.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="694.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.03%)</title><rect x="691.7" y="595.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.03%)</title><rect x="692.1" y="595.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="695.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (324 samples, 5.17%)</title><rect x="692.5" y="595.0" width="61.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="695.5" y="606.0">rocksd..</text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.06%)</title><rect x="694.4" y="579.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="697.4" y="590.0"></text>
</g>
<g>
<title>__write (308 samples, 4.92%)</title><rect x="695.1" y="579.0" width="58.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="698.1" y="590.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (301 samples, 4.81%)</title><rect x="696.3" y="563.0" width="56.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="699.3" y="574.0">entry_..</text>
</g>
<g>
<title>do_syscall_64 (301 samples, 4.81%)</title><rect x="696.3" y="547.0" width="56.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="699.3" y="558.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_write (291 samples, 4.65%)</title><rect x="697.2" y="531.0" width="54.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="700.2" y="542.0">__x64..</text>
</g>
<g>
<title>ksys_write (290 samples, 4.63%)</title><rect x="697.4" y="515.0" width="54.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="700.4" y="526.0">ksys_..</text>
</g>
<g>
<title>__fdget_pos (15 samples, 0.24%)</title><rect x="697.8" y="499.0" width="2.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="700.8" y="510.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.19%)</title><rect x="698.1" y="483.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="701.1" y="494.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.19%)</title><rect x="698.1" y="467.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="701.1" y="478.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="700.6" y="499.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="703.6" y="510.0"></text>
</g>
<g>
<title>__sb_end_write (2 samples, 0.03%)</title><rect x="701.5" y="499.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="704.5" y="510.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.03%)</title><rect x="702.5" y="499.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="705.5" y="510.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.05%)</title><rect x="703.0" y="499.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="706.0" y="510.0"></text>
</g>
<g>
<title>vfs_write (257 samples, 4.10%)</title><rect x="703.6" y="499.0" width="48.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="706.6" y="510.0">vfs_..</text>
</g>
<g>
<title>__sb_start_write (4 samples, 0.06%)</title><rect x="704.2" y="483.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="707.2" y="494.0"></text>
</g>
<g>
<title>__vfs_write (236 samples, 3.77%)</title><rect x="704.9" y="483.0" width="44.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="707.9" y="494.0">__vf..</text>
</g>
<g>
<title>new_sync_write (235 samples, 3.75%)</title><rect x="705.1" y="467.0" width="44.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="708.1" y="478.0">new_..</text>
</g>
<g>
<title>ext4_file_write_iter (233 samples, 3.72%)</title><rect x="705.5" y="451.0" width="43.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="708.5" y="462.0">ext4..</text>
</g>
<g>
<title>__generic_file_write_iter (219 samples, 3.50%)</title><rect x="706.1" y="435.0" width="41.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="709.1" y="446.0">__g..</text>
</g>
<g>
<title>file_remove_privs (2 samples, 0.03%)</title><rect x="707.4" y="419.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="710.4" y="430.0"></text>
</g>
<g>
<title>file_update_time (10 samples, 0.16%)</title><rect x="707.8" y="419.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="710.8" y="430.0"></text>
</g>
<g>
<title>current_time (3 samples, 0.05%)</title><rect x="708.3" y="403.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="711.3" y="414.0"></text>
</g>
<g>
<title>timestamp_truncate (2 samples, 0.03%)</title><rect x="708.5" y="387.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="711.5" y="398.0"></text>
</g>
<g>
<title>generic_update_time (4 samples, 0.06%)</title><rect x="708.9" y="403.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="711.9" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (4 samples, 0.06%)</title><rect x="708.9" y="387.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="711.9" y="398.0"></text>
</g>
<g>
<title>ext4_dirty_inode (4 samples, 0.06%)</title><rect x="708.9" y="371.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="711.9" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.03%)</title><rect x="708.9" y="355.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="711.9" y="366.0"></text>
</g>
<g>
<title>jbd2__journal_start (2 samples, 0.03%)</title><rect x="708.9" y="339.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="711.9" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.03%)</title><rect x="708.9" y="323.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="711.9" y="334.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.03%)</title><rect x="709.3" y="355.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="712.3" y="366.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.03%)</title><rect x="709.3" y="339.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="712.3" y="350.0"></text>
</g>
<g>
<title>ext4_do_update_inode (2 samples, 0.03%)</title><rect x="709.3" y="323.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="712.3" y="334.0"></text>
</g>
<g>
<title>generic_perform_write (199 samples, 3.18%)</title><rect x="709.6" y="419.0" width="37.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="712.6" y="430.0">gen..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (4 samples, 0.06%)</title><rect x="710.4" y="403.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="713.4" y="414.0"></text>
</g>
<g>
<title>ext4_da_write_begin (79 samples, 1.26%)</title><rect x="711.1" y="403.0" width="14.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="714.1" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (32 samples, 0.51%)</title><rect x="711.7" y="387.0" width="6.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="714.7" y="398.0"></text>
</g>
<g>
<title>ext4_journal_check_start (3 samples, 0.05%)</title><rect x="711.7" y="371.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="714.7" y="382.0"></text>
</g>
<g>
<title>jbd2__journal_start (29 samples, 0.46%)</title><rect x="712.3" y="371.0" width="5.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="715.3" y="382.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="712.5" y="355.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="715.5" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc (13 samples, 0.21%)</title><rect x="713.0" y="355.0" width="2.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="716.0" y="366.0"></text>
</g>
<g>
<title>start_this_handle (12 samples, 0.19%)</title><rect x="715.5" y="355.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="718.5" y="366.0"></text>
</g>
<g>
<title>add_transaction_credits (9 samples, 0.14%)</title><rect x="716.0" y="339.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="719.0" y="350.0"></text>
</g>
<g>
<title>ext4_block_write_begin (11 samples, 0.18%)</title><rect x="717.7" y="387.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="720.7" y="398.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (29 samples, 0.46%)</title><rect x="720.2" y="387.0" width="5.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="723.2" y="398.0"></text>
</g>
<g>
<title>pagecache_get_page (28 samples, 0.45%)</title><rect x="720.2" y="371.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="723.2" y="382.0"></text>
</g>
<g>
<title>__page_cache_alloc (2 samples, 0.03%)</title><rect x="720.4" y="355.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="723.4" y="366.0"></text>
</g>
<g>
<title>alloc_pages_current (2 samples, 0.03%)</title><rect x="720.4" y="339.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="723.4" y="350.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (2 samples, 0.03%)</title><rect x="720.4" y="323.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="723.4" y="334.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.03%)</title><rect x="720.4" y="307.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="723.4" y="318.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (2 samples, 0.03%)</title><rect x="720.8" y="355.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="723.8" y="366.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (2 samples, 0.03%)</title><rect x="720.8" y="339.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="723.8" y="350.0"></text>
</g>
<g>
<title>find_get_entry (23 samples, 0.37%)</title><rect x="721.1" y="355.0" width="4.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="724.1" y="366.0"></text>
</g>
<g>
<title>xas_load (8 samples, 0.13%)</title><rect x="723.0" y="339.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="726.0" y="350.0"></text>
</g>
<g>
<title>xas_start (5 samples, 0.08%)</title><rect x="724.5" y="339.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="727.5" y="350.0"></text>
</g>
<g>
<title>ext4_da_write_end (102 samples, 1.63%)</title><rect x="726.0" y="403.0" width="19.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="729.0" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_stop (18 samples, 0.29%)</title><rect x="727.0" y="387.0" width="3.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="730.0" y="398.0"></text>
</g>
<g>
<title>jbd2_journal_stop (17 samples, 0.27%)</title><rect x="727.2" y="371.0" width="3.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="730.2" y="382.0"></text>
</g>
<g>
<title>__wake_up (9 samples, 0.14%)</title><rect x="727.9" y="355.0" width="1.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="730.9" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (9 samples, 0.14%)</title><rect x="727.9" y="339.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="730.9" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.10%)</title><rect x="728.1" y="323.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="731.1" y="334.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (2 samples, 0.03%)</title><rect x="729.2" y="323.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="732.2" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="729.6" y="355.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="732.6" y="366.0"></text>
</g>
<g>
<title>block_write_end (2 samples, 0.03%)</title><rect x="730.4" y="387.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="733.4" y="398.0"></text>
</g>
<g>
<title>generic_write_end (77 samples, 1.23%)</title><rect x="730.7" y="387.0" width="14.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="733.7" y="398.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (2 samples, 0.03%)</title><rect x="730.9" y="371.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="733.9" y="382.0"></text>
</g>
<g>
<title>__mark_inode_dirty (65 samples, 1.04%)</title><rect x="731.3" y="371.0" width="12.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="734.3" y="382.0"></text>
</g>
<g>
<title>ext4_dirty_inode (63 samples, 1.01%)</title><rect x="731.7" y="355.0" width="11.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="734.7" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.03%)</title><rect x="731.7" y="339.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="734.7" y="350.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (61 samples, 0.97%)</title><rect x="732.1" y="339.0" width="11.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="735.1" y="350.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (37 samples, 0.59%)</title><rect x="732.4" y="323.0" width="7.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="735.4" y="334.0"></text>
</g>
<g>
<title>ext4_do_update_inode (30 samples, 0.48%)</title><rect x="733.2" y="307.0" width="5.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="736.2" y="318.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (24 samples, 0.38%)</title><rect x="734.3" y="291.0" width="4.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.3" y="302.0"></text>
</g>
<g>
<title>crypto_shash_update (4 samples, 0.06%)</title><rect x="734.3" y="275.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="737.3" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (20 samples, 0.32%)</title><rect x="735.1" y="275.0" width="3.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="738.1" y="286.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (3 samples, 0.05%)</title><rect x="736.4" y="259.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="739.4" y="270.0"></text>
</g>
<g>
<title>crypto_shash_update (10 samples, 0.16%)</title><rect x="737.0" y="259.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="740.0" y="270.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (8 samples, 0.13%)</title><rect x="737.3" y="243.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="740.3" y="254.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (22 samples, 0.35%)</title><rect x="739.4" y="323.0" width="4.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="742.4" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (12 samples, 0.19%)</title><rect x="739.4" y="307.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="742.4" y="318.0"></text>
</g>
<g>
<title>__getblk_gfp (9 samples, 0.14%)</title><rect x="739.6" y="291.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="742.6" y="302.0"></text>
</g>
<g>
<title>__find_get_block (8 samples, 0.13%)</title><rect x="739.6" y="275.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="742.6" y="286.0"></text>
</g>
<g>
<title>ext4_get_group_desc (2 samples, 0.03%)</title><rect x="741.3" y="291.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="744.3" y="302.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (3 samples, 0.05%)</title><rect x="741.7" y="307.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="744.7" y="318.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (3 samples, 0.05%)</title><rect x="741.7" y="291.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="744.7" y="302.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (2 samples, 0.03%)</title><rect x="741.8" y="275.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="744.8" y="286.0"></text>
</g>
<g>
<title>ext4_inode_table (4 samples, 0.06%)</title><rect x="742.4" y="307.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="745.4" y="318.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (2 samples, 0.03%)</title><rect x="743.2" y="307.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="746.2" y="318.0"></text>
</g>
<g>
<title>block_write_end (9 samples, 0.14%)</title><rect x="743.5" y="371.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="746.5" y="382.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (5 samples, 0.08%)</title><rect x="743.5" y="355.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="746.5" y="366.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.03%)</title><rect x="744.1" y="339.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="747.1" y="350.0"></text>
</g>
<g>
<title>mark_buffer_dirty (4 samples, 0.06%)</title><rect x="744.5" y="355.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="747.5" y="366.0"></text>
</g>
<g>
<title>ext4_nonda_switch (3 samples, 0.05%)</title><rect x="745.2" y="403.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="748.2" y="414.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (5 samples, 0.08%)</title><rect x="745.8" y="403.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="748.8" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.05%)</title><rect x="746.2" y="387.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="749.2" y="398.0"></text>
</g>
<g>
<title>down_write_trylock (2 samples, 0.03%)</title><rect x="747.3" y="435.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="750.3" y="446.0"></text>
</g>
<g>
<title>ext4_write_checks (7 samples, 0.11%)</title><rect x="747.7" y="435.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="750.7" y="446.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (5 samples, 0.08%)</title><rect x="747.7" y="419.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="750.7" y="430.0"></text>
</g>
<g>
<title>generic_write_checks (2 samples, 0.03%)</title><rect x="748.6" y="419.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="751.6" y="430.0"></text>
</g>
<g>
<title>rw_verify_area (13 samples, 0.21%)</title><rect x="749.6" y="483.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="752.6" y="494.0"></text>
</g>
<g>
<title>security_file_permission (11 samples, 0.18%)</title><rect x="749.9" y="467.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="752.9" y="478.0"></text>
</g>
<g>
<title>apparmor_file_permission (10 samples, 0.16%)</title><rect x="749.9" y="451.0" width="1.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="752.9" y="462.0"></text>
</g>
<g>
<title>common_file_perm (10 samples, 0.16%)</title><rect x="749.9" y="435.0" width="1.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="752.9" y="446.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="752.0" y="531.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="755.0" y="542.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="752.0" y="515.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="755.0" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="752.0" y="499.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="755.0" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="752.0" y="483.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="755.0" y="494.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.03%)</title><rect x="752.6" y="531.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="755.6" y="542.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (7 samples, 0.11%)</title><rect x="753.5" y="611.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="756.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (31 samples, 0.49%)</title><rect x="755.0" y="611.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="758.0" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.10%)</title><rect x="755.4" y="595.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="758.4" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="756.5" y="595.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="759.5" y="606.0"></text>
</g>
<g>
<title>memcpy (2 samples, 0.03%)</title><rect x="756.9" y="595.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="759.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.05%)</title><rect x="757.3" y="595.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="760.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (2 samples, 0.03%)</title><rect x="757.9" y="595.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="760.9" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="757.9" y="579.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="760.9" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="757.9" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="760.9" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="757.9" y="547.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="760.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (10 samples, 0.16%)</title><rect x="758.2" y="595.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.2" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="759.7" y="579.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="762.7" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="759.7" y="563.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="762.7" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="759.7" y="547.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="762.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (4 samples, 0.06%)</title><rect x="760.1" y="595.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="760.9" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="763.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.06%)</title><rect x="761.3" y="643.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (10 samples, 0.16%)</title><rect x="762.2" y="659.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="765.2" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="762.2" y="643.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="765.2" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.13%)</title><rect x="762.6" y="643.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="765.6" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="763.5" y="627.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="766.5" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="763.5" y="611.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="766.5" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="763.5" y="595.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="766.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (3 samples, 0.05%)</title><rect x="764.3" y="659.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="767.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (4 samples, 0.06%)</title><rect x="764.8" y="659.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (2 samples, 0.03%)</title><rect x="765.6" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="768.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (398 samples, 6.35%)</title><rect x="766.0" y="659.0" width="74.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="769.0" y="670.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (392 samples, 6.26%)</title><rect x="766.5" y="643.0" width="73.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="769.5" y="654.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.11%)</title><rect x="766.7" y="627.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.7" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="767.7" y="611.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="770.7" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="767.7" y="595.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="770.7" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="767.7" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="770.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (2 samples, 0.03%)</title><rect x="768.0" y="627.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="771.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (4 samples, 0.06%)</title><rect x="768.4" y="627.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="771.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (377 samples, 6.02%)</title><rect x="769.4" y="627.0" width="71.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="772.4" y="638.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (353 samples, 5.64%)</title><rect x="771.0" y="611.0" width="66.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.0" y="622.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.03%)</title><rect x="771.0" y="595.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="774.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (4 samples, 0.06%)</title><rect x="771.6" y="595.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (346 samples, 5.52%)</title><rect x="772.4" y="595.0" width="65.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="775.4" y="606.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (7 samples, 0.11%)</title><rect x="775.6" y="579.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="778.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (10 samples, 0.16%)</title><rect x="777.3" y="579.0" width="1.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.3" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (303 samples, 4.84%)</title><rect x="779.1" y="579.0" width="57.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="782.1" y="590.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (27 samples, 0.43%)</title><rect x="781.4" y="563.0" width="5.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="784.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="782.5" y="547.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="785.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (8 samples, 0.13%)</title><rect x="783.3" y="547.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="786.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (9 samples, 0.14%)</title><rect x="784.8" y="547.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="787.8" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (247 samples, 3.94%)</title><rect x="786.5" y="563.0" width="46.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="789.5" y="574.0">bool..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (222 samples, 3.54%)</title><rect x="789.7" y="547.0" width="41.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="792.7" y="558.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (121 samples, 1.93%)</title><rect x="804.0" y="531.0" width="22.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="807.0" y="542.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (13 samples, 0.21%)</title><rect x="804.4" y="515.0" width="2.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="807.4" y="526.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (5 samples, 0.08%)</title><rect x="806.8" y="515.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="809.8" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (37 samples, 0.59%)</title><rect x="807.8" y="515.0" width="7.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="810.8" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="814.4" y="499.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="817.4" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="814.4" y="483.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="817.4" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="814.4" y="467.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="817.4" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (64 samples, 1.02%)</title><rect x="814.8" y="515.0" width="12.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="817.8" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (6 samples, 0.10%)</title><rect x="816.8" y="499.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="819.8" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (27 samples, 0.43%)</title><rect x="818.0" y="499.0" width="5.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="821.0" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="822.5" y="483.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="825.5" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="822.5" y="467.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="825.5" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="822.5" y="451.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="825.5" y="462.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="823.0" y="499.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="826.0" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (13 samples, 0.21%)</title><rect x="823.4" y="499.0" width="2.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="826.4" y="510.0"></text>
</g>
<g>
<title>memcmp@plt (4 samples, 0.06%)</title><rect x="826.1" y="499.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="829.1" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="826.8" y="531.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="829.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (21 samples, 0.34%)</title><rect x="827.2" y="531.0" width="3.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="830.2" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.05%)</title><rect x="830.2" y="515.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="833.2" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="831.1" y="531.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="834.1" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="831.1" y="515.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="834.1" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="831.1" y="499.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="834.1" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="831.5" y="547.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="834.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="832.1" y="547.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="832.5" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="835.5" y="558.0"></text>
</g>
<g>
<title>page_fault (3 samples, 0.05%)</title><rect x="833.0" y="563.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="836.0" y="574.0"></text>
</g>
<g>
<title>do_page_fault (3 samples, 0.05%)</title><rect x="833.0" y="547.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="836.0" y="558.0"></text>
</g>
<g>
<title>__do_page_fault (3 samples, 0.05%)</title><rect x="833.0" y="531.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="836.0" y="542.0"></text>
</g>
<g>
<title>do_user_addr_fault (2 samples, 0.03%)</title><rect x="833.0" y="515.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="836.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (4 samples, 0.06%)</title><rect x="833.6" y="563.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="836.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (3 samples, 0.05%)</title><rect x="834.3" y="563.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="837.3" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (6 samples, 0.10%)</title><rect x="834.9" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="837.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (3 samples, 0.05%)</title><rect x="835.3" y="547.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="838.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.03%)</title><rect x="836.4" y="579.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (4 samples, 0.06%)</title><rect x="836.8" y="579.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="839.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (4 samples, 0.06%)</title><rect x="837.5" y="611.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (11 samples, 0.18%)</title><rect x="838.3" y="611.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="841.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (2 samples, 0.03%)</title><rect x="840.6" y="643.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="843.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (60 samples, 0.96%)</title><rect x="840.9" y="659.0" width="11.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="843.9" y="670.0"></text>
</g>
<g>
<title>cfree (6 samples, 0.10%)</title><rect x="841.1" y="643.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="844.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (52 samples, 0.83%)</title><rect x="842.4" y="643.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="845.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (52 samples, 0.83%)</title><rect x="842.4" y="627.0" width="9.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="845.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (51 samples, 0.81%)</title><rect x="842.4" y="611.0" width="9.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="845.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (51 samples, 0.81%)</title><rect x="842.4" y="595.0" width="9.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="845.4" y="606.0"></text>
</g>
<g>
<title>memcpy (2 samples, 0.03%)</title><rect x="842.8" y="579.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="845.8" y="590.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (2 samples, 0.03%)</title><rect x="843.4" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="846.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (43 samples, 0.69%)</title><rect x="843.8" y="579.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="846.8" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (4 samples, 0.06%)</title><rect x="844.1" y="563.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="847.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.03%)</title><rect x="844.5" y="547.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="847.5" y="558.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (36 samples, 0.57%)</title><rect x="845.1" y="563.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="848.1" y="574.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (36 samples, 0.57%)</title><rect x="845.1" y="547.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="848.1" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (32 samples, 0.51%)</title><rect x="845.3" y="531.0" width="6.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="848.3" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni17311385900272391305.so (12 samples, 0.19%)</title><rect x="847.9" y="515.0" width="2.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="850.9" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="848.3" y="499.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="851.3" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (7 samples, 0.11%)</title><rect x="848.8" y="499.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="851.8" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.08%)</title><rect x="849.2" y="483.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="852.2" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.05%)</title><rect x="850.2" y="515.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="853.2" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="850.7" y="515.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="853.7" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="850.7" y="499.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="853.7" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="850.7" y="483.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="853.7" y="494.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (2 samples, 0.03%)</title><rect x="852.2" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (5 samples, 0.08%)</title><rect x="852.6" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="855.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (64 samples, 1.02%)</title><rect x="853.6" y="659.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="856.6" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.13%)</title><rect x="864.1" y="643.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="867.1" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (8 samples, 0.13%)</title><rect x="864.1" y="627.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="867.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (8 samples, 0.13%)</title><rect x="864.1" y="611.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="867.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (36 samples, 0.57%)</title><rect x="865.6" y="659.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.6" y="670.0"></text>
</g>
<g>
<title>__sched_yield (9 samples, 0.14%)</title><rect x="866.0" y="643.0" width="1.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="869.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.14%)</title><rect x="866.0" y="627.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="869.0" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.14%)</title><rect x="866.0" y="611.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="869.0" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (9 samples, 0.14%)</title><rect x="866.0" y="595.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="869.0" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (9 samples, 0.14%)</title><rect x="866.0" y="579.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="869.0" y="590.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.14%)</title><rect x="866.0" y="563.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="869.0" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (9 samples, 0.14%)</title><rect x="866.0" y="547.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="869.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (24 samples, 0.38%)</title><rect x="867.7" y="643.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="870.7" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="871.6" y="627.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="874.6" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="871.6" y="611.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="874.6" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="871.6" y="595.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="874.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.05%)</title><rect x="872.6" y="659.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="875.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (3 samples, 0.05%)</title><rect x="873.1" y="659.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.06%)</title><rect x="873.7" y="659.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="876.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (15 samples, 0.24%)</title><rect x="874.5" y="659.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="877.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (15 samples, 0.24%)</title><rect x="874.5" y="643.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="877.5" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.06%)</title><rect x="876.5" y="627.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="879.5" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.06%)</title><rect x="876.5" y="611.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="879.5" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.06%)</title><rect x="876.5" y="595.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="879.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.06%)</title><rect x="877.9" y="659.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="880.9" y="670.0"></text>
</g>
<g>
<title>std::_Rb_tree_increment(std::_Rb_tree_node_base*) (2 samples, 0.03%)</title><rect x="878.6" y="659.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="881.6" y="670.0"></text>
</g>
<g>
<title>std::chrono::_V2::steady_clock::now() (3 samples, 0.05%)</title><rect x="879.0" y="659.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.0" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.05%)</title><rect x="879.6" y="659.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="882.6" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.05%)</title><rect x="879.6" y="643.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="882.6" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.05%)</title><rect x="879.6" y="627.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="882.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (5 samples, 0.08%)</title><rect x="880.5" y="675.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="883.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (8 samples, 0.13%)</title><rect x="881.4" y="675.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="884.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="883.1" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.03%)</title><rect x="883.7" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="886.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (4 samples, 0.06%)</title><rect x="884.1" y="675.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="887.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (5 samples, 0.08%)</title><rect x="884.8" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="887.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Unlock() (2 samples, 0.03%)</title><rect x="886.0" y="675.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (4 samples, 0.06%)</title><rect x="886.5" y="691.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="889.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (4 samples, 0.06%)</title><rect x="887.5" y="691.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="890.5" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (34 samples, 0.54%)</title><rect x="888.2" y="691.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="891.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (4 samples, 0.06%)</title><rect x="888.4" y="675.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (6 samples, 0.10%)</title><rect x="889.2" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="892.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (3 samples, 0.05%)</title><rect x="890.3" y="675.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="890.9" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (3 samples, 0.05%)</title><rect x="891.2" y="675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="894.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.13%)</title><rect x="891.8" y="675.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.8" y="686.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (2 samples, 0.03%)</title><rect x="892.9" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="895.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (6 samples, 0.10%)</title><rect x="893.3" y="675.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="896.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.06%)</title><rect x="894.6" y="691.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="897.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="895.4" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="898.4" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (4 samples, 0.06%)</title><rect x="895.9" y="691.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="898.9" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="896.3" y="675.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="899.3" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="896.3" y="659.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="899.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="896.3" y="643.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="899.3" y="654.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (4 samples, 0.06%)</title><rect x="896.7" y="691.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="899.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.05%)</title><rect x="897.6" y="707.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="900.6" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="897.8" y="691.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="900.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="897.8" y="675.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="900.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="897.8" y="659.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="900.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (6 samples, 0.10%)</title><rect x="898.2" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="901.2" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (5 samples, 0.08%)</title><rect x="899.3" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="902.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (3 samples, 0.05%)</title><rect x="900.3" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="903.3" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="900.8" y="739.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.8" y="750.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.70%)</title><rect x="901.4" y="771.0" width="8.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="904.4" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.03%)</title><rect x="901.4" y="755.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="904.4" y="766.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.05%)</title><rect x="901.8" y="755.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="904.8" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="901.8" y="739.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="904.8" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="901.8" y="723.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="904.8" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.05%)</title><rect x="901.8" y="707.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="904.8" y="718.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.05%)</title><rect x="901.8" y="691.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="904.8" y="702.0"></text>
</g>
<g>
<title>futex_wait (3 samples, 0.05%)</title><rect x="901.8" y="675.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="904.8" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.05%)</title><rect x="901.8" y="659.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="904.8" y="670.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="901.8" y="643.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="904.8" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="901.8" y="627.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="904.8" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.05%)</title><rect x="901.8" y="611.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="904.8" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_wait (31 samples, 0.49%)</title><rect x="902.3" y="755.0" width="5.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="905.3" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.45%)</title><rect x="902.9" y="739.0" width="5.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="905.9" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (28 samples, 0.45%)</title><rect x="902.9" y="723.0" width="5.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="905.9" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (28 samples, 0.45%)</title><rect x="902.9" y="707.0" width="5.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="905.9" y="718.0"></text>
</g>
<g>
<title>do_futex (28 samples, 0.45%)</title><rect x="902.9" y="691.0" width="5.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="905.9" y="702.0"></text>
</g>
<g>
<title>futex_wait (28 samples, 0.45%)</title><rect x="902.9" y="675.0" width="5.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="905.9" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (25 samples, 0.40%)</title><rect x="903.1" y="659.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="906.1" y="670.0"></text>
</g>
<g>
<title>schedule (25 samples, 0.40%)</title><rect x="903.1" y="643.0" width="4.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="906.1" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (24 samples, 0.38%)</title><rect x="903.3" y="627.0" width="4.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="906.3" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (24 samples, 0.38%)</title><rect x="903.3" y="611.0" width="4.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="906.3" y="622.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (3 samples, 0.05%)</title><rect x="908.9" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="911.9" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (19 samples, 0.30%)</title><rect x="909.7" y="771.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="912.7" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_signal (97 samples, 1.55%)</title><rect x="913.3" y="771.0" width="18.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="916.3" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (96 samples, 1.53%)</title><rect x="913.5" y="755.0" width="18.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="916.5" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (96 samples, 1.53%)</title><rect x="913.5" y="739.0" width="18.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="916.5" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (95 samples, 1.52%)</title><rect x="913.5" y="723.0" width="17.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="916.5" y="734.0"></text>
</g>
<g>
<title>do_futex (95 samples, 1.52%)</title><rect x="913.5" y="707.0" width="17.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="916.5" y="718.0"></text>
</g>
<g>
<title>futex_wake (95 samples, 1.52%)</title><rect x="913.5" y="691.0" width="17.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="916.5" y="702.0"></text>
</g>
<g>
<title>wake_up_q (92 samples, 1.47%)</title><rect x="914.0" y="675.0" width="17.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="917.0" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (92 samples, 1.47%)</title><rect x="914.0" y="659.0" width="17.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="917.0" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (92 samples, 1.47%)</title><rect x="914.0" y="643.0" width="17.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="917.0" y="654.0"></text>
</g>
<g>
<title>clock_gettime (12 samples, 0.19%)</title><rect x="931.5" y="771.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="934.5" y="782.0"></text>
</g>
<g>
<title>clock_gettime (9 samples, 0.14%)</title><rect x="932.1" y="755.0" width="1.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="935.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.14%)</title><rect x="932.1" y="739.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="935.1" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.unfoldToBytes (6 samples, 0.10%)</title><rect x="934.2" y="803.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="937.2" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (5 samples, 0.08%)</title><rect x="934.2" y="787.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="934.4" y="771.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="934.4" y="755.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="937.4" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="934.4" y="739.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="934.6" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="937.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.05%)</title><rect x="934.6" y="707.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="937.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (14 samples, 0.22%)</title><rect x="935.3" y="803.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="938.3" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (11 samples, 0.18%)</title><rect x="935.9" y="787.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="938.9" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (10 samples, 0.16%)</title><rect x="936.1" y="771.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="936.1" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="939.1" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="936.1" y="739.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="939.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="936.1" y="723.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="939.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="936.1" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="939.1" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="936.1" y="691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.1" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="936.6" y="755.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="939.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="936.6" y="739.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="939.6" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (7 samples, 0.11%)</title><rect x="936.6" y="723.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (7 samples, 0.11%)</title><rect x="936.6" y="707.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="939.6" y="718.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,320 samples, 21.07%)</title><rect x="938.0" y="915.0" width="248.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="941.0" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.13%)</title><rect x="938.9" y="899.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="941.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.13%)</title><rect x="938.9" y="883.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="941.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (8 samples, 0.13%)</title><rect x="938.9" y="867.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="941.9" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (478 samples, 7.63%)</title><rect x="940.4" y="899.0" width="90.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.4" y="910.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (464 samples, 7.41%)</title><rect x="943.0" y="883.0" width="87.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="946.0" y="894.0">one/nio/ne..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="947.6" y="867.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="950.6" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (2 samples, 0.03%)</title><rect x="948.3" y="867.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="951.3" y="878.0"></text>
</g>
<g>
<title>clock_gettime (10 samples, 0.16%)</title><rect x="948.9" y="867.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="951.9" y="878.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="950.4" y="851.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="953.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="950.4" y="835.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="953.4" y="846.0"></text>
</g>
<g>
<title>epoll_wait (423 samples, 6.75%)</title><rect x="950.8" y="867.0" width="79.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="953.8" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (404 samples, 6.45%)</title><rect x="954.3" y="851.0" width="76.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="957.3" y="862.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (2 samples, 0.03%)</title><rect x="954.3" y="835.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="957.3" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (402 samples, 6.42%)</title><rect x="954.7" y="835.0" width="75.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="957.7" y="846.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (398 samples, 6.35%)</title><rect x="955.5" y="819.0" width="74.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="958.5" y="830.0">__x64_sy..</text>
</g>
<g>
<title>do_epoll_wait (397 samples, 6.34%)</title><rect x="955.7" y="803.0" width="74.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="958.7" y="814.0">do_epoll..</text>
</g>
<g>
<title>__fdget (7 samples, 0.11%)</title><rect x="955.8" y="787.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="958.8" y="798.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.11%)</title><rect x="955.8" y="771.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="958.8" y="782.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.11%)</title><rect x="955.8" y="755.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="958.8" y="766.0"></text>
</g>
<g>
<title>ep_poll (382 samples, 6.10%)</title><rect x="957.4" y="787.0" width="71.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="960.4" y="798.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (42 samples, 0.67%)</title><rect x="959.0" y="771.0" width="8.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="962.0" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (35 samples, 0.56%)</title><rect x="960.0" y="755.0" width="6.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="963.0" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (31 samples, 0.49%)</title><rect x="960.2" y="739.0" width="5.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="963.2" y="750.0"></text>
</g>
<g>
<title>sock_poll (24 samples, 0.38%)</title><rect x="961.1" y="723.0" width="4.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="964.1" y="734.0"></text>
</g>
<g>
<title>tcp_poll (7 samples, 0.11%)</title><rect x="963.0" y="707.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="966.0" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (7 samples, 0.11%)</title><rect x="964.3" y="707.0" width="1.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="967.3" y="718.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.03%)</title><rect x="965.6" y="723.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="968.6" y="734.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.05%)</title><rect x="966.0" y="739.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="969.0" y="750.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.03%)</title><rect x="966.6" y="755.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="969.6" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (2 samples, 0.03%)</title><rect x="967.0" y="771.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="970.0" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (328 samples, 5.24%)</title><rect x="967.3" y="771.0" width="61.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="970.3" y="782.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (327 samples, 5.22%)</title><rect x="967.5" y="755.0" width="61.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="970.5" y="766.0">schedu..</text>
</g>
<g>
<title>schedule (327 samples, 5.22%)</title><rect x="967.5" y="739.0" width="61.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="970.5" y="750.0">schedule</text>
</g>
<g>
<title>__sched_text_start (326 samples, 5.20%)</title><rect x="967.7" y="723.0" width="61.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="970.7" y="734.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (308 samples, 4.92%)</title><rect x="971.1" y="707.0" width="58.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="974.1" y="718.0">finish..</text>
</g>
<g>
<title>fput_many (6 samples, 0.10%)</title><rect x="1029.3" y="787.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1032.3" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (829 samples, 13.23%)</title><rect x="1030.4" y="899.0" width="156.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1033.4" y="910.0">one/nio/net/Session...</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.05%)</title><rect x="1032.9" y="883.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1035.9" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (813 samples, 12.98%)</title><rect x="1033.5" y="883.0" width="153.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1036.5" y="894.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (612 samples, 9.77%)</title><rect x="1033.5" y="867.0" width="115.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1036.5" y="878.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (21 samples, 0.34%)</title><rect x="1042.7" y="851.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1045.7" y="862.0"></text>
</g>
<g>
<title>itable stub (21 samples, 0.34%)</title><rect x="1046.6" y="851.0" width="4.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1049.6" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (399 samples, 6.37%)</title><rect x="1050.6" y="851.0" width="75.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1053.6" y="862.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (399 samples, 6.37%)</title><rect x="1050.6" y="835.0" width="75.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.6" y="846.0">one/nio/..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (366 samples, 5.84%)</title><rect x="1050.8" y="819.0" width="68.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.8" y="830.0">Request..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (24 samples, 0.38%)</title><rect x="1051.0" y="803.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1054.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (19 samples, 0.30%)</title><rect x="1051.9" y="787.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1054.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.10%)</title><rect x="1053.2" y="771.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1056.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.10%)</title><rect x="1053.2" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1056.2" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="1054.6" y="771.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1057.6" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="1055.1" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1055.1" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1055.1" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1058.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1055.1" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1058.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.entity (341 samples, 5.44%)</title><rect x="1055.5" y="803.0" width="64.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1058.5" y="814.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1055.9" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="1055.9" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1058.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.03%)</title><rect x="1055.9" y="755.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1058.9" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="1055.9" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1058.9" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1055.9" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1058.9" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1055.9" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1055.9" y="691.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.9" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1056.3" y="787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1059.3" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1056.3" y="771.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1059.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1056.3" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.3" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1056.3" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.3" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1056.3" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1056.3" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncPut (298 samples, 4.76%)</title><rect x="1056.6" y="787.0" width="56.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.6" y="798.0">ru/mai..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (284 samples, 4.53%)</title><rect x="1058.9" y="771.0" width="53.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1061.9" y="782.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (284 samples, 4.53%)</title><rect x="1058.9" y="755.0" width="53.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1061.9" y="766.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (6 samples, 0.10%)</title><rect x="1061.5" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1064.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.10%)</title><rect x="1061.5" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1064.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.10%)</title><rect x="1061.5" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.10%)</title><rect x="1061.5" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1064.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.10%)</title><rect x="1062.7" y="739.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1065.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.10%)</title><rect x="1062.7" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1065.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.10%)</title><rect x="1062.7" y="707.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1065.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.10%)</title><rect x="1062.7" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1065.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.10%)</title><rect x="1062.7" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1065.7" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="1063.0" y="659.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1066.0" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="1063.0" y="643.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1066.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (258 samples, 4.12%)</title><rect x="1063.8" y="739.0" width="48.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1066.8" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (258 samples, 4.12%)</title><rect x="1063.8" y="723.0" width="48.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1066.8" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (258 samples, 4.12%)</title><rect x="1063.8" y="707.0" width="48.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1066.8" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (258 samples, 4.12%)</title><rect x="1063.8" y="691.0" width="48.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1066.8" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.05%)</title><rect x="1064.5" y="675.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1067.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (251 samples, 4.01%)</title><rect x="1065.1" y="675.0" width="47.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1068.1" y="686.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (21 samples, 0.34%)</title><rect x="1065.3" y="659.0" width="3.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1068.3" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.03%)</title><rect x="1065.9" y="643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.9" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="1066.4" y="643.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.4" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.05%)</title><rect x="1066.8" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1069.8" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.05%)</title><rect x="1067.7" y="643.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.7" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.08%)</title><rect x="1068.3" y="643.0" width="0.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1071.3" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (226 samples, 3.61%)</title><rect x="1069.2" y="659.0" width="42.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1072.2" y="670.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (219 samples, 3.50%)</title><rect x="1070.6" y="643.0" width="41.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1073.6" y="654.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (218 samples, 3.48%)</title><rect x="1070.8" y="627.0" width="41.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1073.8" y="638.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (217 samples, 3.46%)</title><rect x="1070.8" y="611.0" width="40.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1073.8" y="622.0">__x..</text>
</g>
<g>
<title>do_futex (216 samples, 3.45%)</title><rect x="1070.9" y="595.0" width="40.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1073.9" y="606.0">do_..</text>
</g>
<g>
<title>futex_wake (216 samples, 3.45%)</title><rect x="1070.9" y="579.0" width="40.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1073.9" y="590.0">fut..</text>
</g>
<g>
<title>mark_wake_futex (4 samples, 0.06%)</title><rect x="1071.5" y="563.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1074.5" y="574.0"></text>
</g>
<g>
<title>wake_up_q (209 samples, 3.34%)</title><rect x="1072.3" y="563.0" width="39.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1075.3" y="574.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (209 samples, 3.34%)</title><rect x="1072.3" y="547.0" width="39.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1075.3" y="558.0">try..</text>
</g>
<g>
<title>__lock_text_start (209 samples, 3.34%)</title><rect x="1072.3" y="531.0" width="39.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1075.3" y="542.0">__l..</text>
</g>
<g>
<title>pthread_cond_signal (2 samples, 0.03%)</title><rect x="1112.0" y="659.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1115.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (10 samples, 0.16%)</title><rect x="1112.8" y="787.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1115.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.05%)</title><rect x="1112.8" y="771.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1115.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.05%)</title><rect x="1112.8" y="755.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1115.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.05%)</title><rect x="1112.8" y="739.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1115.8" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.05%)</title><rect x="1112.8" y="723.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1115.8" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1113.0" y="707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.0" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1113.0" y="691.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1113.0" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (7 samples, 0.11%)</title><rect x="1113.3" y="771.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1116.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (7 samples, 0.11%)</title><rect x="1113.3" y="755.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1116.3" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (7 samples, 0.11%)</title><rect x="1113.3" y="739.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1116.3" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="1113.9" y="723.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1116.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (27 samples, 0.43%)</title><rect x="1114.6" y="787.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1117.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (26 samples, 0.42%)</title><rect x="1114.8" y="771.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1117.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (26 samples, 0.42%)</title><rect x="1114.8" y="755.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1117.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.05%)</title><rect x="1116.3" y="739.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1119.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.05%)</title><rect x="1116.3" y="723.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1119.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.05%)</title><rect x="1116.3" y="707.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1119.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.05%)</title><rect x="1116.3" y="691.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1119.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.22%)</title><rect x="1117.1" y="739.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.22%)</title><rect x="1117.1" y="723.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1120.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.22%)</title><rect x="1117.1" y="707.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.22%)</title><rect x="1117.1" y="691.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1120.1" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (11 samples, 0.18%)</title><rect x="1117.7" y="675.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1120.7" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (10 samples, 0.16%)</title><rect x="1117.9" y="659.0" width="1.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1120.9" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.16%)</title><rect x="1117.9" y="643.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1120.9" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.16%)</title><rect x="1117.9" y="627.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1120.9" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.16%)</title><rect x="1117.9" y="611.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1120.9" y="622.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.16%)</title><rect x="1117.9" y="595.0" width="1.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1120.9" y="606.0"></text>
</g>
<g>
<title>futex_wake (10 samples, 0.16%)</title><rect x="1117.9" y="579.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1120.9" y="590.0"></text>
</g>
<g>
<title>wake_up_q (10 samples, 0.16%)</title><rect x="1117.9" y="563.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1120.9" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.16%)</title><rect x="1117.9" y="547.0" width="1.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1120.9" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.16%)</title><rect x="1117.9" y="531.0" width="1.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1120.9" y="542.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (31 samples, 0.49%)</title><rect x="1119.7" y="819.0" width="5.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1122.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (31 samples, 0.49%)</title><rect x="1119.7" y="803.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1122.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (17 samples, 0.27%)</title><rect x="1119.7" y="787.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1122.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (14 samples, 0.22%)</title><rect x="1122.9" y="787.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (14 samples, 0.22%)</title><rect x="1122.9" y="771.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (14 samples, 0.22%)</title><rect x="1122.9" y="755.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1125.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (64 samples, 1.02%)</title><rect x="1125.8" y="851.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1128.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.11%)</title><rect x="1126.1" y="835.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1129.1" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1126.7" y="819.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1129.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="1126.7" y="803.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="1126.7" y="787.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1129.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.05%)</title><rect x="1126.9" y="771.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1129.9" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 0.65%)</title><rect x="1127.5" y="835.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1130.5" y="846.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="1128.2" y="819.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1131.2" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.08%)</title><rect x="1128.2" y="803.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.2" y="814.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="1129.2" y="819.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1132.2" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.35%)</title><rect x="1129.7" y="819.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1132.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="1133.3" y="803.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1133.3" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1133.3" y="771.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.3" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="1133.3" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1133.5" y="739.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.11%)</title><rect x="1133.9" y="819.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.9" y="830.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.11%)</title><rect x="1133.9" y="803.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1136.9" y="814.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.11%)</title><rect x="1133.9" y="787.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1136.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (14 samples, 0.22%)</title><rect x="1135.2" y="835.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1138.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2 samples, 0.03%)</title><rect x="1137.8" y="851.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1140.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (29 samples, 0.46%)</title><rect x="1138.2" y="851.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1141.2" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (17 samples, 0.27%)</title><rect x="1140.3" y="835.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1143.3" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (17 samples, 0.27%)</title><rect x="1140.3" y="819.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1143.3" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (7 samples, 0.11%)</title><rect x="1141.8" y="803.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1144.8" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1143.1" y="803.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1146.1" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.42%)</title><rect x="1143.8" y="851.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1146.8" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (4 samples, 0.06%)</title><rect x="1144.0" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1147.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (21 samples, 0.34%)</title><rect x="1144.8" y="835.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1147.8" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.08%)</title><rect x="1147.2" y="819.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.2" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.06%)</title><rect x="1147.4" y="803.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.06%)</title><rect x="1147.4" y="787.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="1147.4" y="771.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="1147.6" y="755.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1147.6" y="739.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1148.4" y="819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1151.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1148.4" y="803.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1151.4" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1148.4" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1151.4" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1148.4" y="771.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.4" y="782.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (201 samples, 3.21%)</title><rect x="1148.7" y="867.0" width="37.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1151.7" y="878.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (195 samples, 3.11%)</title><rect x="1149.9" y="851.0" width="36.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1152.9" y="862.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (52 samples, 0.83%)</title><rect x="1151.9" y="835.0" width="9.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1154.9" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.08%)</title><rect x="1152.3" y="819.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1155.3" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.13%)</title><rect x="1153.3" y="819.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.3" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1154.8" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.8" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (30 samples, 0.48%)</title><rect x="1155.5" y="819.0" width="5.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1158.5" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1156.8" y="803.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (8 samples, 0.13%)</title><rect x="1157.2" y="803.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (13 samples, 0.21%)</title><rect x="1158.7" y="803.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1161.7" y="814.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.05%)</title><rect x="1161.2" y="819.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.2" y="830.0"></text>
</g>
<g>
<title>__recv (129 samples, 2.06%)</title><rect x="1161.7" y="835.0" width="24.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1164.7" y="846.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (118 samples, 1.88%)</title><rect x="1163.8" y="819.0" width="22.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.8" y="830.0">e..</text>
</g>
<g>
<title>do_syscall_64 (118 samples, 1.88%)</title><rect x="1163.8" y="803.0" width="22.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1166.8" y="814.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (113 samples, 1.80%)</title><rect x="1164.6" y="787.0" width="21.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1167.6" y="798.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (111 samples, 1.77%)</title><rect x="1164.6" y="771.0" width="20.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1167.6" y="782.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="1164.9" y="755.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1167.9" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (94 samples, 1.50%)</title><rect x="1165.3" y="755.0" width="17.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1168.3" y="766.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.05%)</title><rect x="1165.5" y="739.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1168.5" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (74 samples, 1.18%)</title><rect x="1166.1" y="739.0" width="13.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1169.1" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (72 samples, 1.15%)</title><rect x="1166.5" y="723.0" width="13.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1169.5" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.13%)</title><rect x="1169.3" y="707.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>skb_release_all (7 samples, 0.11%)</title><rect x="1169.3" y="691.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1172.3" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (5 samples, 0.08%)</title><rect x="1169.3" y="675.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1172.3" y="686.0"></text>
</g>
<g>
<title>dst_release (4 samples, 0.06%)</title><rect x="1169.5" y="659.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1172.5" y="670.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="1170.2" y="675.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.2" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.05%)</title><rect x="1171.5" y="707.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1174.5" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="1171.7" y="691.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1174.7" y="702.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (2 samples, 0.03%)</title><rect x="1171.7" y="675.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1174.7" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (24 samples, 0.38%)</title><rect x="1172.1" y="707.0" width="4.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1175.1" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (24 samples, 0.38%)</title><rect x="1172.1" y="691.0" width="4.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1175.1" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (13 samples, 0.21%)</title><rect x="1174.2" y="675.0" width="2.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.10%)</title><rect x="1174.2" y="659.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1177.2" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.05%)</title><rect x="1174.7" y="643.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1177.7" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (5 samples, 0.08%)</title><rect x="1175.3" y="659.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.06%)</title><rect x="1175.5" y="643.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (6 samples, 0.10%)</title><rect x="1176.6" y="707.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="1177.4" y="691.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (10 samples, 0.16%)</title><rect x="1177.8" y="707.0" width="1.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1180.8" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (8 samples, 0.13%)</title><rect x="1178.1" y="691.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1181.1" y="702.0"></text>
</g>
<g>
<title>ktime_get (6 samples, 0.10%)</title><rect x="1178.1" y="675.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1181.1" y="686.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (5 samples, 0.08%)</title><rect x="1178.3" y="659.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (4 samples, 0.06%)</title><rect x="1178.5" y="643.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>kvm_clock_get_cycles (2 samples, 0.03%)</title><rect x="1179.3" y="675.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1182.3" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="1179.6" y="707.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1182.6" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (16 samples, 0.26%)</title><rect x="1180.0" y="739.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (16 samples, 0.26%)</title><rect x="1180.0" y="723.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (16 samples, 0.26%)</title><rect x="1180.0" y="707.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>aa_label_next_confined (3 samples, 0.05%)</title><rect x="1181.0" y="691.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1184.0" y="702.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (8 samples, 0.13%)</title><rect x="1181.5" y="691.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>aa_label_next_confined (2 samples, 0.03%)</title><rect x="1182.1" y="675.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1185.1" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (3 samples, 0.05%)</title><rect x="1182.5" y="675.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1185.5" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.21%)</title><rect x="1183.0" y="755.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1186.0" y="766.0"></text>
</g>
<g>
<title>__fdget (7 samples, 0.11%)</title><rect x="1183.0" y="739.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.11%)</title><rect x="1183.0" y="723.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.11%)</title><rect x="1183.0" y="707.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>__fget_light (6 samples, 0.10%)</title><rect x="1184.3" y="739.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.05%)</title><rect x="1186.0" y="835.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1189.0" y="846.0"></text>
</g>
<g>
<title>start_thread (18 samples, 0.29%)</title><rect x="1186.6" y="915.0" width="3.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1189.6" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (18 samples, 0.29%)</title><rect x="1186.6" y="899.0" width="3.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (18 samples, 0.29%)</title><rect x="1186.6" y="883.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 0.19%)</title><rect x="1186.6" y="867.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.19%)</title><rect x="1186.6" y="851.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (10 samples, 0.16%)</title><rect x="1187.0" y="835.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (9 samples, 0.14%)</title><rect x="1187.2" y="819.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (8 samples, 0.13%)</title><rect x="1187.4" y="803.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (7 samples, 0.11%)</title><rect x="1187.6" y="787.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.6" y="798.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.03%)</title><rect x="1187.6" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.6" y="782.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.03%)</title><rect x="1188.1" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (4 samples, 0.06%)</title><rect x="1188.9" y="867.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (4 samples, 0.06%)</title><rect x="1188.9" y="851.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.06%)</title><rect x="1188.9" y="835.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 0.06%)</title><rect x="1188.9" y="819.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (4 samples, 0.06%)</title><rect x="1188.9" y="803.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (3 samples, 0.05%)</title><rect x="1188.9" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.05%)</title><rect x="1188.9" y="771.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1189.6" y="867.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.6" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1189.6" y="851.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.6" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="1189.6" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.6" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1189.6" y="819.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.6" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1189.6" y="803.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.6" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1189.6" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1192.6" y="798.0"></text>
</g>
</g>
</svg>
