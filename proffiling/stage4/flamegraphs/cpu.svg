<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (11,214 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (13 samples, 0.12%)</title><rect x="10.1" y="899.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (12 samples, 0.11%)</title><rect x="10.2" y="883.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (8 samples, 0.07%)</title><rect x="10.3" y="867.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.3" y="878.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (3 samples, 0.03%)</title><rect x="10.8" y="851.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="13.8" y="862.0"></text>
</g>
<g>
<title>[not_walkable_Java] (53 samples, 0.47%)</title><rect x="11.6" y="899.0" width="5.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="14.6" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (44 samples, 0.39%)</title><rect x="12.0" y="883.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="15.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (44 samples, 0.39%)</title><rect x="12.0" y="867.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.0" y="878.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (19 samples, 0.17%)</title><rect x="12.0" y="851.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.0" y="862.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (7 samples, 0.06%)</title><rect x="12.0" y="835.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (7 samples, 0.06%)</title><rect x="12.7" y="835.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.7" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.04%)</title><rect x="13.5" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.5" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (25 samples, 0.22%)</title><rect x="14.0" y="851.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (7 samples, 0.06%)</title><rect x="14.2" y="835.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.2" y="846.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (4 samples, 0.04%)</title><rect x="14.9" y="835.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.9" y="846.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (10 samples, 0.09%)</title><rect x="15.5" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.5" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (6 samples, 0.05%)</title><rect x="15.6" y="819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.6" y="830.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (3 samples, 0.03%)</title><rect x="16.2" y="819.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (4 samples, 0.04%)</title><rect x="16.6" y="883.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.12%)</title><rect x="17.2" y="899.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="20.2" y="910.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (11 samples, 0.10%)</title><rect x="17.4" y="883.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="20.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.10%)</title><rect x="17.4" y="867.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="20.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.10%)</title><rect x="17.4" y="851.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="20.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.10%)</title><rect x="17.4" y="835.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="20.4" y="846.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.08%)</title><rect x="17.4" y="819.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="20.4" y="830.0"></text>
</g>
<g>
<title>futex_wait (9 samples, 0.08%)</title><rect x="17.4" y="803.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="20.4" y="814.0"></text>
</g>
<g>
<title>futex_wait_queue_me (9 samples, 0.08%)</title><rect x="17.4" y="787.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="20.4" y="798.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.08%)</title><rect x="17.4" y="771.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="20.4" y="782.0"></text>
</g>
<g>
<title>__schedule (9 samples, 0.08%)</title><rect x="17.4" y="755.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="20.4" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.07%)</title><rect x="17.5" y="739.0" width="0.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="20.5" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (26 samples, 0.23%)</title><rect x="18.5" y="899.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="21.5" y="910.0"></text>
</g>
<g>
<title>__pthread_cond_signal (18 samples, 0.16%)</title><rect x="19.4" y="883.0" width="1.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="22.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (18 samples, 0.16%)</title><rect x="19.4" y="867.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="22.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (18 samples, 0.16%)</title><rect x="19.4" y="851.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="22.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (17 samples, 0.15%)</title><rect x="19.4" y="835.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.4" y="846.0"></text>
</g>
<g>
<title>do_futex (17 samples, 0.15%)</title><rect x="19.4" y="819.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="22.4" y="830.0"></text>
</g>
<g>
<title>futex_wake (17 samples, 0.15%)</title><rect x="19.4" y="803.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="22.4" y="814.0"></text>
</g>
<g>
<title>wake_up_q (17 samples, 0.15%)</title><rect x="19.4" y="787.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="22.4" y="798.0"></text>
</g>
<g>
<title>try_to_wake_up (17 samples, 0.15%)</title><rect x="19.4" y="771.0" width="1.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="22.4" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (17 samples, 0.15%)</title><rect x="19.4" y="755.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="22.4" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (8,751 samples, 78.04%)</title><rect x="21.3" y="899.0" width="920.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.3" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (8,751 samples, 78.04%)</title><rect x="21.3" y="883.0" width="920.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.3" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (8,751 samples, 78.04%)</title><rect x="21.3" y="867.0" width="920.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.3" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (607 samples, 5.41%)</title><rect x="23.9" y="851.0" width="63.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.9" y="862.0">java/ut..</text>
</g>
<g>
<title>itable stub (8 samples, 0.07%)</title><rect x="25.6" y="835.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="28.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (564 samples, 5.03%)</title><rect x="26.4" y="835.0" width="59.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="29.4" y="846.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (6 samples, 0.05%)</title><rect x="28.6" y="819.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.05%)</title><rect x="28.6" y="803.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.05%)</title><rect x="28.6" y="787.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.05%)</title><rect x="28.6" y="771.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (329 samples, 2.93%)</title><rect x="29.3" y="819.0" width="34.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.3" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (96 samples, 0.86%)</title><rect x="29.6" y="803.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (96 samples, 0.86%)</title><rect x="29.6" y="787.0" width="10.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="32.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (93 samples, 0.83%)</title><rect x="29.7" y="771.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="32.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (93 samples, 0.83%)</title><rect x="29.7" y="755.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="32.7" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (91 samples, 0.81%)</title><rect x="29.9" y="739.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.9" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.08%)</title><rect x="29.9" y="723.0" width="0.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="32.9" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.03%)</title><rect x="30.1" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="33.1" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.03%)</title><rect x="30.5" y="707.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="33.5" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (81 samples, 0.72%)</title><rect x="30.8" y="723.0" width="8.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="33.8" y="734.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (80 samples, 0.71%)</title><rect x="30.9" y="707.0" width="8.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="33.9" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (80 samples, 0.71%)</title><rect x="30.9" y="691.0" width="8.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="33.9" y="702.0"></text>
</g>
<g>
<title>__x64_sys_futex (80 samples, 0.71%)</title><rect x="30.9" y="675.0" width="8.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="33.9" y="686.0"></text>
</g>
<g>
<title>do_futex (80 samples, 0.71%)</title><rect x="30.9" y="659.0" width="8.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="33.9" y="670.0"></text>
</g>
<g>
<title>futex_wake (80 samples, 0.71%)</title><rect x="30.9" y="643.0" width="8.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="33.9" y="654.0"></text>
</g>
<g>
<title>wake_up_q (80 samples, 0.71%)</title><rect x="30.9" y="627.0" width="8.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="33.9" y="638.0"></text>
</g>
<g>
<title>try_to_wake_up (80 samples, 0.71%)</title><rect x="30.9" y="611.0" width="8.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="33.9" y="622.0"></text>
</g>
<g>
<title>__lock_text_start (80 samples, 0.71%)</title><rect x="30.9" y="595.0" width="8.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="33.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (4 samples, 0.04%)</title><rect x="39.7" y="803.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="42.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (4 samples, 0.04%)</title><rect x="39.7" y="787.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="42.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (225 samples, 2.01%)</title><rect x="40.1" y="803.0" width="23.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.1" y="814.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (222 samples, 1.98%)</title><rect x="40.4" y="787.0" width="23.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.4" y="798.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.03%)</title><rect x="40.7" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="43.7" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (43 samples, 0.38%)</title><rect x="41.0" y="771.0" width="4.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="44.0" y="782.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="41.7" y="755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.7" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.09%)</title><rect x="42.1" y="755.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="45.1" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (11 samples, 0.10%)</title><rect x="43.7" y="755.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="46.7" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.10%)</title><rect x="43.7" y="739.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="46.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (11 samples, 0.10%)</title><rect x="43.7" y="723.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="46.7" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.09%)</title><rect x="43.8" y="707.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="46.8" y="718.0"></text>
</g>
<g>
<title>do_futex (9 samples, 0.08%)</title><rect x="43.8" y="691.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="46.8" y="702.0"></text>
</g>
<g>
<title>futex_wake (9 samples, 0.08%)</title><rect x="43.8" y="675.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="46.8" y="686.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.03%)</title><rect x="45.0" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="48.0" y="766.0"></text>
</g>
<g>
<title>[unknown] (173 samples, 1.54%)</title><rect x="45.6" y="771.0" width="18.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="48.6" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (165 samples, 1.47%)</title><rect x="45.8" y="755.0" width="17.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="48.8" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (158 samples, 1.41%)</title><rect x="46.5" y="739.0" width="16.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="49.5" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (157 samples, 1.40%)</title><rect x="46.6" y="723.0" width="16.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.6" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (152 samples, 1.36%)</title><rect x="47.1" y="707.0" width="16.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="50.1" y="718.0"></text>
</g>
<g>
<title>do_futex (150 samples, 1.34%)</title><rect x="47.4" y="691.0" width="15.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="50.4" y="702.0"></text>
</g>
<g>
<title>futex_wait (148 samples, 1.32%)</title><rect x="47.5" y="675.0" width="15.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="50.5" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (132 samples, 1.18%)</title><rect x="48.1" y="659.0" width="13.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="51.1" y="670.0"></text>
</g>
<g>
<title>schedule (132 samples, 1.18%)</title><rect x="48.1" y="643.0" width="13.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="51.1" y="654.0"></text>
</g>
<g>
<title>__schedule (131 samples, 1.17%)</title><rect x="48.2" y="627.0" width="13.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="51.2" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (123 samples, 1.10%)</title><rect x="49.0" y="611.0" width="13.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.0" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (8 samples, 0.07%)</title><rect x="62.0" y="659.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="65.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.04%)</title><rect x="63.9" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="66.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.04%)</title><rect x="63.9" y="803.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (3 samples, 0.03%)</title><rect x="64.0" y="787.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="67.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.03%)</title><rect x="64.0" y="771.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.03%)</title><rect x="64.0" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="67.0" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.03%)</title><rect x="64.0" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (203 samples, 1.81%)</title><rect x="64.3" y="819.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.3" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (203 samples, 1.81%)</title><rect x="64.3" y="803.0" width="21.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.3" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (203 samples, 1.81%)</title><rect x="64.3" y="787.0" width="21.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.3" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (203 samples, 1.81%)</title><rect x="64.3" y="771.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.3" y="782.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (197 samples, 1.76%)</title><rect x="64.9" y="755.0" width="20.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.10%)</title><rect x="64.9" y="739.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="67.9" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.03%)</title><rect x="65.2" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="68.2" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.04%)</title><rect x="65.6" y="723.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="68.6" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (185 samples, 1.65%)</title><rect x="66.1" y="739.0" width="19.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="69.1" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (185 samples, 1.65%)</title><rect x="66.1" y="723.0" width="19.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="69.1" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (185 samples, 1.65%)</title><rect x="66.1" y="707.0" width="19.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="69.1" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (184 samples, 1.64%)</title><rect x="66.2" y="691.0" width="19.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="69.2" y="702.0"></text>
</g>
<g>
<title>do_futex (184 samples, 1.64%)</title><rect x="66.2" y="675.0" width="19.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="69.2" y="686.0"></text>
</g>
<g>
<title>futex_wake (183 samples, 1.63%)</title><rect x="66.2" y="659.0" width="19.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="69.2" y="670.0"></text>
</g>
<g>
<title>wake_up_q (174 samples, 1.55%)</title><rect x="67.1" y="643.0" width="18.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="70.1" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (174 samples, 1.55%)</title><rect x="67.1" y="627.0" width="18.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="70.1" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (174 samples, 1.55%)</title><rect x="67.1" y="611.0" width="18.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="70.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$70/1453628131.run (13 samples, 0.12%)</title><rect x="85.8" y="835.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.8" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$77/2003223169.run (6 samples, 0.05%)</title><rect x="87.1" y="835.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.1" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$70/1453628131.run (2,915 samples, 25.99%)</title><rect x="87.8" y="851.0" width="306.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="90.8" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyn..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$2 (2,915 samples, 25.99%)</title><rect x="87.8" y="835.0" width="306.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.8" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyn..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,240 samples, 11.06%)</title><rect x="88.0" y="819.0" width="130.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.0" y="830.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,196 samples, 10.67%)</title><rect x="88.8" y="803.0" width="125.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.8" y="814.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (18 samples, 0.16%)</title><rect x="88.9" y="787.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.9" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (12 samples, 0.11%)</title><rect x="89.4" y="771.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (12 samples, 0.11%)</title><rect x="89.4" y="755.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (12 samples, 0.11%)</title><rect x="89.4" y="739.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.4" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.07%)</title><rect x="89.9" y="723.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.9" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (8 samples, 0.07%)</title><rect x="89.9" y="707.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="92.9" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (8 samples, 0.07%)</title><rect x="89.9" y="691.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="92.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,176 samples, 10.49%)</title><rect x="90.8" y="787.0" width="123.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="93.8" y="798.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,176 samples, 10.49%)</title><rect x="90.8" y="771.0" width="123.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.8" y="782.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,170 samples, 10.43%)</title><rect x="91.4" y="755.0" width="123.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.4" y="766.0">one/nio/net/Ses..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,166 samples, 10.40%)</title><rect x="91.8" y="739.0" width="122.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="94.8" y="750.0">one/nio/net/Nat..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (16 samples, 0.14%)</title><rect x="92.5" y="723.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="95.5" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (10 samples, 0.09%)</title><rect x="93.1" y="707.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="96.1" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.04%)</title><rect x="93.5" y="691.0" width="0.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="96.5" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="93.7" y="675.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="96.7" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="93.7" y="659.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="96.7" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="93.7" y="643.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="96.7" y="654.0"></text>
</g>
<g>
<title>send (1,137 samples, 10.14%)</title><rect x="94.4" y="723.0" width="119.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="97.4" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,128 samples, 10.06%)</title><rect x="95.1" y="707.0" width="118.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="98.1" y="718.0">entry_SYSCALL_..</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.04%)</title><rect x="95.1" y="691.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="98.1" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1,124 samples, 10.02%)</title><rect x="95.5" y="691.0" width="118.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="98.5" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,105 samples, 9.85%)</title><rect x="96.6" y="675.0" width="116.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="99.6" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,105 samples, 9.85%)</title><rect x="96.6" y="659.0" width="116.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="99.6" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (1,075 samples, 9.59%)</title><rect x="98.0" y="643.0" width="113.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="101.0" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.09%)</title><rect x="98.5" y="627.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="101.5" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,051 samples, 9.37%)</title><rect x="99.5" y="627.0" width="110.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="102.5" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,049 samples, 9.35%)</title><rect x="99.8" y="611.0" width="110.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="102.8" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_push (5 samples, 0.04%)</title><rect x="100.9" y="595.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="103.9" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.04%)</title><rect x="101.4" y="595.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="104.4" y="606.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.03%)</title><rect x="101.9" y="595.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="104.9" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,024 samples, 9.13%)</title><rect x="102.2" y="595.0" width="107.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="105.2" y="606.0">tcp_sendmsg_l..</text>
</g>
<g>
<title>__check_object_size (5 samples, 0.04%)</title><rect x="103.2" y="579.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="106.2" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.03%)</title><rect x="103.4" y="563.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="106.4" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (16 samples, 0.14%)</title><rect x="103.9" y="579.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="106.9" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (12 samples, 0.11%)</title><rect x="104.0" y="563.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="107.0" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.03%)</title><rect x="105.2" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="108.2" y="574.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (3 samples, 0.03%)</title><rect x="105.5" y="579.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="108.5" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (8 samples, 0.07%)</title><rect x="105.9" y="579.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="108.9" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (8 samples, 0.07%)</title><rect x="105.9" y="563.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="108.9" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (56 samples, 0.50%)</title><rect x="106.7" y="579.0" width="5.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="109.7" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (52 samples, 0.46%)</title><rect x="106.9" y="563.0" width="5.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="109.9" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (23 samples, 0.21%)</title><rect x="107.3" y="547.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="110.3" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (8 samples, 0.07%)</title><rect x="107.4" y="531.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="110.4" y="542.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.03%)</title><rect x="108.4" y="531.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.4" y="542.0"></text>
</g>
<g>
<title>memset (10 samples, 0.09%)</title><rect x="108.7" y="531.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.7" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (9 samples, 0.08%)</title><rect x="109.8" y="547.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="112.8" y="558.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.04%)</title><rect x="110.7" y="547.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="113.7" y="558.0"></text>
</g>
<g>
<title>__ksize (4 samples, 0.04%)</title><rect x="110.7" y="531.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="113.7" y="542.0"></text>
</g>
<g>
<title>memset (11 samples, 0.10%)</title><rect x="111.2" y="547.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="114.2" y="558.0"></text>
</g>
<g>
<title>tcp_push (910 samples, 8.11%)</title><rect x="112.8" y="579.0" width="95.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="115.8" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (910 samples, 8.11%)</title><rect x="112.8" y="563.0" width="95.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="115.8" y="574.0">__tcp_push_..</text>
</g>
<g>
<title>tcp_write_xmit (908 samples, 8.10%)</title><rect x="113.0" y="547.0" width="95.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="116.0" y="558.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_transmit_skb (857 samples, 7.64%)</title><rect x="114.3" y="531.0" width="90.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="117.3" y="542.0">__tcp_tran..</text>
</g>
<g>
<title>ip_queue_xmit (837 samples, 7.46%)</title><rect x="115.9" y="515.0" width="88.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="118.9" y="526.0">ip_queue_x..</text>
</g>
<g>
<title>__ip_queue_xmit (834 samples, 7.44%)</title><rect x="115.9" y="499.0" width="87.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="118.9" y="510.0">__ip_queue..</text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.04%)</title><rect x="116.2" y="483.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="119.2" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (5 samples, 0.04%)</title><rect x="116.2" y="467.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="119.2" y="478.0"></text>
</g>
<g>
<title>ip_local_out (824 samples, 7.35%)</title><rect x="116.7" y="483.0" width="86.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="119.7" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (3 samples, 0.03%)</title><rect x="116.7" y="467.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="119.7" y="478.0"></text>
</g>
<g>
<title>ip_output (821 samples, 7.32%)</title><rect x="117.0" y="467.0" width="86.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="120.0" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (818 samples, 7.29%)</title><rect x="117.3" y="451.0" width="86.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="120.3" y="462.0">ip_finish_..</text>
</g>
<g>
<title>__ip_finish_output (815 samples, 7.27%)</title><rect x="117.5" y="435.0" width="85.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="120.5" y="446.0">__ip_finis..</text>
</g>
<g>
<title>ip_finish_output2 (810 samples, 7.22%)</title><rect x="118.1" y="419.0" width="85.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="121.1" y="430.0">ip_finish_..</text>
</g>
<g>
<title>__local_bh_enable_ip (757 samples, 6.75%)</title><rect x="119.1" y="403.0" width="79.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="122.1" y="414.0">__local_b..</text>
</g>
<g>
<title>do_softirq.part.0 (754 samples, 6.72%)</title><rect x="119.4" y="387.0" width="79.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="122.4" y="398.0">do_softir..</text>
</g>
<g>
<title>do_softirq_own_stack (751 samples, 6.70%)</title><rect x="119.8" y="371.0" width="79.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="122.8" y="382.0">do_softir..</text>
</g>
<g>
<title>__softirqentry_text_start (750 samples, 6.69%)</title><rect x="119.8" y="355.0" width="78.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="122.8" y="366.0">__softirq..</text>
</g>
<g>
<title>net_rx_action (733 samples, 6.54%)</title><rect x="121.4" y="339.0" width="77.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="124.4" y="350.0">net_rx_ac..</text>
</g>
<g>
<title>process_backlog (728 samples, 6.49%)</title><rect x="122.0" y="323.0" width="76.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="125.0" y="334.0">process_..</text>
</g>
<g>
<title>__netif_receive_skb (720 samples, 6.42%)</title><rect x="122.8" y="307.0" width="75.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="125.8" y="318.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (717 samples, 6.39%)</title><rect x="123.0" y="291.0" width="75.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="126.0" y="302.0">__netif_..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.05%)</title><rect x="123.2" y="275.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="126.2" y="286.0"></text>
</g>
<g>
<title>ip_rcv (709 samples, 6.32%)</title><rect x="123.9" y="275.0" width="74.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="126.9" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (701 samples, 6.25%)</title><rect x="124.6" y="259.0" width="73.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="127.6" y="270.0">ip_rcv_f..</text>
</g>
<g>
<title>ip_local_deliver (698 samples, 6.22%)</title><rect x="124.8" y="243.0" width="73.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="127.8" y="254.0">ip_local..</text>
</g>
<g>
<title>ip_local_deliver_finish (695 samples, 6.20%)</title><rect x="125.1" y="227.0" width="73.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="128.1" y="238.0">ip_local..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (693 samples, 6.18%)</title><rect x="125.3" y="211.0" width="72.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="128.3" y="222.0">ip_proto..</text>
</g>
<g>
<title>tcp_v4_rcv (688 samples, 6.14%)</title><rect x="125.9" y="195.0" width="72.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="128.9" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (29 samples, 0.26%)</title><rect x="127.6" y="179.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="130.6" y="190.0"></text>
</g>
<g>
<title>inet_ehashfn (4 samples, 0.04%)</title><rect x="130.3" y="163.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="133.3" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (12 samples, 0.11%)</title><rect x="130.8" y="179.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="133.8" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (8 samples, 0.07%)</title><rect x="130.9" y="163.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="133.9" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="131.7" y="163.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="134.7" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (628 samples, 5.60%)</title><rect x="132.1" y="179.0" width="66.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="135.1" y="190.0">tcp_v4_..</text>
</g>
<g>
<title>tcp_check_space (9 samples, 0.08%)</title><rect x="132.3" y="163.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="135.3" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (616 samples, 5.49%)</title><rect x="133.3" y="163.0" width="64.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="136.3" y="174.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (9 samples, 0.08%)</title><rect x="134.3" y="147.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="137.3" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (8 samples, 0.07%)</title><rect x="134.4" y="131.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="137.4" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.05%)</title><rect x="134.6" y="115.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="137.6" y="126.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.05%)</title><rect x="134.6" y="99.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="137.6" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.04%)</title><rect x="134.7" y="83.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="137.7" y="94.0"></text>
</g>
<g>
<title>sock_def_readable (4 samples, 0.04%)</title><rect x="135.3" y="147.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="138.3" y="158.0"></text>
</g>
<g>
<title>tcp_ack (102 samples, 0.91%)</title><rect x="135.7" y="147.0" width="10.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="138.7" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (67 samples, 0.60%)</title><rect x="137.8" y="131.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="140.8" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (44 samples, 0.39%)</title><rect x="139.2" y="115.0" width="4.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="142.2" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (8 samples, 0.07%)</title><rect x="139.2" y="99.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="142.2" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (8 samples, 0.07%)</title><rect x="139.2" y="83.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="142.2" y="94.0"></text>
</g>
<g>
<title>skb_release_all (36 samples, 0.32%)</title><rect x="140.1" y="99.0" width="3.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="143.1" y="110.0"></text>
</g>
<g>
<title>skb_release_data (35 samples, 0.31%)</title><rect x="140.1" y="83.0" width="3.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="143.1" y="94.0"></text>
</g>
<g>
<title>skb_free_head (16 samples, 0.14%)</title><rect x="142.1" y="67.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="145.1" y="78.0"></text>
</g>
<g>
<title>kfree (15 samples, 0.13%)</title><rect x="142.2" y="51.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="145.2" y="62.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.06%)</title><rect x="143.0" y="35.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.0" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (5 samples, 0.04%)</title><rect x="143.8" y="115.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="146.8" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.04%)</title><rect x="144.5" y="115.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="147.5" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (6 samples, 0.05%)</title><rect x="144.9" y="131.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="147.9" y="142.0"></text>
</g>
<g>
<title>tcp_rate_gen (4 samples, 0.04%)</title><rect x="145.6" y="131.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="148.6" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.03%)</title><rect x="146.5" y="147.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="149.5" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (469 samples, 4.18%)</title><rect x="146.8" y="147.0" width="49.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="149.8" y="158.0">tcp_d..</text>
</g>
<g>
<title>sock_def_readable (468 samples, 4.17%)</title><rect x="146.9" y="131.0" width="49.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="149.9" y="142.0">sock_..</text>
</g>
<g>
<title>__wake_up_common_lock (3 samples, 0.03%)</title><rect x="146.9" y="115.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="149.9" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (465 samples, 4.15%)</title><rect x="147.2" y="115.0" width="48.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="150.2" y="126.0">__wa..</text>
</g>
<g>
<title>__wake_up_common_lock (465 samples, 4.15%)</title><rect x="147.2" y="99.0" width="48.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="150.2" y="110.0">__wa..</text>
</g>
<g>
<title>__lock_text_start (463 samples, 4.13%)</title><rect x="147.3" y="83.0" width="48.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="150.3" y="94.0">__lo..</text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.04%)</title><rect x="196.1" y="147.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="199.1" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (6 samples, 0.05%)</title><rect x="196.7" y="147.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="199.7" y="158.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.04%)</title><rect x="196.8" y="131.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="199.8" y="142.0"></text>
</g>
<g>
<title>dev_queue_xmit (42 samples, 0.37%)</title><rect x="198.8" y="403.0" width="4.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="201.8" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (42 samples, 0.37%)</title><rect x="198.8" y="387.0" width="4.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="201.8" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (27 samples, 0.24%)</title><rect x="199.6" y="371.0" width="2.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="202.6" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (22 samples, 0.20%)</title><rect x="199.9" y="355.0" width="2.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="202.9" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (7 samples, 0.06%)</title><rect x="200.4" y="339.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="203.4" y="350.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.06%)</title><rect x="201.1" y="339.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="204.1" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.05%)</title><rect x="201.2" y="323.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="204.2" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (6 samples, 0.05%)</title><rect x="201.2" y="307.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="204.2" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.03%)</title><rect x="202.5" y="371.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="205.5" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.04%)</title><rect x="202.8" y="371.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="205.8" y="382.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.03%)</title><rect x="203.9" y="515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="206.9" y="526.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="203.9" y="499.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="206.9" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.04%)</title><rect x="204.5" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="207.5" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (4 samples, 0.04%)</title><rect x="204.9" y="531.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="207.9" y="542.0"></text>
</g>
<g>
<title>read_tsc (5 samples, 0.04%)</title><rect x="205.7" y="531.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="208.7" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (11 samples, 0.10%)</title><rect x="206.5" y="531.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="209.5" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (7 samples, 0.06%)</title><rect x="206.9" y="515.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="209.9" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (7 samples, 0.06%)</title><rect x="206.9" y="499.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="209.9" y="510.0"></text>
</g>
<g>
<title>mod_timer (7 samples, 0.06%)</title><rect x="206.9" y="483.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="209.9" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.05%)</title><rect x="207.0" y="467.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="210.0" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.04%)</title><rect x="207.7" y="531.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="210.7" y="542.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.03%)</title><rect x="208.6" y="579.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="211.6" y="590.0"></text>
</g>
<g>
<title>tcp_send_mss (10 samples, 0.09%)</title><rect x="208.9" y="579.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="211.9" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (9 samples, 0.08%)</title><rect x="209.0" y="563.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="212.0" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (6 samples, 0.05%)</title><rect x="209.3" y="547.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="212.3" y="558.0"></text>
</g>
<g>
<title>security_socket_sendmsg (9 samples, 0.08%)</title><rect x="210.1" y="627.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="213.1" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (9 samples, 0.08%)</title><rect x="210.1" y="611.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="213.1" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (9 samples, 0.08%)</title><rect x="210.1" y="595.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="213.1" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (6 samples, 0.05%)</title><rect x="210.5" y="579.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="213.5" y="590.0"></text>
</g>
<g>
<title>sockfd_lookup_light (17 samples, 0.15%)</title><rect x="211.1" y="643.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="214.1" y="654.0"></text>
</g>
<g>
<title>__fdget (13 samples, 0.12%)</title><rect x="211.1" y="627.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="214.1" y="638.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.11%)</title><rect x="211.2" y="611.0" width="1.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="214.2" y="622.0"></text>
</g>
<g>
<title>__fget (12 samples, 0.11%)</title><rect x="211.2" y="595.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="214.2" y="606.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.04%)</title><rect x="212.5" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="215.5" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (9 samples, 0.08%)</title><rect x="212.9" y="675.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="215.9" y="686.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.08%)</title><rect x="212.9" y="659.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="215.9" y="670.0"></text>
</g>
<g>
<title>__schedule (9 samples, 0.08%)</title><rect x="212.9" y="643.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="215.9" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 0.06%)</title><rect x="213.1" y="627.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="216.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.04%)</title><rect x="214.0" y="723.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="217.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="214.0" y="707.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="217.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="214.0" y="691.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="217.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (28 samples, 0.25%)</title><rect x="214.7" y="803.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (27 samples, 0.24%)</title><rect x="214.8" y="787.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (27 samples, 0.24%)</title><rect x="214.8" y="771.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.8" y="782.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="215.8" y="755.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="218.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.04%)</title><rect x="216.6" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="219.6" y="766.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="216.7" y="739.0" width="0.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="219.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="216.7" y="723.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="219.7" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.04%)</title><rect x="217.1" y="755.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="220.1" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.04%)</title><rect x="217.1" y="739.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="220.1" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.04%)</title><rect x="217.1" y="723.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="220.1" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.07%)</title><rect x="217.6" y="803.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="220.6" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (8 samples, 0.07%)</title><rect x="217.6" y="787.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="220.6" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (8 samples, 0.07%)</title><rect x="217.6" y="771.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="220.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (1,668 samples, 14.87%)</title><rect x="218.6" y="819.0" width="175.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="221.6" y="830.0">ru/mail/polis/service/k..</text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.04%)</title><rect x="218.6" y="803.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="221.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.04%)</title><rect x="218.6" y="787.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="221.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,663 samples, 14.83%)</title><rect x="219.1" y="803.0" width="175.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.1" y="814.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,663 samples, 14.83%)</title><rect x="219.1" y="787.0" width="175.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.1" y="798.0">one/nio/http/HttpClien..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (241 samples, 2.15%)</title><rect x="220.7" y="771.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.7" y="782.0">o..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (19 samples, 0.17%)</title><rect x="222.7" y="755.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="225.7" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (17 samples, 0.15%)</title><rect x="222.9" y="739.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="225.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (13 samples, 0.12%)</title><rect x="223.3" y="723.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="226.3" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (12 samples, 0.11%)</title><rect x="223.4" y="707.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="226.4" y="718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="223.4" y="691.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="226.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (7 samples, 0.06%)</title><rect x="223.8" y="691.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="226.8" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="224.0" y="675.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="227.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (202 samples, 1.80%)</title><rect x="224.8" y="755.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.8" y="766.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (29 samples, 0.26%)</title><rect x="225.8" y="739.0" width="3.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="228.8" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (6 samples, 0.05%)</title><rect x="226.7" y="723.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="229.7" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.03%)</title><rect x="227.4" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="230.4" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 0.10%)</title><rect x="227.7" y="723.0" width="1.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="230.7" y="734.0"></text>
</g>
<g>
<title>__recv (160 samples, 1.43%)</title><rect x="228.9" y="739.0" width="16.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="231.9" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (153 samples, 1.36%)</title><rect x="229.6" y="723.0" width="16.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="232.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (153 samples, 1.36%)</title><rect x="229.6" y="707.0" width="16.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="232.6" y="718.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (151 samples, 1.35%)</title><rect x="229.8" y="691.0" width="15.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="232.8" y="702.0"></text>
</g>
<g>
<title>__sys_recvfrom (150 samples, 1.34%)</title><rect x="229.8" y="675.0" width="15.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="232.8" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (141 samples, 1.26%)</title><rect x="230.4" y="659.0" width="14.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="233.4" y="670.0"></text>
</g>
<g>
<title>inet6_recvmsg (137 samples, 1.22%)</title><rect x="230.4" y="643.0" width="14.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="233.4" y="654.0"></text>
</g>
<g>
<title>tcp_recvmsg (137 samples, 1.22%)</title><rect x="230.4" y="627.0" width="14.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="233.4" y="638.0"></text>
</g>
<g>
<title>sk_wait_data (113 samples, 1.01%)</title><rect x="231.0" y="611.0" width="11.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="234.0" y="622.0"></text>
</g>
<g>
<title>wait_woken (108 samples, 0.96%)</title><rect x="231.5" y="595.0" width="11.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="234.5" y="606.0"></text>
</g>
<g>
<title>schedule_timeout (106 samples, 0.95%)</title><rect x="231.7" y="579.0" width="11.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="234.7" y="590.0"></text>
</g>
<g>
<title>__mod_timer (17 samples, 0.15%)</title><rect x="231.7" y="563.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="234.7" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (15 samples, 0.13%)</title><rect x="231.8" y="547.0" width="1.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="234.8" y="558.0"></text>
</g>
<g>
<title>schedule (89 samples, 0.79%)</title><rect x="233.5" y="563.0" width="9.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="236.5" y="574.0"></text>
</g>
<g>
<title>__schedule (88 samples, 0.78%)</title><rect x="233.6" y="547.0" width="9.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="236.6" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (82 samples, 0.73%)</title><rect x="234.2" y="531.0" width="8.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="237.2" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (7 samples, 0.06%)</title><rect x="242.9" y="611.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="245.9" y="622.0"></text>
</g>
<g>
<title>__skb_datagram_iter (7 samples, 0.06%)</title><rect x="242.9" y="595.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="245.9" y="606.0"></text>
</g>
<g>
<title>simple_copy_to_iter (3 samples, 0.03%)</title><rect x="243.3" y="579.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.3" y="590.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (12 samples, 0.11%)</title><rect x="243.6" y="611.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="246.6" y="622.0"></text>
</g>
<g>
<title>tcp_send_ack (12 samples, 0.11%)</title><rect x="243.6" y="595.0" width="1.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="246.6" y="606.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (12 samples, 0.11%)</title><rect x="243.6" y="579.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="246.6" y="590.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (11 samples, 0.10%)</title><rect x="243.7" y="563.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="246.7" y="574.0"></text>
</g>
<g>
<title>ip_queue_xmit (11 samples, 0.10%)</title><rect x="243.7" y="547.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="246.7" y="558.0"></text>
</g>
<g>
<title>__ip_queue_xmit (11 samples, 0.10%)</title><rect x="243.7" y="531.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="246.7" y="542.0"></text>
</g>
<g>
<title>ip_local_out (11 samples, 0.10%)</title><rect x="243.7" y="515.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="246.7" y="526.0"></text>
</g>
<g>
<title>ip_output (10 samples, 0.09%)</title><rect x="243.8" y="499.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="246.8" y="510.0"></text>
</g>
<g>
<title>ip_finish_output (10 samples, 0.09%)</title><rect x="243.8" y="483.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="246.8" y="494.0"></text>
</g>
<g>
<title>__ip_finish_output (10 samples, 0.09%)</title><rect x="243.8" y="467.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="246.8" y="478.0"></text>
</g>
<g>
<title>ip_finish_output2 (10 samples, 0.09%)</title><rect x="243.8" y="451.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="246.8" y="462.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (8 samples, 0.07%)</title><rect x="243.8" y="435.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="246.8" y="446.0"></text>
</g>
<g>
<title>do_softirq.part.0 (8 samples, 0.07%)</title><rect x="243.8" y="419.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="246.8" y="430.0"></text>
</g>
<g>
<title>do_softirq_own_stack (8 samples, 0.07%)</title><rect x="243.8" y="403.0" width="0.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="246.8" y="414.0"></text>
</g>
<g>
<title>__softirqentry_text_start (8 samples, 0.07%)</title><rect x="243.8" y="387.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="246.8" y="398.0"></text>
</g>
<g>
<title>net_rx_action (8 samples, 0.07%)</title><rect x="243.8" y="371.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="246.8" y="382.0"></text>
</g>
<g>
<title>process_backlog (8 samples, 0.07%)</title><rect x="243.8" y="355.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="246.8" y="366.0"></text>
</g>
<g>
<title>__netif_receive_skb (8 samples, 0.07%)</title><rect x="243.8" y="339.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="246.8" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (7 samples, 0.06%)</title><rect x="243.9" y="323.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="246.9" y="334.0"></text>
</g>
<g>
<title>ip_rcv (7 samples, 0.06%)</title><rect x="243.9" y="307.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="246.9" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (7 samples, 0.06%)</title><rect x="243.9" y="291.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="246.9" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver (7 samples, 0.06%)</title><rect x="243.9" y="275.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="246.9" y="286.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (6 samples, 0.05%)</title><rect x="244.0" y="259.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="247.0" y="270.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (6 samples, 0.05%)</title><rect x="244.0" y="243.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="247.0" y="254.0"></text>
</g>
<g>
<title>tcp_v4_rcv (6 samples, 0.05%)</title><rect x="244.0" y="227.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="247.0" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (6 samples, 0.05%)</title><rect x="244.0" y="211.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="247.0" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (5 samples, 0.04%)</title><rect x="244.1" y="195.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="247.1" y="206.0"></text>
</g>
<g>
<title>tcp_ack (3 samples, 0.03%)</title><rect x="244.2" y="179.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="247.2" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (3 samples, 0.03%)</title><rect x="244.2" y="163.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="247.2" y="174.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.03%)</title><rect x="244.2" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="247.2" y="158.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.03%)</title><rect x="244.2" y="131.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="247.2" y="142.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.03%)</title><rect x="244.2" y="115.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="247.2" y="126.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.04%)</title><rect x="244.9" y="643.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="247.9" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (4 samples, 0.04%)</title><rect x="244.9" y="627.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="247.9" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.03%)</title><rect x="245.0" y="611.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="248.0" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (3 samples, 0.03%)</title><rect x="245.0" y="595.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="248.0" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.03%)</title><rect x="245.3" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="248.3" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (42 samples, 0.37%)</title><rect x="246.0" y="771.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.03%)</title><rect x="246.2" y="755.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.03%)</title><rect x="246.2" y="739.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.05%)</title><rect x="246.5" y="755.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (3 samples, 0.03%)</title><rect x="246.8" y="739.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (9 samples, 0.08%)</title><rect x="247.2" y="755.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.06%)</title><rect x="247.3" y="739.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (6 samples, 0.05%)</title><rect x="247.4" y="723.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.05%)</title><rect x="248.1" y="755.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="251.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (14 samples, 0.12%)</title><rect x="248.9" y="755.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.04%)</title><rect x="249.6" y="739.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.6" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.04%)</title><rect x="249.6" y="723.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (49 samples, 0.44%)</title><rect x="250.4" y="771.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.4" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="253.1" y="755.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="256.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (20 samples, 0.18%)</title><rect x="253.4" y="755.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.4" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (20 samples, 0.18%)</title><rect x="253.4" y="739.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (20 samples, 0.18%)</title><rect x="253.4" y="723.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="256.4" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="254.8" y="707.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="257.8" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (8 samples, 0.07%)</title><rect x="255.6" y="771.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.04%)</title><rect x="255.9" y="755.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.04%)</title><rect x="255.9" y="739.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.9" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (129 samples, 1.15%)</title><rect x="256.6" y="771.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.6" y="782.0"></text>
</g>
<g>
<title>setsockopt (122 samples, 1.09%)</title><rect x="257.4" y="755.0" width="12.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="260.4" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (105 samples, 0.94%)</title><rect x="259.1" y="739.0" width="11.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="262.1" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (5 samples, 0.04%)</title><rect x="259.1" y="723.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="262.1" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (100 samples, 0.89%)</title><rect x="259.6" y="723.0" width="10.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="262.6" y="734.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (90 samples, 0.80%)</title><rect x="260.3" y="707.0" width="9.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="263.3" y="718.0"></text>
</g>
<g>
<title>__sys_setsockopt (89 samples, 0.79%)</title><rect x="260.4" y="691.0" width="9.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="263.4" y="702.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (7 samples, 0.06%)</title><rect x="261.1" y="675.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="264.1" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (18 samples, 0.16%)</title><rect x="262.0" y="675.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="265.0" y="686.0"></text>
</g>
<g>
<title>security_socket_setsockopt (18 samples, 0.16%)</title><rect x="264.2" y="675.0" width="1.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="267.2" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (17 samples, 0.15%)</title><rect x="264.3" y="659.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="267.3" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (17 samples, 0.15%)</title><rect x="264.3" y="643.0" width="1.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="267.3" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (14 samples, 0.12%)</title><rect x="264.6" y="627.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="267.6" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (4 samples, 0.04%)</title><rect x="265.7" y="611.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.7" y="622.0"></text>
</g>
<g>
<title>sock_setsockopt (22 samples, 0.20%)</title><rect x="266.2" y="675.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="269.2" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.04%)</title><rect x="266.4" y="659.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="269.4" y="670.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.03%)</title><rect x="267.0" y="659.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="270.0" y="670.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.04%)</title><rect x="267.3" y="659.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="270.3" y="670.0"></text>
</g>
<g>
<title>sock_set_timeout (7 samples, 0.06%)</title><rect x="267.7" y="659.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="270.7" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.11%)</title><rect x="268.5" y="675.0" width="1.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="271.5" y="686.0"></text>
</g>
<g>
<title>__fdget (11 samples, 0.10%)</title><rect x="268.5" y="659.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="271.5" y="670.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.09%)</title><rect x="268.6" y="643.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="271.6" y="654.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.09%)</title><rect x="268.6" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="271.6" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="269.8" y="707.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="272.8" y="718.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="269.8" y="691.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="272.8" y="702.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.03%)</title><rect x="269.8" y="675.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="272.8" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,128 samples, 10.06%)</title><rect x="270.2" y="771.0" width="118.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="782.0">one/nio/net/Na..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (13 samples, 0.12%)</title><rect x="271.3" y="755.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="274.3" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (8 samples, 0.07%)</title><rect x="271.8" y="739.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="274.8" y="750.0"></text>
</g>
<g>
<title>send (1,104 samples, 9.84%)</title><rect x="272.7" y="755.0" width="116.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="275.7" y="766.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,100 samples, 9.81%)</title><rect x="273.2" y="739.0" width="115.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="276.2" y="750.0">entry_SYSCALL_..</text>
</g>
<g>
<title>do_syscall_64 (1,099 samples, 9.80%)</title><rect x="273.3" y="723.0" width="115.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="276.3" y="734.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,059 samples, 9.44%)</title><rect x="273.9" y="707.0" width="111.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="276.9" y="718.0">__x64_sys_sen..</text>
</g>
<g>
<title>__sys_sendto (1,058 samples, 9.43%)</title><rect x="273.9" y="691.0" width="111.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="276.9" y="702.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (1,051 samples, 9.37%)</title><rect x="274.5" y="675.0" width="110.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="277.5" y="686.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.03%)</title><rect x="274.5" y="659.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="277.5" y="670.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,044 samples, 9.31%)</title><rect x="274.9" y="659.0" width="109.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="277.9" y="670.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,038 samples, 9.26%)</title><rect x="275.4" y="643.0" width="109.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="278.4" y="654.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_push (3 samples, 0.03%)</title><rect x="275.4" y="627.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="278.4" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,033 samples, 9.21%)</title><rect x="275.9" y="627.0" width="108.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="278.9" y="638.0">tcp_sendmsg_l..</text>
</g>
<g>
<title>__check_object_size (5 samples, 0.04%)</title><rect x="276.7" y="611.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="279.7" y="622.0"></text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.04%)</title><rect x="277.3" y="611.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="280.3" y="622.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.04%)</title><rect x="277.3" y="595.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="280.3" y="606.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.04%)</title><rect x="277.8" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="280.8" y="622.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.03%)</title><rect x="277.9" y="595.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="280.9" y="606.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (60 samples, 0.54%)</title><rect x="278.2" y="611.0" width="6.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="281.2" y="622.0"></text>
</g>
<g>
<title>__alloc_skb (54 samples, 0.48%)</title><rect x="278.5" y="595.0" width="5.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="281.5" y="606.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (29 samples, 0.26%)</title><rect x="278.9" y="579.0" width="3.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="281.9" y="590.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (8 samples, 0.07%)</title><rect x="278.9" y="563.0" width="0.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="281.9" y="574.0"></text>
</g>
<g>
<title>memset (18 samples, 0.16%)</title><rect x="279.9" y="563.0" width="1.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="282.9" y="574.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.05%)</title><rect x="281.9" y="579.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="284.9" y="590.0"></text>
</g>
<g>
<title>ksize (6 samples, 0.05%)</title><rect x="282.5" y="579.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="285.5" y="590.0"></text>
</g>
<g>
<title>__ksize (6 samples, 0.05%)</title><rect x="282.5" y="563.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="285.5" y="574.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="283.2" y="579.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="286.2" y="590.0"></text>
</g>
<g>
<title>memset (7 samples, 0.06%)</title><rect x="283.5" y="579.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="286.5" y="590.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.03%)</title><rect x="284.5" y="611.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="287.5" y="622.0"></text>
</g>
<g>
<title>tcp_push (933 samples, 8.32%)</title><rect x="285.1" y="611.0" width="98.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="288.1" y="622.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (932 samples, 8.31%)</title><rect x="285.1" y="595.0" width="98.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="288.1" y="606.0">__tcp_push_p..</text>
</g>
<g>
<title>tcp_write_xmit (928 samples, 8.28%)</title><rect x="285.5" y="579.0" width="97.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="288.5" y="590.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_transmit_skb (903 samples, 8.05%)</title><rect x="285.9" y="563.0" width="95.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="288.9" y="574.0">__tcp_trans..</text>
</g>
<g>
<title>ip_queue_xmit (883 samples, 7.87%)</title><rect x="287.3" y="547.0" width="92.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="290.3" y="558.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (882 samples, 7.87%)</title><rect x="287.3" y="531.0" width="92.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="290.3" y="542.0">__ip_queue_..</text>
</g>
<g>
<title>ip_local_out (877 samples, 7.82%)</title><rect x="287.6" y="515.0" width="92.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="290.6" y="526.0">ip_local_out</text>
</g>
<g>
<title>ip_output (875 samples, 7.80%)</title><rect x="287.7" y="499.0" width="92.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="290.7" y="510.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (871 samples, 7.77%)</title><rect x="288.1" y="483.0" width="91.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="291.1" y="494.0">ip_finish_o..</text>
</g>
<g>
<title>__ip_finish_output (866 samples, 7.72%)</title><rect x="288.4" y="467.0" width="91.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="291.4" y="478.0">__ip_finish..</text>
</g>
<g>
<title>ip_finish_output2 (865 samples, 7.71%)</title><rect x="288.5" y="451.0" width="91.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="291.5" y="462.0">ip_finish_o..</text>
</g>
<g>
<title>__local_bh_enable_ip (831 samples, 7.41%)</title><rect x="289.5" y="435.0" width="87.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="292.5" y="446.0">__local_bh..</text>
</g>
<g>
<title>do_softirq.part.0 (831 samples, 7.41%)</title><rect x="289.5" y="419.0" width="87.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.5" y="430.0">do_softirq..</text>
</g>
<g>
<title>do_softirq_own_stack (829 samples, 7.39%)</title><rect x="289.7" y="403.0" width="87.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="292.7" y="414.0">do_softirq..</text>
</g>
<g>
<title>__softirqentry_text_start (827 samples, 7.37%)</title><rect x="289.7" y="387.0" width="87.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="292.7" y="398.0">__softirqe..</text>
</g>
<g>
<title>net_rx_action (816 samples, 7.28%)</title><rect x="290.5" y="371.0" width="85.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="293.5" y="382.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (815 samples, 7.27%)</title><rect x="290.6" y="355.0" width="85.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="293.6" y="366.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb (807 samples, 7.20%)</title><rect x="291.5" y="339.0" width="84.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="294.5" y="350.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (806 samples, 7.19%)</title><rect x="291.6" y="323.0" width="84.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="294.6" y="334.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.08%)</title><rect x="291.9" y="307.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="294.9" y="318.0"></text>
</g>
<g>
<title>ip_rcv (794 samples, 7.08%)</title><rect x="292.8" y="307.0" width="83.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="295.8" y="318.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (791 samples, 7.05%)</title><rect x="293.0" y="291.0" width="83.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="296.0" y="302.0">ip_rcv_fi..</text>
</g>
<g>
<title>ip_local_deliver (790 samples, 7.04%)</title><rect x="293.0" y="275.0" width="83.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="296.0" y="286.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (789 samples, 7.04%)</title><rect x="293.1" y="259.0" width="83.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="296.1" y="270.0">ip_local_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (789 samples, 7.04%)</title><rect x="293.1" y="243.0" width="83.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="296.1" y="254.0">ip_protoc..</text>
</g>
<g>
<title>tcp_v4_rcv (783 samples, 6.98%)</title><rect x="293.7" y="227.0" width="82.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="296.7" y="238.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (21 samples, 0.19%)</title><rect x="295.2" y="211.0" width="2.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="298.2" y="222.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (8 samples, 0.07%)</title><rect x="297.5" y="211.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="300.5" y="222.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="297.7" y="195.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="300.7" y="206.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (3 samples, 0.03%)</title><rect x="298.0" y="195.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="301.0" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (739 samples, 6.59%)</title><rect x="298.3" y="211.0" width="77.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="301.3" y="222.0">tcp_v4_do..</text>
</g>
<g>
<title>tcp_check_space (9 samples, 0.08%)</title><rect x="298.4" y="195.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="301.4" y="206.0"></text>
</g>
<g>
<title>tcp_rcv_established (727 samples, 6.48%)</title><rect x="299.6" y="195.0" width="76.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="302.6" y="206.0">tcp_rcv_..</text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.04%)</title><rect x="300.7" y="179.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.7" y="190.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.04%)</title><rect x="300.8" y="163.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="303.8" y="174.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="300.8" y="147.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="303.8" y="158.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.04%)</title><rect x="300.8" y="131.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="303.8" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.03%)</title><rect x="301.4" y="179.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="304.4" y="190.0"></text>
</g>
<g>
<title>tcp_ack (56 samples, 0.50%)</title><rect x="301.7" y="179.0" width="5.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="304.7" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (39 samples, 0.35%)</title><rect x="302.9" y="163.0" width="4.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="305.9" y="174.0"></text>
</g>
<g>
<title>__kfree_skb (33 samples, 0.29%)</title><rect x="303.2" y="147.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="306.2" y="158.0"></text>
</g>
<g>
<title>kfree_skbmem (6 samples, 0.05%)</title><rect x="303.2" y="131.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="306.2" y="142.0"></text>
</g>
<g>
<title>kmem_cache_free (6 samples, 0.05%)</title><rect x="303.2" y="115.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="306.2" y="126.0"></text>
</g>
<g>
<title>skb_release_all (27 samples, 0.24%)</title><rect x="303.8" y="131.0" width="2.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="306.8" y="142.0"></text>
</g>
<g>
<title>skb_release_data (26 samples, 0.23%)</title><rect x="303.8" y="115.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="306.8" y="126.0"></text>
</g>
<g>
<title>skb_free_head (14 samples, 0.12%)</title><rect x="305.1" y="99.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="308.1" y="110.0"></text>
</g>
<g>
<title>kfree (14 samples, 0.12%)</title><rect x="305.1" y="83.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="308.1" y="94.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.03%)</title><rect x="306.2" y="67.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="309.2" y="78.0"></text>
</g>
<g>
<title>tcp_data_ready (639 samples, 5.70%)</title><rect x="307.6" y="179.0" width="67.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="310.6" y="190.0">tcp_dat..</text>
</g>
<g>
<title>sock_def_readable (637 samples, 5.68%)</title><rect x="307.8" y="163.0" width="67.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="310.8" y="174.0">sock_de..</text>
</g>
<g>
<title>__wake_up_sync_key (637 samples, 5.68%)</title><rect x="307.8" y="147.0" width="67.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="310.8" y="158.0">__wake_..</text>
</g>
<g>
<title>__wake_up_common_lock (637 samples, 5.68%)</title><rect x="307.8" y="131.0" width="67.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="310.8" y="142.0">__wake_..</text>
</g>
<g>
<title>__lock_text_start (635 samples, 5.66%)</title><rect x="307.8" y="115.0" width="66.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="310.8" y="126.0">__lock_..</text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.04%)</title><rect x="375.0" y="179.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="378.0" y="190.0"></text>
</g>
<g>
<title>process_backlog (3 samples, 0.03%)</title><rect x="376.4" y="371.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="379.4" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (25 samples, 0.22%)</title><rect x="376.9" y="435.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="379.9" y="446.0"></text>
</g>
<g>
<title>__dev_queue_xmit (25 samples, 0.22%)</title><rect x="376.9" y="419.0" width="2.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="379.9" y="430.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (11 samples, 0.10%)</title><rect x="377.8" y="403.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="380.8" y="414.0"></text>
</g>
<g>
<title>loopback_xmit (7 samples, 0.06%)</title><rect x="378.2" y="387.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="381.2" y="398.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.04%)</title><rect x="380.2" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="383.2" y="558.0"></text>
</g>
<g>
<title>ip_queue_xmit (4 samples, 0.04%)</title><rect x="381.1" y="563.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="384.1" y="574.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (6 samples, 0.05%)</title><rect x="381.9" y="563.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="384.9" y="574.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.04%)</title><rect x="382.1" y="547.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="385.1" y="558.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="382.1" y="531.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="385.1" y="542.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.03%)</title><rect x="382.2" y="515.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="385.2" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (12 samples, 0.11%)</title><rect x="383.3" y="611.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="386.3" y="622.0"></text>
</g>
<g>
<title>tcp_current_mss (11 samples, 0.10%)</title><rect x="383.4" y="595.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.4" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.04%)</title><rect x="384.7" y="659.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="387.7" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.04%)</title><rect x="384.7" y="643.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="387.7" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.04%)</title><rect x="384.7" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="387.7" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (33 samples, 0.29%)</title><rect x="385.3" y="707.0" width="3.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="388.3" y="718.0"></text>
</g>
<g>
<title>schedule (32 samples, 0.29%)</title><rect x="385.4" y="691.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="388.4" y="702.0"></text>
</g>
<g>
<title>__schedule (32 samples, 0.29%)</title><rect x="385.4" y="675.0" width="3.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="388.4" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (30 samples, 0.27%)</title><rect x="385.7" y="659.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="388.7" y="670.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (23 samples, 0.21%)</title><rect x="388.9" y="771.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.9" y="782.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (26 samples, 0.23%)</title><rect x="391.3" y="771.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.3" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (11 samples, 0.10%)</title><rect x="392.9" y="755.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="395.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (11 samples, 0.10%)</title><rect x="392.9" y="739.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="395.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (11 samples, 0.10%)</title><rect x="392.9" y="723.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="395.9" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.04%)</title><rect x="394.1" y="819.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="397.1" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="394.1" y="803.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="397.1" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="394.1" y="787.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="397.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$77/2003223169.run (5,204 samples, 46.41%)</title><rect x="394.5" y="851.0" width="547.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.5" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$77/2003223169...</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$put$4 (5,204 samples, 46.41%)</title><rect x="394.5" y="835.0" width="547.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.5" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$put$4</text>
</g>
<g>
<title>java/lang/String.getBytes (13 samples, 0.12%)</title><rect x="396.5" y="819.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (13 samples, 0.12%)</title><rect x="396.5" y="803.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="399.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (13 samples, 0.12%)</title><rect x="396.5" y="787.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="399.5" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.12%)</title><rect x="396.5" y="771.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="399.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="396.6" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="399.6" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="396.6" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="399.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="396.6" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="399.6" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="396.6" y="707.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="399.6" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="396.6" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="399.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9 samples, 0.08%)</title><rect x="396.9" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="399.9" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="397.9" y="819.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="400.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,622 samples, 14.46%)</title><rect x="398.5" y="819.0" width="170.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.5" y="830.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.03%)</title><rect x="399.7" y="803.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="402.7" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,562 samples, 13.93%)</title><rect x="400.0" y="803.0" width="164.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="403.0" y="814.0">one/nio/http/HttpSess..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (34 samples, 0.30%)</title><rect x="400.2" y="787.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.04%)</title><rect x="401.8" y="771.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.04%)</title><rect x="401.8" y="755.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="404.8" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.04%)</title><rect x="401.9" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="404.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="402.0" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="405.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.12%)</title><rect x="402.3" y="771.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.3" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (13 samples, 0.12%)</title><rect x="402.3" y="755.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="405.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (13 samples, 0.12%)</title><rect x="402.3" y="739.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.3" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="403.3" y="723.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="406.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,526 samples, 13.61%)</title><rect x="403.8" y="787.0" width="160.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="406.8" y="798.0">one/nio/net/Session...</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.04%)</title><rect x="403.8" y="771.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="406.8" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.04%)</title><rect x="403.8" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="406.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.04%)</title><rect x="403.8" y="739.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="406.8" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="403.8" y="723.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="406.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,522 samples, 13.57%)</title><rect x="404.2" y="771.0" width="160.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.2" y="782.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,514 samples, 13.50%)</title><rect x="405.0" y="755.0" width="159.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.0" y="766.0">one/nio/net/Session$..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,507 samples, 13.44%)</title><rect x="405.8" y="739.0" width="158.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="408.8" y="750.0">one/nio/net/NativeSo..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="406.8" y="723.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="409.8" y="734.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (54 samples, 0.48%)</title><rect x="407.4" y="723.0" width="5.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="410.4" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="409.5" y="707.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="412.5" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.04%)</title><rect x="410.0" y="707.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="413.0" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (20 samples, 0.18%)</title><rect x="410.7" y="707.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="413.7" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (6 samples, 0.05%)</title><rect x="411.3" y="691.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="414.3" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.05%)</title><rect x="412.0" y="691.0" width="0.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="415.0" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.04%)</title><rect x="413.1" y="723.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="416.1" y="734.0"></text>
</g>
<g>
<title>send (1,431 samples, 12.76%)</title><rect x="413.6" y="723.0" width="150.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="416.6" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1,423 samples, 12.69%)</title><rect x="414.3" y="707.0" width="149.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="417.3" y="718.0">entry_SYSCALL_64_af..</text>
</g>
<g>
<title>__x64_sys_sendto (6 samples, 0.05%)</title><rect x="414.3" y="691.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="417.3" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1,417 samples, 12.64%)</title><rect x="414.9" y="691.0" width="149.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="417.9" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (1,396 samples, 12.45%)</title><rect x="416.2" y="675.0" width="146.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="419.2" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (1,394 samples, 12.43%)</title><rect x="416.2" y="659.0" width="146.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="419.2" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (1,342 samples, 11.97%)</title><rect x="417.7" y="643.0" width="141.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="420.7" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (8 samples, 0.07%)</title><rect x="418.1" y="627.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="421.1" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (1,309 samples, 11.67%)</title><rect x="418.9" y="627.0" width="137.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="421.9" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (1,305 samples, 11.64%)</title><rect x="419.3" y="611.0" width="137.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="422.3" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.04%)</title><rect x="419.7" y="595.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="422.7" y="606.0"></text>
</g>
<g>
<title>tcp_push (4 samples, 0.04%)</title><rect x="420.9" y="595.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="423.9" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (5 samples, 0.04%)</title><rect x="421.3" y="595.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="424.3" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1,277 samples, 11.39%)</title><rect x="421.9" y="595.0" width="134.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="424.9" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (8 samples, 0.07%)</title><rect x="423.4" y="579.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="426.4" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (8 samples, 0.07%)</title><rect x="423.4" y="563.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="426.4" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (18 samples, 0.16%)</title><rect x="424.3" y="579.0" width="1.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="427.3" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (13 samples, 0.12%)</title><rect x="424.3" y="563.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="427.3" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (4 samples, 0.04%)</title><rect x="425.7" y="563.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="428.7" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (14 samples, 0.12%)</title><rect x="426.3" y="579.0" width="1.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="429.3" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (14 samples, 0.12%)</title><rect x="426.3" y="563.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="429.3" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (83 samples, 0.74%)</title><rect x="427.7" y="579.0" width="8.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="430.7" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (81 samples, 0.72%)</title><rect x="428.0" y="563.0" width="8.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="431.0" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (33 samples, 0.29%)</title><rect x="428.4" y="547.0" width="3.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="431.4" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (17 samples, 0.15%)</title><rect x="428.4" y="531.0" width="1.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="431.4" y="542.0"></text>
</g>
<g>
<title>memset (15 samples, 0.13%)</title><rect x="430.3" y="531.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="433.3" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (17 samples, 0.15%)</title><rect x="432.0" y="547.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="435.0" y="558.0"></text>
</g>
<g>
<title>ksize (11 samples, 0.10%)</title><rect x="433.7" y="547.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="436.7" y="558.0"></text>
</g>
<g>
<title>__ksize (11 samples, 0.10%)</title><rect x="433.7" y="531.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="436.7" y="542.0"></text>
</g>
<g>
<title>memset (14 samples, 0.12%)</title><rect x="435.0" y="547.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="438.0" y="558.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.03%)</title><rect x="436.6" y="579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="439.6" y="590.0"></text>
</g>
<g>
<title>tcp_push (1,116 samples, 9.95%)</title><rect x="436.9" y="579.0" width="117.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="439.9" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (1,115 samples, 9.94%)</title><rect x="436.9" y="563.0" width="117.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="439.9" y="574.0">__tcp_push_pen..</text>
</g>
<g>
<title>ktime_get (4 samples, 0.04%)</title><rect x="437.2" y="547.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="440.2" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (1,104 samples, 9.84%)</title><rect x="438.1" y="547.0" width="116.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="441.1" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.03%)</title><rect x="438.8" y="531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="441.8" y="542.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1,065 samples, 9.50%)</title><rect x="439.1" y="531.0" width="112.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="442.1" y="542.0">__tcp_transmit..</text>
</g>
<g>
<title>__skb_clone (3 samples, 0.03%)</title><rect x="440.5" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="443.5" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1,035 samples, 9.23%)</title><rect x="440.9" y="515.0" width="108.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="443.9" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (1,033 samples, 9.21%)</title><rect x="441.0" y="499.0" width="108.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="444.0" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (9 samples, 0.08%)</title><rect x="441.4" y="483.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="444.4" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (7 samples, 0.06%)</title><rect x="441.6" y="467.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="444.6" y="478.0"></text>
</g>
<g>
<title>ip_local_out (1,016 samples, 9.06%)</title><rect x="442.4" y="483.0" width="106.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="445.4" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (1,014 samples, 9.04%)</title><rect x="442.5" y="467.0" width="106.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="445.5" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (1,007 samples, 8.98%)</title><rect x="443.2" y="451.0" width="106.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="446.2" y="462.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (6 samples, 0.05%)</title><rect x="443.2" y="435.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="446.2" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (1,000 samples, 8.92%)</title><rect x="443.8" y="435.0" width="105.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="446.8" y="446.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (996 samples, 8.88%)</title><rect x="444.3" y="419.0" width="104.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="447.3" y="430.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (906 samples, 8.08%)</title><rect x="447.1" y="403.0" width="95.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="450.1" y="414.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (902 samples, 8.04%)</title><rect x="447.5" y="387.0" width="94.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="450.5" y="398.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (897 samples, 8.00%)</title><rect x="448.1" y="371.0" width="94.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="451.1" y="382.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (894 samples, 7.97%)</title><rect x="448.1" y="355.0" width="94.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="451.1" y="366.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (875 samples, 7.80%)</title><rect x="449.8" y="339.0" width="92.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="452.8" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (870 samples, 7.76%)</title><rect x="450.4" y="323.0" width="91.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="453.4" y="334.0">process_bac..</text>
</g>
<g>
<title>__netif_receive_skb (861 samples, 7.68%)</title><rect x="451.3" y="307.0" width="90.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="454.3" y="318.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (860 samples, 7.67%)</title><rect x="451.4" y="291.0" width="90.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="454.4" y="302.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (8 samples, 0.07%)</title><rect x="452.2" y="275.0" width="0.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="455.2" y="286.0"></text>
</g>
<g>
<title>ip_rcv (845 samples, 7.54%)</title><rect x="453.0" y="275.0" width="88.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="456.0" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_core.isra.0 (6 samples, 0.05%)</title><rect x="453.3" y="259.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="456.3" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (835 samples, 7.45%)</title><rect x="453.9" y="259.0" width="87.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="456.9" y="270.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (834 samples, 7.44%)</title><rect x="453.9" y="243.0" width="87.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="456.9" y="254.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (832 samples, 7.42%)</title><rect x="454.2" y="227.0" width="87.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="457.2" y="238.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (831 samples, 7.41%)</title><rect x="454.3" y="211.0" width="87.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="457.3" y="222.0">ip_protoco..</text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.03%)</title><rect x="455.1" y="195.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="458.1" y="206.0"></text>
</g>
<g>
<title>sock_put (3 samples, 0.03%)</title><rect x="455.4" y="195.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="458.4" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (816 samples, 7.28%)</title><rect x="455.8" y="195.0" width="85.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="458.8" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (19 samples, 0.17%)</title><rect x="456.9" y="179.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="459.9" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (10 samples, 0.09%)</title><rect x="459.0" y="179.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="462.0" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.04%)</title><rect x="459.1" y="163.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="462.1" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.03%)</title><rect x="459.5" y="163.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="462.5" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (774 samples, 6.90%)</title><rect x="460.2" y="179.0" width="81.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="463.2" y="190.0">tcp_v4_do..</text>
</g>
<g>
<title>tcp_check_space (18 samples, 0.16%)</title><rect x="460.4" y="163.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="463.4" y="174.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.03%)</title><rect x="462.3" y="163.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="465.3" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (751 samples, 6.70%)</title><rect x="462.6" y="163.0" width="79.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="465.6" y="174.0">tcp_rcv_e..</text>
</g>
<g>
<title>__tcp_ack_snd_check (5 samples, 0.04%)</title><rect x="463.8" y="147.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="466.8" y="158.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.04%)</title><rect x="463.9" y="131.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="466.9" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.04%)</title><rect x="463.9" y="115.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="466.9" y="126.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.04%)</title><rect x="463.9" y="99.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="466.9" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.04%)</title><rect x="463.9" y="83.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="466.9" y="94.0"></text>
</g>
<g>
<title>tcp_ack (120 samples, 1.07%)</title><rect x="464.6" y="147.0" width="12.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="467.6" y="158.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (3 samples, 0.03%)</title><rect x="466.3" y="131.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="469.3" y="142.0"></text>
</g>
<g>
<title>rb_first (4 samples, 0.04%)</title><rect x="466.8" y="131.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="469.8" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (80 samples, 0.71%)</title><rect x="467.2" y="131.0" width="8.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="470.2" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (56 samples, 0.50%)</title><rect x="468.8" y="115.0" width="5.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.8" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.04%)</title><rect x="468.8" y="99.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="471.8" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.04%)</title><rect x="468.9" y="83.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="471.9" y="94.0"></text>
</g>
<g>
<title>skb_release_all (50 samples, 0.45%)</title><rect x="469.3" y="99.0" width="5.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="472.3" y="110.0"></text>
</g>
<g>
<title>skb_release_data (50 samples, 0.45%)</title><rect x="469.3" y="83.0" width="5.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="472.3" y="94.0"></text>
</g>
<g>
<title>skb_free_head (25 samples, 0.22%)</title><rect x="471.9" y="67.0" width="2.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="474.9" y="78.0"></text>
</g>
<g>
<title>kfree (23 samples, 0.21%)</title><rect x="472.2" y="51.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="475.2" y="62.0"></text>
</g>
<g>
<title>__slab_free (7 samples, 0.06%)</title><rect x="473.8" y="35.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="476.8" y="46.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (7 samples, 0.06%)</title><rect x="474.9" y="115.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="477.9" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (5 samples, 0.04%)</title><rect x="475.6" y="131.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="478.6" y="142.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.03%)</title><rect x="476.5" y="131.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="479.5" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (4 samples, 0.04%)</title><rect x="476.8" y="131.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="479.8" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (594 samples, 5.30%)</title><rect x="477.2" y="147.0" width="62.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="480.2" y="158.0">tcp_da..</text>
</g>
<g>
<title>__wake_up_sync_key (3 samples, 0.03%)</title><rect x="477.2" y="131.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="480.2" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (591 samples, 5.27%)</title><rect x="477.5" y="131.0" width="62.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="480.5" y="142.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (591 samples, 5.27%)</title><rect x="477.5" y="115.0" width="62.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="480.5" y="126.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (590 samples, 5.26%)</title><rect x="477.6" y="99.0" width="62.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="480.6" y="110.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (590 samples, 5.26%)</title><rect x="477.6" y="83.0" width="62.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="480.6" y="94.0">__lock..</text>
</g>
<g>
<title>tcp_event_data_recv (4 samples, 0.04%)</title><rect x="539.7" y="147.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="542.7" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (7 samples, 0.06%)</title><rect x="540.1" y="147.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="543.1" y="158.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.03%)</title><rect x="540.1" y="131.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="543.1" y="142.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.04%)</title><rect x="540.4" y="131.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="543.4" y="142.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.03%)</title><rect x="542.1" y="355.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="545.1" y="366.0"></text>
</g>
<g>
<title>dev_queue_xmit (62 samples, 0.55%)</title><rect x="542.4" y="403.0" width="6.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="545.4" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (61 samples, 0.54%)</title><rect x="542.4" y="387.0" width="6.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="545.4" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (34 samples, 0.30%)</title><rect x="543.6" y="371.0" width="3.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="546.6" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (25 samples, 0.22%)</title><rect x="544.1" y="355.0" width="2.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="547.1" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (7 samples, 0.06%)</title><rect x="544.5" y="339.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="547.5" y="350.0"></text>
</g>
<g>
<title>netif_rx (11 samples, 0.10%)</title><rect x="545.3" y="339.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="548.3" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (9 samples, 0.08%)</title><rect x="545.5" y="323.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="548.5" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (8 samples, 0.07%)</title><rect x="545.6" y="307.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="548.6" y="318.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (3 samples, 0.03%)</title><rect x="546.8" y="355.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="549.8" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.04%)</title><rect x="547.2" y="371.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="550.2" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (8 samples, 0.07%)</title><rect x="547.9" y="371.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="550.9" y="382.0"></text>
</g>
<g>
<title>skb_clone (6 samples, 0.05%)</title><rect x="549.8" y="515.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="552.8" y="526.0"></text>
</g>
<g>
<title>__skb_clone (4 samples, 0.04%)</title><rect x="550.0" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="553.0" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (3 samples, 0.03%)</title><rect x="550.1" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="553.1" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (6 samples, 0.05%)</title><rect x="551.4" y="531.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="554.4" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (9 samples, 0.08%)</title><rect x="552.2" y="531.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="555.2" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (7 samples, 0.06%)</title><rect x="552.4" y="515.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="555.4" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.05%)</title><rect x="552.5" y="499.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="555.5" y="510.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.05%)</title><rect x="552.5" y="483.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="555.5" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.04%)</title><rect x="552.6" y="467.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="555.6" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (5 samples, 0.04%)</title><rect x="553.4" y="531.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="556.4" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (16 samples, 0.14%)</title><rect x="554.5" y="579.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="557.5" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (14 samples, 0.12%)</title><rect x="554.8" y="563.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="557.8" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.04%)</title><rect x="555.5" y="547.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="558.5" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.03%)</title><rect x="556.2" y="595.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="559.2" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (21 samples, 0.19%)</title><rect x="556.8" y="627.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="559.8" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (20 samples, 0.18%)</title><rect x="556.9" y="611.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="559.9" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (19 samples, 0.17%)</title><rect x="557.0" y="595.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="560.0" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (14 samples, 0.12%)</title><rect x="557.5" y="579.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="560.5" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (5 samples, 0.04%)</title><rect x="558.4" y="563.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="561.4" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (37 samples, 0.33%)</title><rect x="559.0" y="643.0" width="3.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="562.0" y="654.0"></text>
</g>
<g>
<title>__fdget (28 samples, 0.25%)</title><rect x="559.2" y="627.0" width="2.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="562.2" y="638.0"></text>
</g>
<g>
<title>__fget_light (28 samples, 0.25%)</title><rect x="559.2" y="611.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="562.2" y="622.0"></text>
</g>
<g>
<title>__fget (28 samples, 0.25%)</title><rect x="559.2" y="595.0" width="2.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="562.2" y="606.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.06%)</title><rect x="562.1" y="627.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="565.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (9 samples, 0.08%)</title><rect x="563.1" y="675.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="566.1" y="686.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.08%)</title><rect x="563.1" y="659.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="566.1" y="670.0"></text>
</g>
<g>
<title>__schedule (9 samples, 0.08%)</title><rect x="563.1" y="643.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="566.1" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 0.06%)</title><rect x="563.3" y="627.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="566.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (45 samples, 0.40%)</title><rect x="564.3" y="803.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (38 samples, 0.34%)</title><rect x="565.1" y="787.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (38 samples, 0.34%)</title><rect x="565.1" y="771.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="568.1" y="782.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="567.3" y="755.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="570.3" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.04%)</title><rect x="567.3" y="739.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="570.3" y="750.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="567.7" y="755.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="570.7" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.05%)</title><rect x="568.3" y="755.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="571.3" y="766.0"></text>
</g>
<g>
<title>gettimeofday (6 samples, 0.05%)</title><rect x="568.3" y="739.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="571.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.04%)</title><rect x="568.4" y="723.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="571.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7 samples, 0.06%)</title><rect x="569.2" y="819.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="572.2" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.04%)</title><rect x="569.4" y="803.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="572.4" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.04%)</title><rect x="569.5" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="572.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.04%)</title><rect x="569.5" y="771.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="572.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.upsert (3,534 samples, 31.51%)</title><rect x="570.1" y="819.0" width="371.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.1" y="830.0">ru/mail/polis/dao/kovalkov/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,504 samples, 31.25%)</title><rect x="570.1" y="803.0" width="368.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.1" y="814.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (3,502 samples, 31.23%)</title><rect x="570.3" y="787.0" width="368.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="573.3" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.05%)</title><rect x="572.1" y="771.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="575.1" y="782.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (2,902 samples, 25.88%)</title><rect x="572.7" y="771.0" width="305.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="575.7" y="782.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (5 samples, 0.04%)</title><rect x="573.8" y="755.0" width="0.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="576.8" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (8 samples, 0.07%)</title><rect x="574.3" y="755.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="577.3" y="766.0"></text>
</g>
<g>
<title>cfree (13 samples, 0.12%)</title><rect x="575.2" y="755.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="578.2" y="766.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (7 samples, 0.06%)</title><rect x="576.5" y="755.0" width="0.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="579.5" y="766.0"></text>
</g>
<g>
<title>operator delete(void*) (6 samples, 0.05%)</title><rect x="577.3" y="755.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="580.3" y="766.0"></text>
</g>
<g>
<title>operator delete[](void*) (3 samples, 0.03%)</title><rect x="577.9" y="755.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="580.9" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (10 samples, 0.09%)</title><rect x="578.2" y="755.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="581.2" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (9 samples, 0.08%)</title><rect x="579.3" y="755.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="582.3" y="766.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.11%)</title><rect x="580.2" y="755.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="583.2" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (2,818 samples, 25.13%)</title><rect x="581.6" y="755.0" width="296.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="584.6" y="766.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="583.2" y="739.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="586.2" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (23 samples, 0.21%)</title><rect x="583.7" y="739.0" width="2.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="586.7" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (12 samples, 0.11%)</title><rect x="584.8" y="723.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="587.8" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (17 samples, 0.15%)</title><rect x="586.1" y="739.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="589.1" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.04%)</title><rect x="586.4" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="589.4" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (10 samples, 0.09%)</title><rect x="586.8" y="723.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="589.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,743 samples, 24.46%)</title><rect x="587.9" y="739.0" width="288.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="590.9" y="750.0">rocksdb::DB::Put(rocksdb::WriteOptions ..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (8 samples, 0.07%)</title><rect x="588.2" y="723.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.2" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="588.7" y="707.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="591.7" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="588.7" y="691.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="591.7" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="588.7" y="675.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="591.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,732 samples, 24.36%)</title><rect x="589.1" y="723.0" width="287.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="592.1" y="734.0">rocksdb::DBImpl::Put(rocksdb::WriteOpti..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2,713 samples, 24.19%)</title><rect x="589.1" y="707.0" width="285.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="592.1" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (3 samples, 0.03%)</title><rect x="589.5" y="691.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="592.5" y="702.0"></text>
</g>
<g>
<title>cfree (10 samples, 0.09%)</title><rect x="589.8" y="691.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="592.8" y="702.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.03%)</title><rect x="590.8" y="691.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="593.8" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (15 samples, 0.13%)</title><rect x="591.2" y="691.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="594.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2,565 samples, 22.87%)</title><rect x="592.7" y="691.0" width="269.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="595.7" y="702.0">rocksdb::DBImpl::Write(rocksdb::Writ..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (10 samples, 0.09%)</title><rect x="592.7" y="675.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="595.7" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.06%)</title><rect x="594.0" y="675.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="597.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::ColumnFamilyHandleImpl(rocksdb::ColumnFamilyData*, rocksdb::DBImpl*, rocksdb::InstrumentedMutex*) (4 samples, 0.04%)</title><rect x="595.2" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="598.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::~ColumnFamilyHandleImpl() (3 samples, 0.03%)</title><rect x="595.6" y="675.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="598.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (3 samples, 0.03%)</title><rect x="595.9" y="675.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="598.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (6 samples, 0.05%)</title><rect x="596.2" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (12 samples, 0.11%)</title><rect x="596.8" y="675.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="599.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2,443 samples, 21.79%)</title><rect x="598.1" y="675.0" width="257.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="601.1" y="686.0">rocksdb::DBImpl::WriteImpl(rocksdb..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (5 samples, 0.04%)</title><rect x="605.7" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="608.7" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.04%)</title><rect x="606.3" y="659.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="609.3" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.04%)</title><rect x="606.3" y="643.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="609.3" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (5 samples, 0.04%)</title><rect x="606.3" y="627.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="609.3" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.04%)</title><rect x="606.3" y="611.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="609.3" y="622.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.04%)</title><rect x="606.3" y="595.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="609.3" y="606.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.04%)</title><rect x="606.3" y="579.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="609.3" y="590.0"></text>
</g>
<g>
<title>wake_up_q (5 samples, 0.04%)</title><rect x="606.3" y="563.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="609.3" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (5 samples, 0.04%)</title><rect x="606.3" y="547.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="609.3" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (5 samples, 0.04%)</title><rect x="606.3" y="531.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="609.3" y="542.0"></text>
</g>
<g>
<title>__sched_yield (29 samples, 0.26%)</title><rect x="606.8" y="659.0" width="3.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="609.8" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.24%)</title><rect x="607.1" y="643.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="610.1" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (27 samples, 0.24%)</title><rect x="607.1" y="627.0" width="2.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="610.1" y="638.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (25 samples, 0.22%)</title><rect x="607.3" y="611.0" width="2.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="610.3" y="622.0"></text>
</g>
<g>
<title>do_sched_yield (25 samples, 0.22%)</title><rect x="607.3" y="595.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="610.3" y="606.0"></text>
</g>
<g>
<title>schedule (25 samples, 0.22%)</title><rect x="607.3" y="579.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="610.3" y="590.0"></text>
</g>
<g>
<title>__schedule (25 samples, 0.22%)</title><rect x="607.3" y="563.0" width="2.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="610.3" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="609.6" y="547.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="612.6" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (26 samples, 0.23%)</title><rect x="609.9" y="659.0" width="2.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="612.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (12 samples, 0.11%)</title><rect x="613.0" y="659.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="616.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (3 samples, 0.03%)</title><rect x="614.3" y="659.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="617.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (6 samples, 0.05%)</title><rect x="614.6" y="659.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="617.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (920 samples, 8.20%)</title><rect x="615.3" y="659.0" width="96.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="618.3" y="670.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (14 samples, 0.12%)</title><rect x="616.3" y="643.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="619.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (6 samples, 0.05%)</title><rect x="617.2" y="627.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="620.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (882 samples, 7.87%)</title><rect x="617.8" y="643.0" width="92.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="620.8" y="654.0">rocksdb::DB..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.03%)</title><rect x="618.6" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="621.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (871 samples, 7.77%)</title><rect x="618.9" y="627.0" width="91.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="621.9" y="638.0">rocksdb::lo..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (31 samples, 0.28%)</title><rect x="620.8" y="611.0" width="3.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="623.8" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.04%)</title><rect x="623.7" y="595.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="626.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="623.7" y="579.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="626.7" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="623.7" y="563.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="626.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.03%)</title><rect x="624.2" y="611.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (4 samples, 0.04%)</title><rect x="624.5" y="611.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (5 samples, 0.04%)</title><rect x="624.9" y="611.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (738 samples, 6.58%)</title><rect x="625.5" y="611.0" width="77.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="628.5" y="622.0">rocksdb::..</text>
</g>
<g>
<title>__tls_get_addr (8 samples, 0.07%)</title><rect x="626.4" y="595.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="629.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::GetPerfLevel() (3 samples, 0.03%)</title><rect x="627.3" y="595.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="630.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.04%)</title><rect x="627.7" y="595.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="630.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (5 samples, 0.04%)</title><rect x="628.1" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="631.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (5 samples, 0.04%)</title><rect x="628.6" y="595.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="631.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (702 samples, 6.26%)</title><rect x="629.1" y="595.0" width="73.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="632.1" y="606.0">rocksdb:..</text>
</g>
<g>
<title>__tls_get_addr (9 samples, 0.08%)</title><rect x="631.1" y="579.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="634.1" y="590.0"></text>
</g>
<g>
<title>__write (670 samples, 5.97%)</title><rect x="632.1" y="579.0" width="70.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="635.1" y="590.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (652 samples, 5.81%)</title><rect x="633.8" y="563.0" width="68.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="636.8" y="574.0">entry_S..</text>
</g>
<g>
<title>__x64_sys_write (5 samples, 0.04%)</title><rect x="633.8" y="547.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="636.8" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (647 samples, 5.77%)</title><rect x="634.3" y="547.0" width="68.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="637.3" y="558.0">do_sysc..</text>
</g>
<g>
<title>__x64_sys_write (626 samples, 5.58%)</title><rect x="636.0" y="531.0" width="65.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="639.0" y="542.0">__x64_s..</text>
</g>
<g>
<title>ksys_write (625 samples, 5.57%)</title><rect x="636.1" y="515.0" width="65.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="639.1" y="526.0">ksys_wr..</text>
</g>
<g>
<title>__fdget_pos (28 samples, 0.25%)</title><rect x="636.4" y="499.0" width="3.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="639.4" y="510.0"></text>
</g>
<g>
<title>__fget_light (26 samples, 0.23%)</title><rect x="636.4" y="483.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="639.4" y="494.0"></text>
</g>
<g>
<title>__fget (26 samples, 0.23%)</title><rect x="636.4" y="467.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="639.4" y="478.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.08%)</title><rect x="639.4" y="499.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="642.4" y="510.0"></text>
</g>
<g>
<title>__sb_end_write (5 samples, 0.04%)</title><rect x="640.3" y="499.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="643.3" y="510.0"></text>
</g>
<g>
<title>vfs_write (574 samples, 5.12%)</title><rect x="641.5" y="499.0" width="60.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="644.5" y="510.0">vfs_wr..</text>
</g>
<g>
<title>__sb_start_write (17 samples, 0.15%)</title><rect x="643.1" y="483.0" width="1.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="646.1" y="494.0"></text>
</g>
<g>
<title>__vfs_write (507 samples, 4.52%)</title><rect x="644.9" y="483.0" width="53.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="647.9" y="494.0">__vfs..</text>
</g>
<g>
<title>new_sync_write (503 samples, 4.49%)</title><rect x="645.4" y="467.0" width="52.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="648.4" y="478.0">new_s..</text>
</g>
<g>
<title>ext4_file_write_iter (494 samples, 4.41%)</title><rect x="646.3" y="451.0" width="52.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="649.3" y="462.0">ext4_..</text>
</g>
<g>
<title>__generic_file_write_iter (477 samples, 4.25%)</title><rect x="646.9" y="435.0" width="50.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="649.9" y="446.0">__gen..</text>
</g>
<g>
<title>ext4_da_write_begin (3 samples, 0.03%)</title><rect x="648.1" y="419.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="651.1" y="430.0"></text>
</g>
<g>
<title>ext4_da_write_end (4 samples, 0.04%)</title><rect x="648.4" y="419.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="651.4" y="430.0"></text>
</g>
<g>
<title>file_remove_privs (4 samples, 0.04%)</title><rect x="648.8" y="419.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="651.8" y="430.0"></text>
</g>
<g>
<title>file_update_time (28 samples, 0.25%)</title><rect x="649.2" y="419.0" width="3.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="652.2" y="430.0"></text>
</g>
<g>
<title>current_time (7 samples, 0.06%)</title><rect x="649.6" y="403.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="652.6" y="414.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (3 samples, 0.03%)</title><rect x="649.7" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="652.7" y="398.0"></text>
</g>
<g>
<title>timestamp_truncate (3 samples, 0.03%)</title><rect x="650.0" y="387.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="653.0" y="398.0"></text>
</g>
<g>
<title>generic_update_time (12 samples, 0.11%)</title><rect x="650.3" y="403.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="653.3" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (12 samples, 0.11%)</title><rect x="650.3" y="387.0" width="1.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="653.3" y="398.0"></text>
</g>
<g>
<title>ext4_dirty_inode (12 samples, 0.11%)</title><rect x="650.3" y="371.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="653.3" y="382.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (9 samples, 0.08%)</title><rect x="650.5" y="355.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="653.5" y="366.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (5 samples, 0.04%)</title><rect x="650.7" y="339.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="653.7" y="350.0"></text>
</g>
<g>
<title>ext4_do_update_inode (5 samples, 0.04%)</title><rect x="650.7" y="323.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="653.7" y="334.0"></text>
</g>
<g>
<title>timestamp_truncate (4 samples, 0.04%)</title><rect x="651.8" y="403.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="654.8" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (417 samples, 3.72%)</title><rect x="652.2" y="419.0" width="43.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="655.2" y="430.0">gene..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (12 samples, 0.11%)</title><rect x="652.9" y="403.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="655.9" y="414.0"></text>
</g>
<g>
<title>ext4_da_write_begin (164 samples, 1.46%)</title><rect x="654.3" y="403.0" width="17.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="657.3" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (45 samples, 0.40%)</title><rect x="655.6" y="387.0" width="4.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="658.6" y="398.0"></text>
</g>
<g>
<title>ext4_journal_check_start (3 samples, 0.03%)</title><rect x="655.7" y="371.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="658.7" y="382.0"></text>
</g>
<g>
<title>jbd2__journal_start (41 samples, 0.37%)</title><rect x="656.0" y="371.0" width="4.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="659.0" y="382.0"></text>
</g>
<g>
<title>kmem_cache_alloc (16 samples, 0.14%)</title><rect x="656.3" y="355.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="659.3" y="366.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.03%)</title><rect x="658.0" y="355.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="661.0" y="366.0"></text>
</g>
<g>
<title>start_this_handle (15 samples, 0.13%)</title><rect x="658.7" y="355.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="661.7" y="366.0"></text>
</g>
<g>
<title>add_transaction_credits (7 samples, 0.06%)</title><rect x="659.6" y="339.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="662.6" y="350.0"></text>
</g>
<g>
<title>ext4_block_write_begin (29 samples, 0.26%)</title><rect x="660.3" y="387.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="663.3" y="398.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (71 samples, 0.63%)</title><rect x="663.3" y="387.0" width="7.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="666.3" y="398.0"></text>
</g>
<g>
<title>find_get_entry (3 samples, 0.03%)</title><rect x="663.3" y="371.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="666.3" y="382.0"></text>
</g>
<g>
<title>pagecache_get_page (66 samples, 0.59%)</title><rect x="663.7" y="371.0" width="6.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="666.7" y="382.0"></text>
</g>
<g>
<title>__page_cache_alloc (3 samples, 0.03%)</title><rect x="663.9" y="355.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="666.9" y="366.0"></text>
</g>
<g>
<title>alloc_pages_current (3 samples, 0.03%)</title><rect x="663.9" y="339.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="666.9" y="350.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (3 samples, 0.03%)</title><rect x="663.9" y="323.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="666.9" y="334.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (11 samples, 0.10%)</title><rect x="664.3" y="355.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="667.3" y="366.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (8 samples, 0.07%)</title><rect x="664.4" y="339.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="667.4" y="350.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (3 samples, 0.03%)</title><rect x="664.6" y="323.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="667.6" y="334.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (3 samples, 0.03%)</title><rect x="664.9" y="323.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="667.9" y="334.0"></text>
</g>
<g>
<title>get_mem_cgroup_from_mm (3 samples, 0.03%)</title><rect x="664.9" y="307.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="667.9" y="318.0"></text>
</g>
<g>
<title>find_get_entry (49 samples, 0.44%)</title><rect x="665.5" y="355.0" width="5.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="668.5" y="366.0"></text>
</g>
<g>
<title>xas_load (24 samples, 0.21%)</title><rect x="666.5" y="339.0" width="2.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="669.5" y="350.0"></text>
</g>
<g>
<title>xas_start (15 samples, 0.13%)</title><rect x="669.0" y="339.0" width="1.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="672.0" y="350.0"></text>
</g>
<g>
<title>pagecache_get_page (3 samples, 0.03%)</title><rect x="670.9" y="387.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="673.9" y="398.0"></text>
</g>
<g>
<title>wait_for_stable_page (3 samples, 0.03%)</title><rect x="671.2" y="387.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="674.2" y="398.0"></text>
</g>
<g>
<title>ext4_da_write_end (214 samples, 1.91%)</title><rect x="671.6" y="403.0" width="22.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="674.6" y="414.0">e..</text>
</g>
<g>
<title>__ext4_journal_stop (27 samples, 0.24%)</title><rect x="672.9" y="387.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="675.9" y="398.0"></text>
</g>
<g>
<title>__wake_up (3 samples, 0.03%)</title><rect x="672.9" y="371.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="675.9" y="382.0"></text>
</g>
<g>
<title>jbd2_journal_stop (24 samples, 0.21%)</title><rect x="673.2" y="371.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="676.2" y="382.0"></text>
</g>
<g>
<title>__wake_up (4 samples, 0.04%)</title><rect x="674.0" y="355.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="677.0" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.04%)</title><rect x="674.0" y="339.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="677.0" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.04%)</title><rect x="674.0" y="323.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="677.0" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (12 samples, 0.11%)</title><rect x="674.5" y="355.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="677.5" y="366.0"></text>
</g>
<g>
<title>generic_write_end (170 samples, 1.52%)</title><rect x="676.0" y="387.0" width="17.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="679.0" y="398.0"></text>
</g>
<g>
<title>__mark_inode_dirty (156 samples, 1.39%)</title><rect x="676.3" y="371.0" width="16.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="679.3" y="382.0"></text>
</g>
<g>
<title>ext4_dirty_inode (151 samples, 1.35%)</title><rect x="676.7" y="355.0" width="15.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="679.7" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.03%)</title><rect x="676.9" y="339.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="679.9" y="350.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (140 samples, 1.25%)</title><rect x="677.7" y="339.0" width="14.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="680.7" y="350.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (84 samples, 0.75%)</title><rect x="678.3" y="323.0" width="8.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="681.3" y="334.0"></text>
</g>
<g>
<title>ext4_do_update_inode (75 samples, 0.67%)</title><rect x="678.9" y="307.0" width="7.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="681.9" y="318.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (43 samples, 0.38%)</title><rect x="682.0" y="291.0" width="4.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="685.0" y="302.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (37 samples, 0.33%)</title><rect x="682.6" y="275.0" width="3.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="685.6" y="286.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (11 samples, 0.10%)</title><rect x="684.0" y="259.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="687.0" y="270.0"></text>
</g>
<g>
<title>crypto_shash_update (13 samples, 0.12%)</title><rect x="685.1" y="259.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="688.1" y="270.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (9 samples, 0.08%)</title><rect x="685.5" y="243.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="688.5" y="254.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (50 samples, 0.45%)</title><rect x="687.1" y="323.0" width="5.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="690.1" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (35 samples, 0.31%)</title><rect x="687.5" y="307.0" width="3.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="690.5" y="318.0"></text>
</g>
<g>
<title>__getblk_gfp (19 samples, 0.17%)</title><rect x="688.3" y="291.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="691.3" y="302.0"></text>
</g>
<g>
<title>__find_get_block (18 samples, 0.16%)</title><rect x="688.4" y="275.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="691.4" y="286.0"></text>
</g>
<g>
<title>mark_page_accessed (5 samples, 0.04%)</title><rect x="689.8" y="259.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="692.8" y="270.0"></text>
</g>
<g>
<title>ext4_get_group_desc (9 samples, 0.08%)</title><rect x="690.3" y="291.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="693.3" y="302.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (7 samples, 0.06%)</title><rect x="691.2" y="307.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="694.2" y="318.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (4 samples, 0.04%)</title><rect x="691.5" y="291.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="694.5" y="302.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (4 samples, 0.04%)</title><rect x="691.5" y="275.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="694.5" y="286.0"></text>
</g>
<g>
<title>ext4_inode_table (3 samples, 0.03%)</title><rect x="692.0" y="307.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="695.0" y="318.0"></text>
</g>
<g>
<title>block_write_end (7 samples, 0.06%)</title><rect x="692.7" y="371.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="695.7" y="382.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (6 samples, 0.05%)</title><rect x="692.8" y="355.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="695.8" y="366.0"></text>
</g>
<g>
<title>mark_buffer_dirty (4 samples, 0.04%)</title><rect x="693.0" y="339.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="696.0" y="350.0"></text>
</g>
<g>
<title>ext4_dirty_inode (4 samples, 0.04%)</title><rect x="693.4" y="371.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="696.4" y="382.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (12 samples, 0.11%)</title><rect x="694.4" y="403.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="697.4" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (9 samples, 0.08%)</title><rect x="694.7" y="387.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="697.7" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (6 samples, 0.05%)</title><rect x="696.1" y="419.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="699.1" y="430.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (3 samples, 0.03%)</title><rect x="696.7" y="419.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="699.7" y="430.0"></text>
</g>
<g>
<title>ext4_write_checks (9 samples, 0.08%)</title><rect x="697.1" y="435.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="700.1" y="446.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (6 samples, 0.05%)</title><rect x="697.4" y="419.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="700.4" y="430.0"></text>
</g>
<g>
<title>fsnotify (3 samples, 0.03%)</title><rect x="698.3" y="483.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="701.3" y="494.0"></text>
</g>
<g>
<title>rw_verify_area (30 samples, 0.27%)</title><rect x="698.6" y="483.0" width="3.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="701.6" y="494.0"></text>
</g>
<g>
<title>apparmor_file_permission (5 samples, 0.04%)</title><rect x="698.9" y="467.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="701.9" y="478.0"></text>
</g>
<g>
<title>security_file_permission (22 samples, 0.20%)</title><rect x="699.4" y="467.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="702.4" y="478.0"></text>
</g>
<g>
<title>apparmor_file_permission (17 samples, 0.15%)</title><rect x="699.5" y="451.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="702.5" y="462.0"></text>
</g>
<g>
<title>common_file_perm (17 samples, 0.15%)</title><rect x="699.5" y="435.0" width="1.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="702.5" y="446.0"></text>
</g>
<g>
<title>aa_file_perm (4 samples, 0.04%)</title><rect x="700.8" y="419.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="703.8" y="430.0"></text>
</g>
<g>
<title>common_file_perm (4 samples, 0.04%)</title><rect x="701.3" y="451.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="704.3" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="701.9" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="704.9" y="542.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="701.9" y="515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="704.9" y="526.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.03%)</title><rect x="701.9" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="704.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.04%)</title><rect x="702.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="705.6" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (6 samples, 0.05%)</title><rect x="703.1" y="611.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="706.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (63 samples, 0.56%)</title><rect x="703.9" y="611.0" width="6.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="706.9" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (16 samples, 0.14%)</title><rect x="704.1" y="595.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="707.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.04%)</title><rect x="705.8" y="595.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="708.8" y="606.0"></text>
</g>
<g>
<title>memcpy (10 samples, 0.09%)</title><rect x="706.3" y="595.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="709.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.03%)</title><rect x="707.3" y="595.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::use_direct_io() const (7 samples, 0.06%)</title><rect x="707.6" y="595.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="710.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (19 samples, 0.17%)</title><rect x="708.4" y="595.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="711.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="711.0" y="643.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="714.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (6 samples, 0.05%)</title><rect x="712.1" y="659.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="715.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (19 samples, 0.17%)</title><rect x="712.7" y="659.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="715.7" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.04%)</title><rect x="712.9" y="643.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="715.9" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 0.12%)</title><rect x="713.3" y="643.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="716.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (5 samples, 0.04%)</title><rect x="715.3" y="659.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="718.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (4 samples, 0.04%)</title><rect x="715.9" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="718.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (5 samples, 0.04%)</title><rect x="716.3" y="659.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="719.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (4 samples, 0.04%)</title><rect x="717.0" y="659.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="720.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (10 samples, 0.09%)</title><rect x="717.4" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="720.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (761 samples, 6.79%)</title><rect x="718.5" y="659.0" width="80.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.5" y="670.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (744 samples, 6.63%)</title><rect x="720.1" y="643.0" width="78.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="723.1" y="654.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="720.3" y="627.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="723.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.04%)</title><rect x="721.0" y="627.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="724.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (730 samples, 6.51%)</title><rect x="721.5" y="627.0" width="76.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="724.5" y="638.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (700 samples, 6.24%)</title><rect x="722.8" y="611.0" width="73.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.8" y="622.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (4 samples, 0.04%)</title><rect x="722.8" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="725.8" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (3 samples, 0.03%)</title><rect x="723.2" y="595.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="726.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (690 samples, 6.15%)</title><rect x="723.9" y="595.0" width="72.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="726.9" y="606.0">rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (8 samples, 0.07%)</title><rect x="726.3" y="579.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="729.3" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.03%)</title><rect x="727.1" y="579.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="730.1" y="590.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.03%)</title><rect x="727.4" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="730.4" y="590.0"></text>
</g>
<g>
<title>memcpy (3 samples, 0.03%)</title><rect x="727.7" y="579.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="730.7" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (8 samples, 0.07%)</title><rect x="728.2" y="579.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="731.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (625 samples, 5.57%)</title><rect x="729.2" y="579.0" width="65.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="732.2" y="590.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (43 samples, 0.38%)</title><rect x="731.1" y="563.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="734.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (20 samples, 0.18%)</title><rect x="732.7" y="547.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="735.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (8 samples, 0.07%)</title><rect x="734.8" y="547.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="737.8" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (540 samples, 4.82%)</title><rect x="735.6" y="563.0" width="56.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="738.6" y="574.0">bool r..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (503 samples, 4.49%)</title><rect x="738.1" y="547.0" width="52.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="741.1" y="558.0">/tmp/..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (222 samples, 1.98%)</title><rect x="760.2" y="531.0" width="23.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="763.2" y="542.0">/..</text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (20 samples, 0.18%)</title><rect x="761.3" y="515.0" width="2.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="764.3" y="526.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (18 samples, 0.16%)</title><rect x="763.4" y="515.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="766.4" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (47 samples, 0.42%)</title><rect x="765.3" y="515.0" width="5.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="768.3" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (126 samples, 1.12%)</title><rect x="770.3" y="515.0" width="13.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.3" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (10 samples, 0.09%)</title><rect x="773.6" y="499.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="776.6" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (60 samples, 0.54%)</title><rect x="774.7" y="499.0" width="6.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="777.7" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="780.7" y="483.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="783.7" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="780.7" y="467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="783.7" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="780.7" y="451.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="783.7" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (17 samples, 0.15%)</title><rect x="781.2" y="499.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="784.2" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (4 samples, 0.04%)</title><rect x="783.0" y="499.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="786.0" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (6 samples, 0.05%)</title><rect x="783.5" y="531.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="786.5" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.06%)</title><rect x="784.1" y="531.0" width="0.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="787.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (43 samples, 0.38%)</title><rect x="784.9" y="531.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="787.9" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.04%)</title><rect x="788.6" y="515.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="791.6" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (15 samples, 0.13%)</title><rect x="789.4" y="531.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="792.4" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (15 samples, 0.13%)</title><rect x="789.4" y="515.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="792.4" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (15 samples, 0.13%)</title><rect x="789.4" y="499.0" width="1.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="792.4" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="791.1" y="547.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="794.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (8 samples, 0.07%)</title><rect x="791.4" y="547.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="794.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (10 samples, 0.09%)</title><rect x="792.6" y="563.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="795.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (8 samples, 0.07%)</title><rect x="793.9" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="796.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (6 samples, 0.05%)</title><rect x="794.1" y="547.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="797.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (11 samples, 0.10%)</title><rect x="795.2" y="579.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="798.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (5 samples, 0.04%)</title><rect x="796.5" y="611.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="799.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (11 samples, 0.10%)</title><rect x="797.1" y="611.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="800.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (194 samples, 1.73%)</title><rect x="798.6" y="659.0" width="20.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="801.6" y="670.0"></text>
</g>
<g>
<title>cfree (8 samples, 0.07%)</title><rect x="799.1" y="643.0" width="0.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="802.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (4 samples, 0.04%)</title><rect x="800.1" y="643.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (4 samples, 0.04%)</title><rect x="800.1" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="803.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (174 samples, 1.55%)</title><rect x="800.6" y="643.0" width="18.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="803.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (171 samples, 1.52%)</title><rect x="800.9" y="627.0" width="18.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="803.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (164 samples, 1.46%)</title><rect x="801.5" y="611.0" width="17.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="804.5" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (154 samples, 1.37%)</title><rect x="801.6" y="595.0" width="16.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="804.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (144 samples, 1.28%)</title><rect x="802.2" y="579.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="805.2" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (7 samples, 0.06%)</title><rect x="802.9" y="563.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="805.9" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (127 samples, 1.13%)</title><rect x="803.7" y="563.0" width="13.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="806.7" y="574.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (127 samples, 1.13%)</title><rect x="803.7" y="547.0" width="13.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.7" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (122 samples, 1.09%)</title><rect x="804.1" y="531.0" width="12.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="807.1" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (57 samples, 0.51%)</title><rect x="808.7" y="515.0" width="6.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="811.7" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni8065862658442990645.so (8 samples, 0.07%)</title><rect x="808.7" y="499.0" width="0.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="811.7" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (16 samples, 0.14%)</title><rect x="809.7" y="499.0" width="1.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="812.7" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (31 samples, 0.28%)</title><rect x="811.4" y="499.0" width="3.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="814.4" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (18 samples, 0.16%)</title><rect x="812.3" y="483.0" width="1.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="815.3" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="813.9" y="467.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="816.9" y="478.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="813.9" y="451.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="816.9" y="462.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="813.9" y="435.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="816.9" y="446.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.05%)</title><rect x="814.8" y="515.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="817.8" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (15 samples, 0.13%)</title><rect x="815.4" y="515.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="818.4" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (15 samples, 0.13%)</title><rect x="815.4" y="499.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="818.4" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (15 samples, 0.13%)</title><rect x="815.4" y="483.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="818.4" y="494.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, rocksdb::MemTable* const&amp;) (3 samples, 0.03%)</title><rect x="817.8" y="595.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="820.8" y="606.0"></text>
</g>
<g>
<title>std::_Rb_tree&lt;rocksdb::MemTable*, std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt;, std::_Select1st&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt;, std::less&lt;rocksdb::MemTable*&gt;, std::allocator&lt;std::pair&lt;rocksdb::MemTable* const, rocksdb::MemTablePostProcessInfo&gt; &gt; &gt;::_M_get_insert_unique_pos(rocksdb::MemTable* const&amp;) (3 samples, 0.03%)</title><rect x="818.1" y="595.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.1" y="606.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (3 samples, 0.03%)</title><rect x="818.4" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="821.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (6 samples, 0.05%)</title><rect x="819.0" y="659.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="822.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (7 samples, 0.06%)</title><rect x="819.6" y="659.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="822.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (164 samples, 1.46%)</title><rect x="820.3" y="659.0" width="17.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="823.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (22 samples, 0.20%)</title><rect x="835.3" y="643.0" width="2.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="838.3" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (22 samples, 0.20%)</title><rect x="835.3" y="627.0" width="2.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="838.3" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (22 samples, 0.20%)</title><rect x="835.3" y="611.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="838.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (86 samples, 0.77%)</title><rect x="837.8" y="659.0" width="9.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="840.8" y="670.0"></text>
</g>
<g>
<title>__sched_yield (8 samples, 0.07%)</title><rect x="838.0" y="643.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="841.0" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.07%)</title><rect x="838.0" y="627.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="841.0" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (8 samples, 0.07%)</title><rect x="838.0" y="611.0" width="0.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="841.0" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (8 samples, 0.07%)</title><rect x="838.0" y="595.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="841.0" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (8 samples, 0.07%)</title><rect x="838.0" y="579.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="841.0" y="590.0"></text>
</g>
<g>
<title>schedule (8 samples, 0.07%)</title><rect x="838.0" y="563.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="841.0" y="574.0"></text>
</g>
<g>
<title>__schedule (8 samples, 0.07%)</title><rect x="838.0" y="547.0" width="0.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="841.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (75 samples, 0.67%)</title><rect x="838.9" y="643.0" width="7.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="841.9" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.04%)</title><rect x="846.3" y="627.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="849.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.04%)</title><rect x="846.3" y="611.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="849.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.04%)</title><rect x="846.3" y="595.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="849.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (10 samples, 0.09%)</title><rect x="846.9" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.03%)</title><rect x="847.9" y="659.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="850.9" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (11 samples, 0.10%)</title><rect x="848.2" y="659.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) (4 samples, 0.04%)</title><rect x="848.5" y="643.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="851.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.03%)</title><rect x="849.0" y="643.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="852.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (10 samples, 0.09%)</title><rect x="849.4" y="659.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="852.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (8 samples, 0.07%)</title><rect x="850.4" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="853.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (8 samples, 0.07%)</title><rect x="850.4" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="853.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (4 samples, 0.04%)</title><rect x="851.3" y="659.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="854.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (4 samples, 0.04%)</title><rect x="851.8" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="854.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (4 samples, 0.04%)</title><rect x="852.2" y="659.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (10 samples, 0.09%)</title><rect x="852.6" y="659.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.6" y="670.0"></text>
</g>
<g>
<title>std::chrono::_V2::steady_clock::now() (4 samples, 0.04%)</title><rect x="854.0" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="857.0" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.06%)</title><rect x="854.4" y="659.0" width="0.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="857.4" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (7 samples, 0.06%)</title><rect x="854.4" y="643.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="857.4" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.06%)</title><rect x="854.4" y="627.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="857.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (7 samples, 0.06%)</title><rect x="855.2" y="675.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (8 samples, 0.07%)</title><rect x="856.2" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (7 samples, 0.06%)</title><rect x="857.1" y="675.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="860.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="857.9" y="675.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="860.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (5 samples, 0.04%)</title><rect x="858.6" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (7 samples, 0.06%)</title><rect x="859.8" y="675.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (6 samples, 0.05%)</title><rect x="860.5" y="675.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (10 samples, 0.09%)</title><rect x="861.2" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="864.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (5 samples, 0.04%)</title><rect x="862.6" y="691.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="865.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (19 samples, 0.17%)</title><rect x="863.2" y="691.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="866.2" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.03%)</title><rect x="864.9" y="675.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="867.9" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.03%)</title><rect x="864.9" y="659.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="867.9" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.03%)</title><rect x="864.9" y="643.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="867.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (55 samples, 0.49%)</title><rect x="865.2" y="691.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="868.2" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (6 samples, 0.05%)</title><rect x="865.2" y="675.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="868.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (9 samples, 0.08%)</title><rect x="865.8" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="868.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (3 samples, 0.03%)</title><rect x="866.7" y="675.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="869.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (7 samples, 0.06%)</title><rect x="867.1" y="675.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="870.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) [clone .plt] (6 samples, 0.05%)</title><rect x="867.8" y="675.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="870.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (10 samples, 0.09%)</title><rect x="868.4" y="675.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="871.4" y="686.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (4 samples, 0.04%)</title><rect x="869.1" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="872.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (8 samples, 0.07%)</title><rect x="869.5" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="872.5" y="686.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (6 samples, 0.05%)</title><rect x="870.3" y="675.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.3" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (7 samples, 0.06%)</title><rect x="871.0" y="691.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="874.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (4 samples, 0.04%)</title><rect x="871.7" y="691.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="874.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.05%)</title><rect x="872.1" y="691.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="875.1" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (12 samples, 0.11%)</title><rect x="873.1" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="876.1" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (12 samples, 0.11%)</title><rect x="874.6" y="707.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="877.6" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (4 samples, 0.04%)</title><rect x="875.9" y="707.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.9" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (7 samples, 0.06%)</title><rect x="876.5" y="739.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="879.5" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (7 samples, 0.06%)</title><rect x="877.3" y="739.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="880.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (104 samples, 0.93%)</title><rect x="878.1" y="771.0" width="11.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="881.1" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (7 samples, 0.06%)</title><rect x="878.1" y="755.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="881.1" y="766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (7 samples, 0.06%)</title><rect x="878.8" y="755.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="881.8" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (67 samples, 0.60%)</title><rect x="879.9" y="755.0" width="7.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="882.9" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (62 samples, 0.55%)</title><rect x="880.4" y="739.0" width="6.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="883.4" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (61 samples, 0.54%)</title><rect x="880.5" y="723.0" width="6.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="883.5" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (60 samples, 0.54%)</title><rect x="880.6" y="707.0" width="6.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="883.6" y="718.0"></text>
</g>
<g>
<title>do_futex (59 samples, 0.53%)</title><rect x="880.6" y="691.0" width="6.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="883.6" y="702.0"></text>
</g>
<g>
<title>futex_wait (59 samples, 0.53%)</title><rect x="880.6" y="675.0" width="6.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="883.6" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (39 samples, 0.35%)</title><rect x="880.6" y="659.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="883.6" y="670.0"></text>
</g>
<g>
<title>schedule (36 samples, 0.32%)</title><rect x="881.0" y="643.0" width="3.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="884.0" y="654.0"></text>
</g>
<g>
<title>__schedule (34 samples, 0.30%)</title><rect x="881.2" y="627.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="884.2" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (32 samples, 0.29%)</title><rect x="881.4" y="611.0" width="3.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="884.4" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (14 samples, 0.12%)</title><rect x="884.7" y="659.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="887.7" y="670.0"></text>
</g>
<g>
<title>plist_add (5 samples, 0.04%)</title><rect x="886.2" y="659.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="889.2" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (7 samples, 0.06%)</title><rect x="887.1" y="755.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="890.1" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (5 samples, 0.04%)</title><rect x="887.8" y="755.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="890.8" y="766.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (6 samples, 0.05%)</title><rect x="888.4" y="755.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.4" y="766.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (6 samples, 0.05%)</title><rect x="888.4" y="739.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.4" y="750.0"></text>
</g>
<g>
<title>__libc_malloc (47 samples, 0.42%)</title><rect x="889.1" y="771.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="892.1" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.04%)</title><rect x="893.5" y="755.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="896.5" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.04%)</title><rect x="893.5" y="739.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="896.5" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.04%)</title><rect x="893.5" y="723.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="896.5" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (414 samples, 3.69%)</title><rect x="894.0" y="771.0" width="43.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="897.0" y="782.0">__pt..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (401 samples, 3.58%)</title><rect x="895.4" y="755.0" width="42.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="898.4" y="766.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (400 samples, 3.57%)</title><rect x="895.5" y="739.0" width="42.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="898.5" y="750.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (398 samples, 3.55%)</title><rect x="895.6" y="723.0" width="41.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="898.6" y="734.0">__x..</text>
</g>
<g>
<title>do_futex (397 samples, 3.54%)</title><rect x="895.6" y="707.0" width="41.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="898.6" y="718.0">do_..</text>
</g>
<g>
<title>futex_wake (397 samples, 3.54%)</title><rect x="895.6" y="691.0" width="41.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="898.6" y="702.0">fut..</text>
</g>
<g>
<title>mark_wake_futex (7 samples, 0.06%)</title><rect x="896.6" y="675.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="899.6" y="686.0"></text>
</g>
<g>
<title>wake_up_q (379 samples, 3.38%)</title><rect x="897.5" y="675.0" width="39.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="900.5" y="686.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (377 samples, 3.36%)</title><rect x="897.7" y="659.0" width="39.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="900.7" y="670.0">try..</text>
</g>
<g>
<title>__lock_text_start (377 samples, 3.36%)</title><rect x="897.7" y="643.0" width="39.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="900.7" y="654.0">__l..</text>
</g>
<g>
<title>clock_gettime (5 samples, 0.04%)</title><rect x="937.6" y="771.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="940.6" y="782.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (4 samples, 0.04%)</title><rect x="938.3" y="771.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="941.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (28 samples, 0.25%)</title><rect x="939.0" y="803.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="942.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (19 samples, 0.17%)</title><rect x="940.0" y="787.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="943.0" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (19 samples, 0.17%)</title><rect x="940.0" y="771.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (5 samples, 0.04%)</title><rect x="940.0" y="755.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="943.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.04%)</title><rect x="940.0" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="943.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.03%)</title><rect x="940.1" y="723.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.1" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.12%)</title><rect x="940.5" y="755.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="943.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.12%)</title><rect x="940.5" y="739.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="943.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.12%)</title><rect x="940.5" y="723.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.12%)</title><rect x="940.5" y="707.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="943.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (13 samples, 0.12%)</title><rect x="940.5" y="691.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="943.5" y="702.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="941.5" y="675.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="944.5" y="686.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,320 samples, 20.69%)</title><rect x="942.2" y="899.0" width="244.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="945.2" y="910.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="943.5" y="883.0" width="0.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="946.5" y="894.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (4 samples, 0.04%)</title><rect x="944.0" y="883.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="947.0" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.06%)</title><rect x="944.4" y="883.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="947.4" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (7 samples, 0.06%)</title><rect x="944.4" y="867.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="947.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (7 samples, 0.06%)</title><rect x="944.4" y="851.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="947.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (723 samples, 6.45%)</title><rect x="945.1" y="883.0" width="76.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="948.1" y="894.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (718 samples, 6.40%)</title><rect x="945.7" y="867.0" width="75.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="948.7" y="878.0">one/nio/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.04%)</title><rect x="948.5" y="851.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="951.5" y="862.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (7 samples, 0.06%)</title><rect x="948.9" y="851.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="951.9" y="862.0"></text>
</g>
<g>
<title>clock_gettime (40 samples, 0.36%)</title><rect x="949.8" y="851.0" width="4.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="952.8" y="862.0"></text>
</g>
<g>
<title>clock_gettime (6 samples, 0.05%)</title><rect x="953.3" y="835.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="956.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.05%)</title><rect x="953.3" y="819.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="956.3" y="830.0"></text>
</g>
<g>
<title>epoll_wait (639 samples, 5.70%)</title><rect x="954.0" y="851.0" width="67.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="957.0" y="862.0">epoll_w..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (599 samples, 5.34%)</title><rect x="958.1" y="835.0" width="63.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="961.1" y="846.0">entry_S..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (5 samples, 0.04%)</title><rect x="958.1" y="819.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="961.1" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (594 samples, 5.30%)</title><rect x="958.6" y="819.0" width="62.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="961.6" y="830.0">do_sys..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (573 samples, 5.11%)</title><rect x="960.5" y="803.0" width="60.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="963.5" y="814.0">__x64_..</text>
</g>
<g>
<title>do_epoll_wait (571 samples, 5.09%)</title><rect x="960.6" y="787.0" width="60.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="963.6" y="798.0">do_epo..</text>
</g>
<g>
<title>__fdget (15 samples, 0.13%)</title><rect x="961.7" y="771.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.7" y="782.0"></text>
</g>
<g>
<title>__fget_light (15 samples, 0.13%)</title><rect x="961.7" y="755.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="964.7" y="766.0"></text>
</g>
<g>
<title>__fget (15 samples, 0.13%)</title><rect x="961.7" y="739.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="964.7" y="750.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.04%)</title><rect x="963.2" y="771.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="966.2" y="782.0"></text>
</g>
<g>
<title>ep_poll (533 samples, 4.75%)</title><rect x="963.9" y="771.0" width="56.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="966.9" y="782.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (68 samples, 0.61%)</title><rect x="965.4" y="755.0" width="7.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="968.4" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (47 samples, 0.42%)</title><rect x="967.3" y="739.0" width="5.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="970.3" y="750.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (34 samples, 0.30%)</title><rect x="967.9" y="723.0" width="3.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="970.9" y="734.0"></text>
</g>
<g>
<title>sock_poll (23 samples, 0.21%)</title><rect x="968.6" y="707.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="971.6" y="718.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.03%)</title><rect x="969.9" y="691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="972.9" y="702.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (8 samples, 0.07%)</title><rect x="970.2" y="691.0" width="0.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="973.2" y="702.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.04%)</title><rect x="971.0" y="707.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="974.0" y="718.0"></text>
</g>
<g>
<title>sock_poll (8 samples, 0.07%)</title><rect x="971.4" y="723.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="974.4" y="734.0"></text>
</g>
<g>
<title>mutex_lock (3 samples, 0.03%)</title><rect x="972.3" y="739.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="975.3" y="750.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (444 samples, 3.96%)</title><rect x="973.1" y="755.0" width="46.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="976.1" y="766.0">sche..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (443 samples, 3.95%)</title><rect x="973.2" y="739.0" width="46.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="976.2" y="750.0">sche..</text>
</g>
<g>
<title>schedule (442 samples, 3.94%)</title><rect x="973.3" y="723.0" width="46.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="976.3" y="734.0">sche..</text>
</g>
<g>
<title>__schedule (435 samples, 3.88%)</title><rect x="974.1" y="707.0" width="45.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="977.1" y="718.0">__sc..</text>
</g>
<g>
<title>finish_task_switch (393 samples, 3.50%)</title><rect x="978.5" y="691.0" width="41.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="981.5" y="702.0">fin..</text>
</g>
<g>
<title>apic_timer_interrupt (3 samples, 0.03%)</title><rect x="1019.4" y="675.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1022.4" y="686.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (3 samples, 0.03%)</title><rect x="1019.4" y="659.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1022.4" y="670.0"></text>
</g>
<g>
<title>irq_exit (3 samples, 0.03%)</title><rect x="1019.4" y="643.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1022.4" y="654.0"></text>
</g>
<g>
<title>__softirqentry_text_start (3 samples, 0.03%)</title><rect x="1019.4" y="627.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1022.4" y="638.0"></text>
</g>
<g>
<title>fput_many (4 samples, 0.04%)</title><rect x="1020.1" y="771.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1023.1" y="782.0"></text>
</g>
<g>
<title>do_epoll_wait (3 samples, 0.03%)</title><rect x="1020.8" y="803.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1023.8" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,537 samples, 13.71%)</title><rect x="1021.2" y="883.0" width="161.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1024.2" y="894.0">one/nio/net/Session.p..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (4 samples, 0.04%)</title><rect x="1024.4" y="867.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.4" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (3 samples, 0.03%)</title><rect x="1024.4" y="851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1027.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,503 samples, 13.40%)</title><rect x="1024.8" y="867.0" width="158.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.8" y="878.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,098 samples, 9.79%)</title><rect x="1025.0" y="851.0" width="115.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.0" y="862.0">one/nio/http/H..</text>
</g>
<g>
<title>jbyte_arraycopy (9 samples, 0.08%)</title><rect x="1028.0" y="835.0" width="0.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1031.0" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.05%)</title><rect x="1028.9" y="835.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1031.9" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (10 samples, 0.09%)</title><rect x="1029.5" y="835.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1032.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10 samples, 0.09%)</title><rect x="1030.6" y="835.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.6" y="846.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (831 samples, 7.41%)</title><rect x="1031.6" y="835.0" width="87.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1034.6" y="846.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (828 samples, 7.38%)</title><rect x="1032.0" y="819.0" width="87.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1035.0" y="830.0">one/nio/ht..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (737 samples, 6.57%)</title><rect x="1032.0" y="803.0" width="77.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1035.0" y="814.0">RequestHa..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (54 samples, 0.48%)</title><rect x="1032.0" y="787.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1035.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (39 samples, 0.35%)</title><rect x="1033.5" y="771.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1036.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (5 samples, 0.04%)</title><rect x="1034.8" y="755.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1037.8" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (5 samples, 0.04%)</title><rect x="1034.8" y="739.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1037.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (14 samples, 0.12%)</title><rect x="1035.3" y="755.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1038.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (14 samples, 0.12%)</title><rect x="1035.3" y="739.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1038.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.04%)</title><rect x="1036.4" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1039.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (5 samples, 0.04%)</title><rect x="1037.1" y="755.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1037.3" y="739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1040.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.03%)</title><rect x="1037.3" y="723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1040.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.03%)</title><rect x="1037.3" y="707.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1040.3" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.put (683 samples, 6.09%)</title><rect x="1037.6" y="787.0" width="71.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1040.6" y="798.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.03%)</title><rect x="1040.7" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1043.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="1040.7" y="755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1043.7" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$77/2003223169.get$Lambda (3 samples, 0.03%)</title><rect x="1040.7" y="739.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (588 samples, 5.24%)</title><rect x="1041.0" y="771.0" width="61.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1044.0" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (584 samples, 5.21%)</title><rect x="1041.4" y="755.0" width="61.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1044.4" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (14 samples, 0.12%)</title><rect x="1042.6" y="739.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1045.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.03%)</title><rect x="1043.7" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1046.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.03%)</title><rect x="1043.7" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1046.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.03%)</title><rect x="1043.7" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1046.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.09%)</title><rect x="1044.1" y="739.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1047.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.09%)</title><rect x="1044.1" y="723.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1047.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 0.09%)</title><rect x="1044.1" y="707.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.09%)</title><rect x="1044.1" y="691.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (10 samples, 0.09%)</title><rect x="1044.1" y="675.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (7 samples, 0.06%)</title><rect x="1044.1" y="659.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1047.1" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (3 samples, 0.03%)</title><rect x="1044.1" y="643.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1047.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="1044.4" y="643.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1047.4" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.04%)</title><rect x="1044.4" y="627.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1047.4" y="638.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.04%)</title><rect x="1044.4" y="611.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1047.4" y="622.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.04%)</title><rect x="1044.4" y="595.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1047.4" y="606.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.04%)</title><rect x="1044.4" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1047.4" y="590.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.04%)</title><rect x="1044.4" y="563.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1047.4" y="574.0"></text>
</g>
<g>
<title>futex_wait (4 samples, 0.04%)</title><rect x="1044.4" y="547.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1047.4" y="558.0"></text>
</g>
<g>
<title>futex_wait_queue_me (3 samples, 0.03%)</title><rect x="1044.5" y="531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1047.5" y="542.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.03%)</title><rect x="1044.5" y="515.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1047.5" y="526.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.03%)</title><rect x="1044.5" y="499.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1047.5" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="1044.5" y="483.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1047.5" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.03%)</title><rect x="1044.8" y="659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1047.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (549 samples, 4.90%)</title><rect x="1045.1" y="739.0" width="57.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1048.1" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (549 samples, 4.90%)</title><rect x="1045.1" y="723.0" width="57.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.1" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (549 samples, 4.90%)</title><rect x="1045.1" y="707.0" width="57.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1048.1" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (549 samples, 4.90%)</title><rect x="1045.1" y="691.0" width="57.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.1" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (7 samples, 0.06%)</title><rect x="1045.9" y="675.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1048.9" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (534 samples, 4.76%)</title><rect x="1046.7" y="675.0" width="56.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1049.7" y="686.0">jdk/in..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.04%)</title><rect x="1046.9" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.9" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (34 samples, 0.30%)</title><rect x="1047.6" y="659.0" width="3.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1050.6" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (8 samples, 0.07%)</title><rect x="1048.7" y="643.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.7" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.04%)</title><rect x="1050.0" y="643.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.0" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.06%)</title><rect x="1050.5" y="643.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1053.5" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (488 samples, 4.35%)</title><rect x="1051.2" y="659.0" width="51.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1054.2" y="670.0">__pth..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (483 samples, 4.31%)</title><rect x="1051.7" y="643.0" width="50.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1054.7" y="654.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (483 samples, 4.31%)</title><rect x="1051.7" y="627.0" width="50.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1054.7" y="638.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_futex (479 samples, 4.27%)</title><rect x="1052.0" y="611.0" width="50.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1055.0" y="622.0">__x64..</text>
</g>
<g>
<title>do_futex (477 samples, 4.25%)</title><rect x="1052.2" y="595.0" width="50.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1055.2" y="606.0">do_fu..</text>
</g>
<g>
<title>futex_wake (477 samples, 4.25%)</title><rect x="1052.2" y="579.0" width="50.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1055.2" y="590.0">futex..</text>
</g>
<g>
<title>mark_wake_futex (6 samples, 0.05%)</title><rect x="1054.3" y="563.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1057.3" y="574.0"></text>
</g>
<g>
<title>wake_up_q (449 samples, 4.00%)</title><rect x="1055.1" y="563.0" width="47.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1058.1" y="574.0">wake..</text>
</g>
<g>
<title>try_to_wake_up (449 samples, 4.00%)</title><rect x="1055.1" y="547.0" width="47.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1058.1" y="558.0">try_..</text>
</g>
<g>
<title>__lock_text_start (449 samples, 4.00%)</title><rect x="1055.1" y="531.0" width="47.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1058.1" y="542.0">__lo..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (23 samples, 0.21%)</title><rect x="1102.9" y="771.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1105.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.04%)</title><rect x="1102.9" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1105.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4 samples, 0.04%)</title><rect x="1102.9" y="739.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1105.9" y="750.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4 samples, 0.04%)</title><rect x="1102.9" y="723.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.04%)</title><rect x="1102.9" y="707.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1105.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (19 samples, 0.17%)</title><rect x="1103.3" y="755.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1106.3" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ModHashingImpl.identifyByKey (19 samples, 0.17%)</title><rect x="1103.3" y="739.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1106.3" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction$Murmur3_32Hasher.putBytes (19 samples, 0.17%)</title><rect x="1103.3" y="723.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1106.3" y="734.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.04%)</title><rect x="1104.8" y="707.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1107.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (40 samples, 0.36%)</title><rect x="1105.3" y="771.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (33 samples, 0.29%)</title><rect x="1106.0" y="755.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1109.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (26 samples, 0.23%)</title><rect x="1106.8" y="739.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1109.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (4 samples, 0.04%)</title><rect x="1107.6" y="723.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1110.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.12%)</title><rect x="1108.0" y="723.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1111.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.12%)</title><rect x="1108.0" y="707.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1111.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.12%)</title><rect x="1108.0" y="691.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 0.12%)</title><rect x="1108.0" y="675.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (3 samples, 0.03%)</title><rect x="1109.1" y="659.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1112.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (84 samples, 0.75%)</title><rect x="1109.5" y="803.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1112.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (84 samples, 0.75%)</title><rect x="1109.5" y="787.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1112.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (28 samples, 0.25%)</title><rect x="1109.5" y="771.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1112.5" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="1112.1" y="755.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1115.1" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (56 samples, 0.50%)</title><rect x="1112.4" y="771.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1115.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (56 samples, 0.50%)</title><rect x="1112.4" y="755.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1115.4" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (56 samples, 0.50%)</title><rect x="1112.4" y="739.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1115.4" y="750.0"></text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (30 samples, 0.27%)</title><rect x="1113.1" y="723.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1116.1" y="734.0"></text>
</g>
<g>
<title>itable stub (20 samples, 0.18%)</title><rect x="1116.2" y="723.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1119.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7 samples, 0.06%)</title><rect x="1118.3" y="803.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1121.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.06%)</title><rect x="1118.3" y="787.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1121.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.06%)</title><rect x="1118.3" y="771.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1121.3" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.04%)</title><rect x="1118.7" y="755.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1121.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.04%)</title><rect x="1118.7" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1118.8" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1118.8" y="707.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.8" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="1118.8" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (95 samples, 0.85%)</title><rect x="1119.1" y="835.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1122.1" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (14 samples, 0.12%)</title><rect x="1120.1" y="819.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1123.1" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.04%)</title><rect x="1120.2" y="803.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (4 samples, 0.04%)</title><rect x="1120.3" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.3" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1120.4" y="771.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="1120.4" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.4" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="1120.4" y="739.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1123.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="1120.8" y="803.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1123.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (8 samples, 0.07%)</title><rect x="1120.8" y="787.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1123.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.07%)</title><rect x="1120.8" y="771.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1123.8" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1121.2" y="755.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1124.2" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (41 samples, 0.37%)</title><rect x="1121.6" y="819.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1124.6" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (39 samples, 0.35%)</title><rect x="1121.8" y="803.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.8" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="1125.2" y="787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.2" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1125.2" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1125.2" y="755.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="1125.2" y="739.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1125.6" y="787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1128.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1125.6" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1128.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (3 samples, 0.03%)</title><rect x="1125.6" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1128.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="1125.6" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.6" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1125.6" y="723.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="1125.6" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (30 samples, 0.27%)</title><rect x="1125.9" y="819.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1128.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (4 samples, 0.04%)</title><rect x="1129.1" y="835.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1132.1" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.04%)</title><rect x="1129.1" y="819.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.1" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.04%)</title><rect x="1129.1" y="803.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.04%)</title><rect x="1129.1" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.1" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.04%)</title><rect x="1129.1" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="1129.1" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (33 samples, 0.29%)</title><rect x="1129.5" y="835.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1132.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (28 samples, 0.25%)</title><rect x="1129.9" y="819.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1132.9" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (28 samples, 0.25%)</title><rect x="1129.9" y="803.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1132.9" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (72 samples, 0.64%)</title><rect x="1133.0" y="835.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1136.0" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (46 samples, 0.41%)</title><rect x="1135.7" y="819.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1138.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.06%)</title><rect x="1138.6" y="803.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.05%)</title><rect x="1138.8" y="787.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.8" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.04%)</title><rect x="1138.9" y="771.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.9" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.04%)</title><rect x="1138.9" y="755.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.9" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.04%)</title><rect x="1139.0" y="739.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="1139.1" y="723.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.04%)</title><rect x="1139.5" y="803.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.5" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.04%)</title><rect x="1139.5" y="787.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.03%)</title><rect x="1139.6" y="771.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="1139.9" y="803.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1142.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.05%)</title><rect x="1139.9" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1142.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6 samples, 0.05%)</title><rect x="1139.9" y="771.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1142.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.04%)</title><rect x="1139.9" y="755.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.9" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.04%)</title><rect x="1140.0" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.0" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (402 samples, 3.58%)</title><rect x="1140.6" y="851.0" width="42.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1143.6" y="862.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (359 samples, 3.20%)</title><rect x="1142.0" y="835.0" width="37.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1145.0" y="846.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (83 samples, 0.74%)</title><rect x="1143.7" y="819.0" width="8.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1146.7" y="830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.04%)</title><rect x="1144.1" y="803.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1147.1" y="814.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (9 samples, 0.08%)</title><rect x="1144.6" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.6" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (56 samples, 0.50%)</title><rect x="1146.0" y="803.0" width="5.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1149.0" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (6 samples, 0.05%)</title><rect x="1147.5" y="787.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.5" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (36 samples, 0.32%)</title><rect x="1148.1" y="787.0" width="3.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1151.1" y="798.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (5 samples, 0.04%)</title><rect x="1151.9" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="814.0"></text>
</g>
<g>
<title>__recv (250 samples, 2.23%)</title><rect x="1152.4" y="819.0" width="26.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1155.4" y="830.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (231 samples, 2.06%)</title><rect x="1154.3" y="803.0" width="24.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1157.3" y="814.0">e..</text>
</g>
<g>
<title>do_syscall_64 (230 samples, 2.05%)</title><rect x="1154.4" y="787.0" width="24.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1157.4" y="798.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (211 samples, 1.88%)</title><rect x="1155.9" y="771.0" width="22.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1158.9" y="782.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (204 samples, 1.82%)</title><rect x="1155.9" y="755.0" width="21.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1158.9" y="766.0">_..</text>
</g>
<g>
<title>sock_recvmsg (159 samples, 1.42%)</title><rect x="1157.3" y="739.0" width="16.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1160.3" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (5 samples, 0.04%)</title><rect x="1157.4" y="723.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1160.4" y="734.0"></text>
</g>
<g>
<title>inet6_recvmsg (122 samples, 1.09%)</title><rect x="1157.9" y="723.0" width="12.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1160.9" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (120 samples, 1.07%)</title><rect x="1158.1" y="707.0" width="12.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1161.1" y="718.0"></text>
</g>
<g>
<title>__kfree_skb (17 samples, 0.15%)</title><rect x="1161.4" y="691.0" width="1.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1164.4" y="702.0"></text>
</g>
<g>
<title>skb_release_all (15 samples, 0.13%)</title><rect x="1161.6" y="675.0" width="1.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1164.6" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (10 samples, 0.09%)</title><rect x="1161.7" y="659.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1164.7" y="670.0"></text>
</g>
<g>
<title>dst_release (10 samples, 0.09%)</title><rect x="1161.7" y="643.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1164.7" y="654.0"></text>
</g>
<g>
<title>sock_rfree (4 samples, 0.04%)</title><rect x="1162.7" y="659.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1165.7" y="670.0"></text>
</g>
<g>
<title>lock_sock_nested (8 samples, 0.07%)</title><rect x="1163.7" y="691.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.04%)</title><rect x="1164.0" y="675.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1167.0" y="686.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (5 samples, 0.04%)</title><rect x="1164.0" y="659.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.04%)</title><rect x="1164.5" y="691.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1167.5" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (39 samples, 0.35%)</title><rect x="1165.1" y="691.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1168.1" y="702.0"></text>
</g>
<g>
<title>__skb_datagram_iter (38 samples, 0.34%)</title><rect x="1165.2" y="675.0" width="4.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1168.2" y="686.0"></text>
</g>
<g>
<title>simple_copy_to_iter (27 samples, 0.24%)</title><rect x="1166.3" y="659.0" width="2.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1169.3" y="670.0"></text>
</g>
<g>
<title>__check_object_size (17 samples, 0.15%)</title><rect x="1166.3" y="643.0" width="1.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1169.3" y="654.0"></text>
</g>
<g>
<title>__virt_addr_valid (7 samples, 0.06%)</title><rect x="1167.4" y="627.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1170.4" y="638.0"></text>
</g>
<g>
<title>_copy_to_iter (8 samples, 0.07%)</title><rect x="1168.2" y="643.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1171.2" y="654.0"></text>
</g>
<g>
<title>copy_user_generic_string (7 samples, 0.06%)</title><rect x="1168.2" y="627.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1171.2" y="638.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (7 samples, 0.06%)</title><rect x="1169.4" y="691.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1172.4" y="702.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (5 samples, 0.04%)</title><rect x="1170.2" y="691.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1173.2" y="702.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.04%)</title><rect x="1170.2" y="675.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1173.2" y="686.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.04%)</title><rect x="1170.3" y="659.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1173.3" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (31 samples, 0.28%)</title><rect x="1170.7" y="723.0" width="3.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (28 samples, 0.25%)</title><rect x="1171.1" y="707.0" width="2.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1174.1" y="718.0"></text>
</g>
<g>
<title>aa_sk_perm (27 samples, 0.24%)</title><rect x="1171.2" y="691.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1174.2" y="702.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (12 samples, 0.11%)</title><rect x="1172.7" y="675.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1175.7" y="686.0"></text>
</g>
<g>
<title>aa_profile_af_perm (7 samples, 0.06%)</title><rect x="1173.3" y="659.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1176.3" y="670.0"></text>
</g>
<g>
<title>sockfd_lookup_light (32 samples, 0.29%)</title><rect x="1174.0" y="739.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1177.0" y="750.0"></text>
</g>
<g>
<title>__fdget (19 samples, 0.17%)</title><rect x="1174.2" y="723.0" width="2.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>__fget_light (19 samples, 0.17%)</title><rect x="1174.2" y="707.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>__fget (18 samples, 0.16%)</title><rect x="1174.3" y="691.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1177.3" y="702.0"></text>
</g>
<g>
<title>__fget_light (11 samples, 0.10%)</title><rect x="1176.2" y="723.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>import_single_range (3 samples, 0.03%)</title><rect x="1177.5" y="755.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1180.5" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.04%)</title><rect x="1178.1" y="771.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1181.1" y="782.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.04%)</title><rect x="1178.1" y="755.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1181.1" y="766.0"></text>
</g>
<g>
<title>__schedule (5 samples, 0.04%)</title><rect x="1178.1" y="739.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1181.1" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.03%)</title><rect x="1178.3" y="723.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.08%)</title><rect x="1178.7" y="819.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1181.7" y="830.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (30 samples, 0.27%)</title><rect x="1179.8" y="835.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1182.8" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (32 samples, 0.29%)</title><rect x="1182.9" y="883.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="894.0"></text>
</g>
<g>
<title>gettimeofday (17 samples, 0.15%)</title><rect x="1184.5" y="867.0" width="1.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>[vdso] (15 samples, 0.13%)</title><rect x="1184.7" y="851.0" width="1.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1187.7" y="862.0"></text>
</g>
<g>
<title>start_thread (35 samples, 0.31%)</title><rect x="1186.3" y="899.0" width="3.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1189.3" y="910.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (35 samples, 0.31%)</title><rect x="1186.3" y="883.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1189.3" y="894.0"></text>
</g>
<g>
<title>Thread::call_run() (35 samples, 0.31%)</title><rect x="1186.3" y="867.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.3" y="878.0"></text>
</g>
<g>
<title>GangWorker::loop() (22 samples, 0.20%)</title><rect x="1186.3" y="851.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="862.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (3 samples, 0.03%)</title><rect x="1186.3" y="835.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="846.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.11%)</title><rect x="1186.6" y="835.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 0.08%)</title><rect x="1186.6" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.05%)</title><rect x="1186.9" y="803.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1189.9" y="814.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (5 samples, 0.04%)</title><rect x="1187.9" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.04%)</title><rect x="1187.9" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.9" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (3 samples, 0.03%)</title><rect x="1188.1" y="803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.1" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (3 samples, 0.03%)</title><rect x="1188.1" y="787.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.1" y="798.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (8 samples, 0.07%)</title><rect x="1188.6" y="851.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (8 samples, 0.07%)</title><rect x="1188.6" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (8 samples, 0.07%)</title><rect x="1188.6" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.07%)</title><rect x="1188.6" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (8 samples, 0.07%)</title><rect x="1188.6" y="787.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (4 samples, 0.04%)</title><rect x="1188.6" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (3 samples, 0.03%)</title><rect x="1188.7" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.7" y="766.0"></text>
</g>
<g>
<title>Compile::Optimize() (3 samples, 0.03%)</title><rect x="1189.1" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="782.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.04%)</title><rect x="1189.5" y="851.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.04%)</title><rect x="1189.5" y="835.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (3 samples, 0.03%)</title><rect x="1189.5" y="819.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
</g>
</svg>
