<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (7,992 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.06%)</title><rect x="10.0" y="915.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (4 samples, 0.05%)</title><rect x="10.1" y="899.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.1" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.04%)</title><rect x="10.1" y="883.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.1" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.03%)</title><rect x="10.1" y="867.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="13.1" y="878.0"></text>
</g>
<g>
<title>[no_Java_frame] (2 samples, 0.03%)</title><rect x="10.7" y="915.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="13.7" y="926.0"></text>
</g>
<g>
<title>[not_walkable_Java] (21 samples, 0.26%)</title><rect x="11.0" y="915.0" width="3.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="14.0" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (20 samples, 0.25%)</title><rect x="11.2" y="899.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (19 samples, 0.24%)</title><rect x="11.2" y="883.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title><rect x="11.2" y="867.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (8 samples, 0.10%)</title><rect x="11.5" y="867.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.5" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (4 samples, 0.05%)</title><rect x="11.5" y="851.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.5" y="862.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.05%)</title><rect x="12.1" y="851.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.1" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (9 samples, 0.11%)</title><rect x="12.7" y="867.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="15.7" y="878.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (2 samples, 0.03%)</title><rect x="12.8" y="851.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.8" y="862.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.04%)</title><rect x="13.5" y="851.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="16.5" y="862.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (2 samples, 0.03%)</title><rect x="13.7" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.14%)</title><rect x="14.1" y="915.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="17.1" y="926.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (9 samples, 0.11%)</title><rect x="14.4" y="899.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="17.4" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (9 samples, 0.11%)</title><rect x="14.4" y="883.0" width="1.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="17.4" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (9 samples, 0.11%)</title><rect x="14.4" y="867.0" width="1.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="17.4" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.11%)</title><rect x="14.4" y="851.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="17.4" y="862.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.10%)</title><rect x="14.4" y="835.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="17.4" y="846.0"></text>
</g>
<g>
<title>futex_wait (7 samples, 0.09%)</title><rect x="14.6" y="819.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="17.6" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (7 samples, 0.09%)</title><rect x="14.6" y="803.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="17.6" y="814.0"></text>
</g>
<g>
<title>hrtimer_sleeper_start_expires (2 samples, 0.03%)</title><rect x="14.6" y="787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="17.6" y="798.0"></text>
</g>
<g>
<title>hrtimer_start_range_ns (2 samples, 0.03%)</title><rect x="14.6" y="771.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="17.6" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="14.6" y="755.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="17.6" y="766.0"></text>
</g>
<g>
<title>schedule (5 samples, 0.06%)</title><rect x="14.9" y="787.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="17.9" y="798.0"></text>
</g>
<g>
<title>__sched_text_start (5 samples, 0.06%)</title><rect x="14.9" y="771.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="17.9" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (5 samples, 0.06%)</title><rect x="14.9" y="755.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="17.9" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (18 samples, 0.23%)</title><rect x="15.8" y="915.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="18.8" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="15.8" y="899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.8" y="910.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (2 samples, 0.03%)</title><rect x="15.8" y="883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.8" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_signal (14 samples, 0.18%)</title><rect x="16.3" y="899.0" width="2.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="19.3" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (14 samples, 0.18%)</title><rect x="16.3" y="883.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="19.3" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 0.18%)</title><rect x="16.3" y="867.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="19.3" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (13 samples, 0.16%)</title><rect x="16.3" y="851.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="19.3" y="862.0"></text>
</g>
<g>
<title>do_futex (13 samples, 0.16%)</title><rect x="16.3" y="835.0" width="2.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="19.3" y="846.0"></text>
</g>
<g>
<title>futex_wake (13 samples, 0.16%)</title><rect x="16.3" y="819.0" width="2.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="19.3" y="830.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 0.15%)</title><rect x="16.5" y="803.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="19.5" y="814.0"></text>
</g>
<g>
<title>try_to_wake_up (12 samples, 0.15%)</title><rect x="16.5" y="787.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="19.5" y="798.0"></text>
</g>
<g>
<title>__lock_text_start (12 samples, 0.15%)</title><rect x="16.5" y="771.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="19.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Thread.run (6,180 samples, 77.33%)</title><rect x="18.6" y="915.0" width="912.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.6" y="926.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (6,180 samples, 77.33%)</title><rect x="18.6" y="899.0" width="912.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.6" y="910.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (6,180 samples, 77.33%)</title><rect x="18.6" y="883.0" width="912.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="894.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (22 samples, 0.28%)</title><rect x="18.6" y="867.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.28%)</title><rect x="18.6" y="851.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 0.28%)</title><rect x="18.6" y="835.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.03%)</title><rect x="18.7" y="819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="21.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.24%)</title><rect x="19.0" y="819.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$76/128399682.run (2 samples, 0.03%)</title><rect x="21.4" y="803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (571 samples, 7.14%)</title><rect x="21.8" y="867.0" width="84.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.8" y="878.0">java/util/..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (541 samples, 6.77%)</title><rect x="26.2" y="851.0" width="79.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.2" y="862.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (321 samples, 4.02%)</title><rect x="26.4" y="835.0" width="47.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.4" y="846.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.05%)</title><rect x="26.5" y="819.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.05%)</title><rect x="26.5" y="803.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.05%)</title><rect x="26.5" y="787.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="29.5" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title><rect x="26.5" y="771.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="26.7" y="755.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="29.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="26.7" y="739.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="29.7" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="26.7" y="723.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="29.7" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="26.7" y="707.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="29.7" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="26.7" y="691.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="29.7" y="702.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="26.7" y="675.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="29.7" y="686.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.03%)</title><rect x="26.7" y="659.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="29.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (88 samples, 1.10%)</title><rect x="27.1" y="819.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 1.10%)</title><rect x="27.1" y="803.0" width="13.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (81 samples, 1.01%)</title><rect x="27.1" y="787.0" width="12.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (81 samples, 1.01%)</title><rect x="27.1" y="771.0" width="12.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="30.1" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (81 samples, 1.01%)</title><rect x="27.1" y="755.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="30.1" y="766.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.08%)</title><rect x="27.1" y="739.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="30.1" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.04%)</title><rect x="27.1" y="723.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.1" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="27.7" y="723.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="30.7" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (74 samples, 0.93%)</title><rect x="28.0" y="739.0" width="10.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="31.0" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (74 samples, 0.93%)</title><rect x="28.0" y="723.0" width="10.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="31.0" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (74 samples, 0.93%)</title><rect x="28.0" y="707.0" width="10.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="31.0" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (67 samples, 0.84%)</title><rect x="28.5" y="691.0" width="9.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="31.5" y="702.0"></text>
</g>
<g>
<title>do_futex (67 samples, 0.84%)</title><rect x="28.5" y="675.0" width="9.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="31.5" y="686.0"></text>
</g>
<g>
<title>futex_wake (66 samples, 0.83%)</title><rect x="28.5" y="659.0" width="9.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="31.5" y="670.0"></text>
</g>
<g>
<title>wake_up_q (62 samples, 0.78%)</title><rect x="29.0" y="643.0" width="9.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="32.0" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (62 samples, 0.78%)</title><rect x="29.0" y="627.0" width="9.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="32.0" y="638.0"></text>
</g>
<g>
<title>__lock_text_start (62 samples, 0.78%)</title><rect x="29.0" y="611.0" width="9.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="32.0" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="38.3" y="691.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="41.3" y="702.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.05%)</title><rect x="38.3" y="675.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="41.3" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.05%)</title><rect x="38.3" y="659.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="41.3" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.04%)</title><rect x="38.5" y="643.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="41.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.09%)</title><rect x="39.1" y="787.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (226 samples, 2.83%)</title><rect x="40.1" y="819.0" width="33.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="43.1" y="830.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (224 samples, 2.80%)</title><rect x="40.4" y="803.0" width="33.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.4" y="814.0">jd..</text>
</g>
<g>
<title>Unsafe_Park (43 samples, 0.54%)</title><rect x="41.2" y="787.0" width="6.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="44.2" y="798.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.04%)</title><rect x="41.9" y="771.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="44.9" y="782.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (13 samples, 0.16%)</title><rect x="42.5" y="771.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="45.5" y="782.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.05%)</title><rect x="43.5" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.5" y="766.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="44.1" y="755.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="47.1" y="766.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.04%)</title><rect x="44.7" y="771.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="47.7" y="782.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.10%)</title><rect x="45.1" y="771.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="48.1" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.10%)</title><rect x="45.1" y="755.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="48.1" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (7 samples, 0.09%)</title><rect x="45.3" y="739.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="48.3" y="750.0"></text>
</g>
<g>
<title>__x64_sys_futex (6 samples, 0.08%)</title><rect x="45.4" y="723.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="48.4" y="734.0"></text>
</g>
<g>
<title>do_futex (6 samples, 0.08%)</title><rect x="45.4" y="707.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="48.4" y="718.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 0.08%)</title><rect x="45.4" y="691.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="48.4" y="702.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.04%)</title><rect x="45.9" y="675.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="48.9" y="686.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (2 samples, 0.03%)</title><rect x="46.0" y="659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="49.0" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="46.5" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="49.5" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.05%)</title><rect x="46.9" y="771.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="49.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (172 samples, 2.15%)</title><rect x="47.5" y="787.0" width="25.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="50.5" y="798.0">[..</text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (3 samples, 0.04%)</title><rect x="47.5" y="771.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="50.5" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_wait (163 samples, 2.04%)</title><rect x="48.1" y="771.0" width="24.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="51.1" y="782.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (153 samples, 1.91%)</title><rect x="49.4" y="755.0" width="22.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="52.4" y="766.0">e..</text>
</g>
<g>
<title>do_syscall_64 (152 samples, 1.90%)</title><rect x="49.6" y="739.0" width="22.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="52.6" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (151 samples, 1.89%)</title><rect x="49.7" y="723.0" width="22.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="52.7" y="734.0">_..</text>
</g>
<g>
<title>do_futex (148 samples, 1.85%)</title><rect x="50.2" y="707.0" width="21.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="53.2" y="718.0">d..</text>
</g>
<g>
<title>futex_wait (148 samples, 1.85%)</title><rect x="50.2" y="691.0" width="21.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="53.2" y="702.0">f..</text>
</g>
<g>
<title>futex_wait_queue_me (134 samples, 1.68%)</title><rect x="50.5" y="675.0" width="19.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="53.5" y="686.0"></text>
</g>
<g>
<title>schedule (131 samples, 1.64%)</title><rect x="50.9" y="659.0" width="19.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="53.9" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (129 samples, 1.61%)</title><rect x="51.2" y="643.0" width="19.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="54.2" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (126 samples, 1.58%)</title><rect x="51.6" y="627.0" width="18.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="54.6" y="638.0"></text>
</g>
<g>
<title>futex_wait_setup (9 samples, 0.11%)</title><rect x="70.2" y="675.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="73.2" y="686.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.03%)</title><rect x="71.6" y="675.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="74.6" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.04%)</title><rect x="72.2" y="771.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="75.2" y="782.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.03%)</title><rect x="72.6" y="771.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="75.6" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.05%)</title><rect x="72.9" y="787.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="75.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 0.15%)</title><rect x="73.8" y="835.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 0.15%)</title><rect x="73.8" y="819.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (12 samples, 0.15%)</title><rect x="73.8" y="803.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="76.8" y="814.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="75.3" y="787.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="78.3" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="75.3" y="771.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="78.3" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="75.3" y="755.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="78.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (207 samples, 2.59%)</title><rect x="75.6" y="835.0" width="30.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="78.6" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (207 samples, 2.59%)</title><rect x="75.6" y="819.0" width="30.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="78.6" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (207 samples, 2.59%)</title><rect x="75.6" y="803.0" width="30.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.6" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (207 samples, 2.59%)</title><rect x="75.6" y="787.0" width="30.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.6" y="798.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (200 samples, 2.50%)</title><rect x="76.4" y="771.0" width="29.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.4" y="782.0">jd..</text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 0.18%)</title><rect x="76.4" y="755.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="79.4" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.04%)</title><rect x="76.7" y="739.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="79.7" y="750.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="77.2" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="80.2" y="750.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.04%)</title><rect x="77.9" y="739.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="80.9" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (186 samples, 2.33%)</title><rect x="78.5" y="755.0" width="27.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="81.5" y="766.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (185 samples, 2.31%)</title><rect x="78.7" y="739.0" width="27.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="81.7" y="750.0">e..</text>
</g>
<g>
<title>do_syscall_64 (185 samples, 2.31%)</title><rect x="78.7" y="723.0" width="27.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="81.7" y="734.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (179 samples, 2.24%)</title><rect x="79.1" y="707.0" width="26.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="82.1" y="718.0">_..</text>
</g>
<g>
<title>do_futex (179 samples, 2.24%)</title><rect x="79.1" y="691.0" width="26.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="82.1" y="702.0">d..</text>
</g>
<g>
<title>futex_wake (179 samples, 2.24%)</title><rect x="79.1" y="675.0" width="26.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="82.1" y="686.0">f..</text>
</g>
<g>
<title>mark_wake_futex (2 samples, 0.03%)</title><rect x="79.8" y="659.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="82.8" y="670.0"></text>
</g>
<g>
<title>wake_up_q (171 samples, 2.14%)</title><rect x="80.3" y="659.0" width="25.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="83.3" y="670.0">w..</text>
</g>
<g>
<title>try_to_wake_up (170 samples, 2.13%)</title><rect x="80.4" y="643.0" width="25.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="83.4" y="654.0">t..</text>
</g>
<g>
<title>__lock_text_start (170 samples, 2.13%)</title><rect x="80.4" y="627.0" width="25.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="83.4" y="638.0">_..</text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="105.5" y="707.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="108.5" y="718.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="105.5" y="691.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="108.5" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="105.5" y="675.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="108.5" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.04%)</title><rect x="105.5" y="659.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="108.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$75/1621478068.run (3,117 samples, 39.00%)</title><rect x="106.1" y="867.0" width="460.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.1" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$7..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$asyncPut$3 (3,116 samples, 38.99%)</title><rect x="106.3" y="851.0" width="460.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="109.3" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$as..</text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.putInternal (3,116 samples, 38.99%)</title><rect x="106.3" y="835.0" width="460.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="109.3" y="846.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.putInternal</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.08%)</title><rect x="107.3" y="819.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="110.3" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (958 samples, 11.99%)</title><rect x="108.2" y="819.0" width="141.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="111.2" y="830.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.10%)</title><rect x="110.8" y="803.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="113.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="110.8" y="787.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="113.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.10%)</title><rect x="110.8" y="771.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.8" y="782.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="111.3" y="755.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="114.3" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.04%)</title><rect x="111.6" y="755.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="114.6" y="766.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="111.6" y="739.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="114.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.04%)</title><rect x="111.6" y="723.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="114.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (916 samples, 11.46%)</title><rect x="112.0" y="803.0" width="135.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.0" y="814.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (26 samples, 0.33%)</title><rect x="112.2" y="787.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="115.2" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (4 samples, 0.05%)</title><rect x="114.1" y="771.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.05%)</title><rect x="114.1" y="755.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="117.1" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.05%)</title><rect x="114.1" y="739.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="117.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title><rect x="114.1" y="723.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="117.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.04%)</title><rect x="114.2" y="707.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="117.2" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="114.4" y="691.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="117.4" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.08%)</title><rect x="114.7" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="114.7" y="755.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="114.7" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="114.7" y="723.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="117.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.08%)</title><rect x="114.7" y="707.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="117.7" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title><rect x="115.1" y="691.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="118.1" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="115.6" y="771.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="118.6" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="115.6" y="755.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="118.6" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="115.6" y="739.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="118.6" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (889 samples, 11.12%)</title><rect x="116.0" y="787.0" width="131.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.0" y="798.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session.write (888 samples, 11.11%)</title><rect x="116.2" y="771.0" width="131.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="119.2" y="782.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (885 samples, 11.07%)</title><rect x="116.6" y="755.0" width="130.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.6" y="766.0">one/nio/net/Sess..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (883 samples, 11.05%)</title><rect x="116.9" y="739.0" width="130.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="119.9" y="750.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (31 samples, 0.39%)</title><rect x="117.5" y="723.0" width="4.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="120.5" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="119.7" y="707.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="122.7" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (9 samples, 0.11%)</title><rect x="120.4" y="707.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="123.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="120.6" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="123.6" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.05%)</title><rect x="121.0" y="691.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="124.0" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="121.3" y="675.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="124.3" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="121.3" y="659.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="124.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="121.3" y="643.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="124.3" y="654.0"></text>
</g>
<g>
<title>send (848 samples, 10.61%)</title><rect x="122.1" y="723.0" width="125.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="125.1" y="734.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (844 samples, 10.56%)</title><rect x="122.5" y="707.0" width="124.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="125.5" y="718.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (843 samples, 10.55%)</title><rect x="122.7" y="691.0" width="124.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="125.7" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (835 samples, 10.45%)</title><rect x="123.4" y="675.0" width="123.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="126.4" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (833 samples, 10.42%)</title><rect x="123.4" y="659.0" width="123.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="126.4" y="670.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (823 samples, 10.30%)</title><rect x="123.8" y="643.0" width="121.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="126.8" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.06%)</title><rect x="124.0" y="627.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="127.0" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (806 samples, 10.09%)</title><rect x="124.7" y="627.0" width="119.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="127.7" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="124.9" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="127.9" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg (803 samples, 10.05%)</title><rect x="125.2" y="611.0" width="118.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="128.2" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.04%)</title><rect x="125.3" y="595.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="128.3" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.05%)</title><rect x="126.1" y="595.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="129.1" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (790 samples, 9.88%)</title><rect x="126.8" y="595.0" width="116.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="129.8" y="606.0">tcp_sendmsg_lo..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="127.8" y="579.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="130.8" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="127.8" y="563.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="130.8" y="574.0"></text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.06%)</title><rect x="128.1" y="579.0" width="0.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="131.1" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.05%)</title><rect x="128.1" y="563.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="131.1" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (13 samples, 0.16%)</title><rect x="128.9" y="579.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="131.9" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (13 samples, 0.16%)</title><rect x="128.9" y="563.0" width="1.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="131.9" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (55 samples, 0.69%)</title><rect x="130.8" y="579.0" width="8.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="133.8" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (52 samples, 0.65%)</title><rect x="131.2" y="563.0" width="7.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="134.2" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (25 samples, 0.31%)</title><rect x="131.5" y="547.0" width="3.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="134.5" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (11 samples, 0.14%)</title><rect x="131.5" y="531.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="134.5" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (2 samples, 0.03%)</title><rect x="132.5" y="515.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="135.5" y="526.0"></text>
</g>
<g>
<title>memset (13 samples, 0.16%)</title><rect x="133.3" y="531.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="136.3" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.08%)</title><rect x="135.2" y="547.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="138.2" y="558.0"></text>
</g>
<g>
<title>ksize (9 samples, 0.11%)</title><rect x="136.1" y="547.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="139.1" y="558.0"></text>
</g>
<g>
<title>__ksize (9 samples, 0.11%)</title><rect x="136.1" y="531.0" width="1.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="139.1" y="542.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.04%)</title><rect x="137.4" y="547.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="140.4" y="558.0"></text>
</g>
<g>
<title>memset (7 samples, 0.09%)</title><rect x="137.9" y="547.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="140.9" y="558.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.05%)</title><rect x="138.9" y="579.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="141.9" y="590.0"></text>
</g>
<g>
<title>tcp_push (692 samples, 8.66%)</title><rect x="139.6" y="579.0" width="102.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="142.6" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (691 samples, 8.65%)</title><rect x="139.6" y="563.0" width="102.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="142.6" y="574.0">__tcp_push_p..</text>
</g>
<g>
<title>ktime_get (3 samples, 0.04%)</title><rect x="139.8" y="547.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="142.8" y="558.0"></text>
</g>
<g>
<title>tcp_write_xmit (686 samples, 8.58%)</title><rect x="140.4" y="547.0" width="101.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="143.4" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (660 samples, 8.26%)</title><rect x="141.6" y="531.0" width="97.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="144.6" y="542.0">__tcp_trans..</text>
</g>
<g>
<title>ip_queue_xmit (645 samples, 8.07%)</title><rect x="143.0" y="515.0" width="95.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="146.0" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (645 samples, 8.07%)</title><rect x="143.0" y="499.0" width="95.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="146.0" y="510.0">__ip_queue_..</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.04%)</title><rect x="143.3" y="483.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.3" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.04%)</title><rect x="143.3" y="467.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.3" y="478.0"></text>
</g>
<g>
<title>ip_local_out (640 samples, 8.01%)</title><rect x="143.8" y="483.0" width="94.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="146.8" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (4 samples, 0.05%)</title><rect x="143.9" y="467.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.9" y="478.0"></text>
</g>
<g>
<title>ip_send_check (3 samples, 0.04%)</title><rect x="144.1" y="451.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="147.1" y="462.0"></text>
</g>
<g>
<title>ip_output (634 samples, 7.93%)</title><rect x="144.5" y="467.0" width="93.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="147.5" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (633 samples, 7.92%)</title><rect x="144.7" y="451.0" width="93.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="147.7" y="462.0">ip_finish_o..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.04%)</title><rect x="144.9" y="435.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="147.9" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (627 samples, 7.85%)</title><rect x="145.4" y="435.0" width="92.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="148.4" y="446.0">__ip_finish..</text>
</g>
<g>
<title>ip_finish_output2 (626 samples, 7.83%)</title><rect x="145.5" y="419.0" width="92.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="148.5" y="430.0">ip_finish_o..</text>
</g>
<g>
<title>__local_bh_enable_ip (582 samples, 7.28%)</title><rect x="147.8" y="403.0" width="85.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="150.8" y="414.0">__local_bh..</text>
</g>
<g>
<title>do_softirq.part.0 (582 samples, 7.28%)</title><rect x="147.8" y="387.0" width="85.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="150.8" y="398.0">do_softirq..</text>
</g>
<g>
<title>do_softirq_own_stack (579 samples, 7.24%)</title><rect x="148.2" y="371.0" width="85.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="151.2" y="382.0">do_softirq..</text>
</g>
<g>
<title>__softirqentry_text_start (579 samples, 7.24%)</title><rect x="148.2" y="355.0" width="85.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="151.2" y="366.0">__softirqe..</text>
</g>
<g>
<title>net_rx_action (570 samples, 7.13%)</title><rect x="148.9" y="339.0" width="84.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="151.9" y="350.0">net_rx_act..</text>
</g>
<g>
<title>process_backlog (567 samples, 7.09%)</title><rect x="149.4" y="323.0" width="83.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="152.4" y="334.0">process_b..</text>
</g>
<g>
<title>__netif_receive_skb (563 samples, 7.04%)</title><rect x="149.8" y="307.0" width="83.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="152.8" y="318.0">__netif_r..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (563 samples, 7.04%)</title><rect x="149.8" y="291.0" width="83.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="152.8" y="302.0">__netif_r..</text>
</g>
<g>
<title>__netif_receive_skb_core (10 samples, 0.13%)</title><rect x="149.8" y="275.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="152.8" y="286.0"></text>
</g>
<g>
<title>ip_rcv (550 samples, 6.88%)</title><rect x="151.3" y="275.0" width="81.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="154.3" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="151.4" y="259.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="154.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (546 samples, 6.83%)</title><rect x="151.7" y="259.0" width="80.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="154.7" y="270.0">ip_rcv_fi..</text>
</g>
<g>
<title>ip_local_deliver (546 samples, 6.83%)</title><rect x="151.7" y="243.0" width="80.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="154.7" y="254.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (546 samples, 6.83%)</title><rect x="151.7" y="227.0" width="80.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="154.7" y="238.0">ip_local_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (546 samples, 6.83%)</title><rect x="151.7" y="211.0" width="80.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="154.7" y="222.0">ip_protoc..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.03%)</title><rect x="152.0" y="195.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="155.0" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (542 samples, 6.78%)</title><rect x="152.3" y="195.0" width="80.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="155.3" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (26 samples, 0.33%)</title><rect x="154.4" y="179.0" width="3.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="157.4" y="190.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="158.4" y="179.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="161.4" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.08%)</title><rect x="158.7" y="179.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="161.7" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.04%)</title><rect x="158.8" y="163.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="161.8" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (490 samples, 6.13%)</title><rect x="159.7" y="179.0" width="72.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="162.7" y="190.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (6 samples, 0.08%)</title><rect x="160.0" y="163.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="163.0" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (482 samples, 6.03%)</title><rect x="160.9" y="163.0" width="71.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="163.9" y="174.0">tcp_rcv_..</text>
</g>
<g>
<title>tcp_ack (70 samples, 0.88%)</title><rect x="162.4" y="147.0" width="10.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="165.4" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (3 samples, 0.04%)</title><rect x="165.2" y="131.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="168.2" y="142.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="165.6" y="131.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="168.6" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (42 samples, 0.53%)</title><rect x="166.1" y="131.0" width="6.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="169.1" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (31 samples, 0.39%)</title><rect x="166.7" y="115.0" width="4.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="169.7" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (7 samples, 0.09%)</title><rect x="166.8" y="99.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="169.8" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (7 samples, 0.09%)</title><rect x="166.8" y="83.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="169.8" y="94.0"></text>
</g>
<g>
<title>skb_release_all (22 samples, 0.28%)</title><rect x="168.0" y="99.0" width="3.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="171.0" y="110.0"></text>
</g>
<g>
<title>skb_release_data (21 samples, 0.26%)</title><rect x="168.1" y="83.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="171.1" y="94.0"></text>
</g>
<g>
<title>skb_free_head (9 samples, 0.11%)</title><rect x="169.9" y="67.0" width="1.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="172.9" y="78.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.11%)</title><rect x="169.9" y="51.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="172.9" y="62.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.05%)</title><rect x="170.6" y="35.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="173.6" y="46.0"></text>
</g>
<g>
<title>jiffies_to_usecs (2 samples, 0.03%)</title><rect x="171.2" y="115.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="174.2" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.05%)</title><rect x="171.7" y="115.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="174.7" y="126.0"></text>
</g>
<g>
<title>tcp_data_ready (390 samples, 4.88%)</title><rect x="172.7" y="147.0" width="57.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="175.7" y="158.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (389 samples, 4.87%)</title><rect x="172.9" y="131.0" width="57.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="175.9" y="142.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (388 samples, 4.85%)</title><rect x="173.0" y="115.0" width="57.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="176.0" y="126.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (388 samples, 4.85%)</title><rect x="173.0" y="99.0" width="57.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="176.0" y="110.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (387 samples, 4.84%)</title><rect x="173.2" y="83.0" width="57.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="176.2" y="94.0">__lock..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.03%)</title><rect x="230.3" y="147.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="233.3" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.05%)</title><rect x="230.6" y="147.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="233.6" y="158.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.05%)</title><rect x="230.6" y="131.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="233.6" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.03%)</title><rect x="231.3" y="147.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="234.3" y="158.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="231.6" y="147.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="234.6" y="158.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (2 samples, 0.03%)</title><rect x="232.5" y="275.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="235.5" y="286.0"></text>
</g>
<g>
<title>process_backlog (4 samples, 0.05%)</title><rect x="233.1" y="339.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="236.1" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (29 samples, 0.36%)</title><rect x="233.7" y="403.0" width="4.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="236.7" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (29 samples, 0.36%)</title><rect x="233.7" y="387.0" width="4.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="236.7" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (12 samples, 0.15%)</title><rect x="234.9" y="371.0" width="1.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="237.9" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (9 samples, 0.11%)</title><rect x="235.2" y="355.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="238.2" y="366.0"></text>
</g>
<g>
<title>netif_rx (8 samples, 0.10%)</title><rect x="235.3" y="339.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="238.3" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.09%)</title><rect x="235.5" y="323.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="238.5" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.09%)</title><rect x="235.5" y="307.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="238.5" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="236.6" y="371.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="239.6" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (7 samples, 0.09%)</title><rect x="236.9" y="371.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="239.9" y="382.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.04%)</title><rect x="238.3" y="515.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="241.3" y="526.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.04%)</title><rect x="238.3" y="499.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="241.3" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (3 samples, 0.04%)</title><rect x="239.0" y="531.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="242.0" y="542.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.05%)</title><rect x="239.4" y="531.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="242.4" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (7 samples, 0.09%)</title><rect x="240.2" y="531.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="243.2" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.05%)</title><rect x="240.6" y="515.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="243.6" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="240.9" y="499.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="243.9" y="510.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="240.9" y="483.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="243.9" y="494.0"></text>
</g>
<g>
<title>tcp_send_mss (10 samples, 0.13%)</title><rect x="242.0" y="579.0" width="1.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="245.0" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (9 samples, 0.11%)</title><rect x="242.1" y="563.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="245.1" y="574.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="243.1" y="547.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="246.1" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="243.4" y="595.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="246.4" y="606.0"></text>
</g>
<g>
<title>security_socket_sendmsg (10 samples, 0.13%)</title><rect x="243.9" y="627.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="246.9" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.13%)</title><rect x="243.9" y="611.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="246.9" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (10 samples, 0.13%)</title><rect x="243.9" y="595.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="246.9" y="606.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (8 samples, 0.10%)</title><rect x="244.2" y="579.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="247.2" y="590.0"></text>
</g>
<g>
<title>aa_profile_af_perm (4 samples, 0.05%)</title><rect x="244.8" y="563.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="247.8" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.09%)</title><rect x="245.4" y="643.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="248.4" y="654.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.05%)</title><rect x="245.5" y="627.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="248.5" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.05%)</title><rect x="245.5" y="611.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="248.5" y="622.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.05%)</title><rect x="245.5" y="595.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="248.5" y="606.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="246.1" y="627.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="249.1" y="638.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.03%)</title><rect x="246.4" y="659.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="249.4" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="246.7" y="675.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="249.7" y="686.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.04%)</title><rect x="246.7" y="659.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="249.7" y="670.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.04%)</title><rect x="246.7" y="643.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="249.7" y="654.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.04%)</title><rect x="246.7" y="627.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="249.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (14 samples, 0.18%)</title><rect x="247.3" y="803.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.09%)</title><rect x="248.2" y="787.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="251.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title><rect x="248.2" y="771.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.2" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="249.3" y="803.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="252.3" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="249.3" y="787.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="252.3" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="249.3" y="771.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="252.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.upsert (2,143 samples, 26.81%)</title><rect x="249.8" y="819.0" width="316.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.8" y="830.0">ru/mail/polis/dao/kovalkov/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,130 samples, 26.65%)</title><rect x="249.8" y="803.0" width="314.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.8" y="814.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (2,129 samples, 26.64%)</title><rect x="249.9" y="787.0" width="314.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="798.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (1,723 samples, 21.56%)</title><rect x="251.0" y="771.0" width="254.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="254.0" y="782.0">Java_org_rocksdb_RocksDB_put__J_3B..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (4 samples, 0.05%)</title><rect x="251.4" y="755.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="254.4" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (2 samples, 0.03%)</title><rect x="252.0" y="755.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="255.0" y="766.0"></text>
</g>
<g>
<title>cfree (10 samples, 0.13%)</title><rect x="252.3" y="755.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="255.3" y="766.0"></text>
</g>
<g>
<title>operator delete[](void*) (3 samples, 0.04%)</title><rect x="253.9" y="755.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="256.9" y="766.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (5 samples, 0.06%)</title><rect x="254.5" y="755.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="257.5" y="766.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (1,694 samples, 21.20%)</title><rect x="255.2" y="755.0" width="250.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="258.2" y="766.0">rocksdb_put_helper(JNIEnv_*, rock..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="255.8" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="258.8" y="750.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (9 samples, 0.11%)</title><rect x="256.1" y="739.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="259.1" y="750.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (7 samples, 0.09%)</title><rect x="256.4" y="723.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="259.4" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (14 samples, 0.18%)</title><rect x="257.5" y="739.0" width="2.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="260.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="257.9" y="723.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="260.9" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.10%)</title><rect x="258.3" y="723.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="261.3" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,660 samples, 20.77%)</title><rect x="259.5" y="739.0" width="245.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.5" y="750.0">rocksdb::DB::Put(rocksdb::WriteOp..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="259.8" y="723.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,656 samples, 20.72%)</title><rect x="260.1" y="723.0" width="244.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="263.1" y="734.0">rocksdb::DBImpl::Put(rocksdb::Wr..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1,646 samples, 20.60%)</title><rect x="260.1" y="707.0" width="243.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="263.1" y="718.0">rocksdb::DB::Put(rocksdb::WriteO..</text>
</g>
<g>
<title>cfree (8 samples, 0.10%)</title><rect x="260.6" y="691.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="263.6" y="702.0"></text>
</g>
<g>
<title>operator delete(void*) (2 samples, 0.03%)</title><rect x="261.7" y="691.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="264.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (6 samples, 0.08%)</title><rect x="262.0" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="265.0" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (1,567 samples, 19.61%)</title><rect x="262.9" y="691.0" width="231.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="265.9" y="702.0">rocksdb::DBImpl::Write(rocksdb:..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (4 samples, 0.05%)</title><rect x="262.9" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="265.9" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.09%)</title><rect x="263.5" y="675.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="266.5" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (4 samples, 0.05%)</title><rect x="265.0" y="675.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="268.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.03%)</title><rect x="265.6" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="268.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (1,510 samples, 18.89%)</title><rect x="265.9" y="675.0" width="222.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="268.9" y="686.0">rocksdb::DBImpl::WriteImpl(ro..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="271.2" y="659.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="274.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.06%)</title><rect x="271.8" y="659.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="274.8" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="272.1" y="643.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="275.1" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="272.1" y="627.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="275.1" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="272.1" y="611.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="275.1" y="622.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="272.1" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="275.1" y="606.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="272.1" y="579.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="275.1" y="590.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.03%)</title><rect x="272.2" y="563.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="275.2" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.03%)</title><rect x="272.2" y="547.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="275.2" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="272.2" y="531.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="275.2" y="542.0"></text>
</g>
<g>
<title>__sched_yield (39 samples, 0.49%)</title><rect x="272.5" y="659.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="275.5" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (36 samples, 0.45%)</title><rect x="273.0" y="643.0" width="5.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="276.0" y="654.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (4 samples, 0.05%)</title><rect x="273.0" y="627.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="276.0" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (32 samples, 0.40%)</title><rect x="273.6" y="627.0" width="4.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="276.6" y="638.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (25 samples, 0.31%)</title><rect x="274.6" y="611.0" width="3.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="277.6" y="622.0"></text>
</g>
<g>
<title>do_sched_yield (25 samples, 0.31%)</title><rect x="274.6" y="595.0" width="3.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="277.6" y="606.0"></text>
</g>
<g>
<title>schedule (25 samples, 0.31%)</title><rect x="274.6" y="579.0" width="3.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="277.6" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (25 samples, 0.31%)</title><rect x="274.6" y="563.0" width="3.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="277.6" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.10%)</title><rect x="277.1" y="547.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="280.1" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (13 samples, 0.16%)</title><rect x="278.3" y="659.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="281.3" y="670.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="280.2" y="659.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="283.2" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.04%)</title><rect x="280.5" y="659.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="283.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (11 samples, 0.14%)</title><rect x="281.1" y="659.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="284.1" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="282.3" y="643.0" width="0.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="285.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.05%)</title><rect x="282.7" y="659.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="285.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (3 samples, 0.04%)</title><rect x="282.9" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="285.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (2 samples, 0.03%)</title><rect x="283.3" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="286.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (477 samples, 5.97%)</title><rect x="283.6" y="659.0" width="70.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="286.6" y="670.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (5 samples, 0.06%)</title><rect x="284.6" y="643.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="287.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (2 samples, 0.03%)</title><rect x="285.1" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="288.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (450 samples, 5.63%)</title><rect x="285.4" y="643.0" width="66.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="288.4" y="654.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (439 samples, 5.49%)</title><rect x="286.7" y="627.0" width="64.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="289.7" y="638.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (21 samples, 0.26%)</title><rect x="288.0" y="611.0" width="3.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="291.0" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.06%)</title><rect x="290.4" y="595.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="293.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.06%)</title><rect x="290.4" y="579.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="293.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.06%)</title><rect x="290.4" y="563.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="293.4" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (375 samples, 4.69%)</title><rect x="291.3" y="611.0" width="55.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="294.3" y="622.0">rocks..</text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.05%)</title><rect x="292.0" y="595.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="295.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (3 samples, 0.04%)</title><rect x="292.9" y="595.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="295.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (359 samples, 4.49%)</title><rect x="293.5" y="595.0" width="53.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="296.5" y="606.0">rocks..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="294.1" y="579.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="297.1" y="590.0"></text>
</g>
<g>
<title>__write (350 samples, 4.38%)</title><rect x="294.5" y="579.0" width="51.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="297.5" y="590.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (343 samples, 4.29%)</title><rect x="295.6" y="563.0" width="50.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="298.6" y="574.0">entry..</text>
</g>
<g>
<title>__x64_sys_write (4 samples, 0.05%)</title><rect x="295.6" y="547.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="298.6" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (339 samples, 4.24%)</title><rect x="296.1" y="547.0" width="50.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="299.1" y="558.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_write (325 samples, 4.07%)</title><rect x="297.2" y="531.0" width="48.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="300.2" y="542.0">__x6..</text>
</g>
<g>
<title>ksys_write (323 samples, 4.04%)</title><rect x="297.5" y="515.0" width="47.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="300.5" y="526.0">ksys..</text>
</g>
<g>
<title>__fdget_pos (16 samples, 0.20%)</title><rect x="297.6" y="499.0" width="2.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="300.6" y="510.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.16%)</title><rect x="297.8" y="483.0" width="1.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="300.8" y="494.0"></text>
</g>
<g>
<title>__fget (13 samples, 0.16%)</title><rect x="297.8" y="467.0" width="1.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="300.8" y="478.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="300.0" y="499.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="303.0" y="510.0"></text>
</g>
<g>
<title>vfs_write (302 samples, 3.78%)</title><rect x="300.6" y="499.0" width="44.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="303.6" y="510.0">vfs_..</text>
</g>
<g>
<title>__sb_start_write (10 samples, 0.13%)</title><rect x="301.0" y="483.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="304.0" y="494.0"></text>
</g>
<g>
<title>__vfs_write (269 samples, 3.37%)</title><rect x="302.5" y="483.0" width="39.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="305.5" y="494.0">__v..</text>
</g>
<g>
<title>new_sync_write (268 samples, 3.35%)</title><rect x="302.6" y="467.0" width="39.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="305.6" y="478.0">new..</text>
</g>
<g>
<title>ext4_file_write_iter (266 samples, 3.33%)</title><rect x="302.8" y="451.0" width="39.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="305.8" y="462.0">ext..</text>
</g>
<g>
<title>__generic_file_write_iter (258 samples, 3.23%)</title><rect x="302.8" y="435.0" width="38.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="305.8" y="446.0">__g..</text>
</g>
<g>
<title>current_time (4 samples, 0.05%)</title><rect x="303.2" y="419.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="306.2" y="430.0"></text>
</g>
<g>
<title>file_remove_privs (3 samples, 0.04%)</title><rect x="303.8" y="419.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="306.8" y="430.0"></text>
</g>
<g>
<title>file_update_time (8 samples, 0.10%)</title><rect x="304.3" y="419.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="307.3" y="430.0"></text>
</g>
<g>
<title>current_time (3 samples, 0.04%)</title><rect x="304.4" y="403.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="307.4" y="414.0"></text>
</g>
<g>
<title>timestamp_truncate (2 samples, 0.03%)</title><rect x="304.6" y="387.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="307.6" y="398.0"></text>
</g>
<g>
<title>generic_update_time (2 samples, 0.03%)</title><rect x="304.9" y="403.0" width="0.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="307.9" y="414.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.03%)</title><rect x="304.9" y="387.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="307.9" y="398.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.03%)</title><rect x="304.9" y="371.0" width="0.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="307.9" y="382.0"></text>
</g>
<g>
<title>timestamp_truncate (2 samples, 0.03%)</title><rect x="305.1" y="403.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="308.1" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (237 samples, 2.97%)</title><rect x="305.4" y="419.0" width="35.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="308.4" y="430.0">ge..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (6 samples, 0.08%)</title><rect x="306.0" y="403.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="309.0" y="414.0"></text>
</g>
<g>
<title>ext4_da_write_begin (80 samples, 1.00%)</title><rect x="306.9" y="403.0" width="11.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="309.9" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (25 samples, 0.31%)</title><rect x="307.2" y="387.0" width="3.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="310.2" y="398.0"></text>
</g>
<g>
<title>ext4_journal_check_start (5 samples, 0.06%)</title><rect x="307.4" y="371.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="310.4" y="382.0"></text>
</g>
<g>
<title>jbd2__journal_start (19 samples, 0.24%)</title><rect x="308.1" y="371.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="311.1" y="382.0"></text>
</g>
<g>
<title>add_transaction_credits (2 samples, 0.03%)</title><rect x="308.5" y="355.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="311.5" y="366.0"></text>
</g>
<g>
<title>kmem_cache_alloc (10 samples, 0.13%)</title><rect x="308.8" y="355.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="311.8" y="366.0"></text>
</g>
<g>
<title>start_this_handle (4 samples, 0.05%)</title><rect x="310.3" y="355.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="313.3" y="366.0"></text>
</g>
<g>
<title>add_transaction_credits (2 samples, 0.03%)</title><rect x="310.6" y="339.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="313.6" y="350.0"></text>
</g>
<g>
<title>ext4_block_write_begin (8 samples, 0.10%)</title><rect x="310.9" y="387.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="313.9" y="398.0"></text>
</g>
<g>
<title>ext4_da_get_block_prep (2 samples, 0.03%)</title><rect x="311.8" y="371.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="314.8" y="382.0"></text>
</g>
<g>
<title>ext4_es_lookup_extent (2 samples, 0.03%)</title><rect x="311.8" y="355.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="314.8" y="366.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (43 samples, 0.54%)</title><rect x="312.2" y="387.0" width="6.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="315.2" y="398.0"></text>
</g>
<g>
<title>pagecache_get_page (42 samples, 0.53%)</title><rect x="312.4" y="371.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="315.4" y="382.0"></text>
</g>
<g>
<title>__page_cache_alloc (2 samples, 0.03%)</title><rect x="312.5" y="355.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="315.5" y="366.0"></text>
</g>
<g>
<title>alloc_pages_current (2 samples, 0.03%)</title><rect x="312.5" y="339.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="315.5" y="350.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (2 samples, 0.03%)</title><rect x="312.5" y="323.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="315.5" y="334.0"></text>
</g>
<g>
<title>get_page_from_freelist (2 samples, 0.03%)</title><rect x="312.5" y="307.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="315.5" y="318.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (5 samples, 0.06%)</title><rect x="313.0" y="355.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="316.0" y="366.0"></text>
</g>
<g>
<title>__add_to_page_cache_locked (3 samples, 0.04%)</title><rect x="313.0" y="339.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="316.0" y="350.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (3 samples, 0.04%)</title><rect x="313.0" y="323.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="316.0" y="334.0"></text>
</g>
<g>
<title>get_mem_cgroup_from_mm (3 samples, 0.04%)</title><rect x="313.0" y="307.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="316.0" y="318.0"></text>
</g>
<g>
<title>find_get_entry (33 samples, 0.41%)</title><rect x="313.7" y="355.0" width="4.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="316.7" y="366.0"></text>
</g>
<g>
<title>xas_load (16 samples, 0.20%)</title><rect x="315.5" y="339.0" width="2.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="318.5" y="350.0"></text>
</g>
<g>
<title>xas_start (5 samples, 0.06%)</title><rect x="317.8" y="339.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="320.8" y="350.0"></text>
</g>
<g>
<title>ext4_da_write_end (135 samples, 1.69%)</title><rect x="318.7" y="403.0" width="20.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="321.7" y="414.0"></text>
</g>
<g>
<title>__ext4_journal_stop (19 samples, 0.24%)</title><rect x="319.6" y="387.0" width="2.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.6" y="398.0"></text>
</g>
<g>
<title>jbd2_journal_stop (18 samples, 0.23%)</title><rect x="319.8" y="371.0" width="2.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="322.8" y="382.0"></text>
</g>
<g>
<title>__wake_up (8 samples, 0.10%)</title><rect x="320.5" y="355.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="323.5" y="366.0"></text>
</g>
<g>
<title>__wake_up_common_lock (8 samples, 0.10%)</title><rect x="320.5" y="339.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="323.5" y="350.0"></text>
</g>
<g>
<title>__lock_text_start (7 samples, 0.09%)</title><rect x="320.5" y="323.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="323.5" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (5 samples, 0.06%)</title><rect x="321.7" y="355.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="324.7" y="366.0"></text>
</g>
<g>
<title>generic_write_end (109 samples, 1.36%)</title><rect x="322.6" y="387.0" width="16.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="325.6" y="398.0"></text>
</g>
<g>
<title>__mark_inode_dirty (95 samples, 1.19%)</title><rect x="322.9" y="371.0" width="14.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="325.9" y="382.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (3 samples, 0.04%)</title><rect x="323.3" y="355.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="326.3" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.03%)</title><rect x="323.8" y="355.0" width="0.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="326.8" y="366.0"></text>
</g>
<g>
<title>ext4_dirty_inode (87 samples, 1.09%)</title><rect x="324.0" y="355.0" width="12.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="327.0" y="366.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (4 samples, 0.05%)</title><rect x="324.0" y="339.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="327.0" y="350.0"></text>
</g>
<g>
<title>jbd2__journal_start (3 samples, 0.04%)</title><rect x="324.2" y="323.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.2" y="334.0"></text>
</g>
<g>
<title>__ext4_journal_stop (4 samples, 0.05%)</title><rect x="324.6" y="339.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="327.6" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_stop (3 samples, 0.04%)</title><rect x="324.8" y="323.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="327.8" y="334.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (78 samples, 0.98%)</title><rect x="325.2" y="339.0" width="11.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="328.2" y="350.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (41 samples, 0.51%)</title><rect x="325.4" y="323.0" width="6.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="328.4" y="334.0"></text>
</g>
<g>
<title>__brelse (2 samples, 0.03%)</title><rect x="325.5" y="307.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="328.5" y="318.0"></text>
</g>
<g>
<title>ext4_do_update_inode (37 samples, 0.46%)</title><rect x="326.0" y="307.0" width="5.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="329.0" y="318.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (2 samples, 0.03%)</title><rect x="327.9" y="291.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="330.9" y="302.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (20 samples, 0.25%)</title><rect x="328.2" y="291.0" width="2.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="331.2" y="302.0"></text>
</g>
<g>
<title>crypto_shash_update (2 samples, 0.03%)</title><rect x="328.2" y="275.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="331.2" y="286.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (18 samples, 0.23%)</title><rect x="328.5" y="275.0" width="2.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="331.5" y="286.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (2 samples, 0.03%)</title><rect x="329.1" y="259.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="332.1" y="270.0"></text>
</g>
<g>
<title>crypto_shash_update (12 samples, 0.15%)</title><rect x="329.4" y="259.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="332.4" y="270.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (9 samples, 0.11%)</title><rect x="329.8" y="243.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="332.8" y="254.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (36 samples, 0.45%)</title><rect x="331.4" y="323.0" width="5.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="334.4" y="334.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (17 samples, 0.21%)</title><rect x="331.7" y="307.0" width="2.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="334.7" y="318.0"></text>
</g>
<g>
<title>__getblk_gfp (12 samples, 0.15%)</title><rect x="331.9" y="291.0" width="1.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="334.9" y="302.0"></text>
</g>
<g>
<title>__find_get_block (12 samples, 0.15%)</title><rect x="331.9" y="275.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="334.9" y="286.0"></text>
</g>
<g>
<title>mark_page_accessed (6 samples, 0.08%)</title><rect x="332.8" y="259.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.8" y="270.0"></text>
</g>
<g>
<title>ext4_get_group_desc (4 samples, 0.05%)</title><rect x="333.6" y="291.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="336.6" y="302.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (12 samples, 0.15%)</title><rect x="334.2" y="307.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="337.2" y="318.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (11 samples, 0.14%)</title><rect x="334.2" y="291.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.2" y="302.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (10 samples, 0.13%)</title><rect x="334.4" y="275.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.4" y="286.0"></text>
</g>
<g>
<title>ext4_inode_table (2 samples, 0.03%)</title><rect x="336.3" y="307.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="339.3" y="318.0"></text>
</g>
<g>
<title>block_write_end (10 samples, 0.13%)</title><rect x="336.9" y="371.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="339.9" y="382.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (6 samples, 0.08%)</title><rect x="337.0" y="355.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="340.0" y="366.0"></text>
</g>
<g>
<title>__set_page_dirty (2 samples, 0.03%)</title><rect x="337.3" y="339.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="340.3" y="350.0"></text>
</g>
<g>
<title>mark_buffer_dirty (2 samples, 0.03%)</title><rect x="337.6" y="339.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="340.6" y="350.0"></text>
</g>
<g>
<title>__set_page_dirty (2 samples, 0.03%)</title><rect x="337.6" y="323.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="340.6" y="334.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="337.6" y="307.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="340.6" y="318.0"></text>
</g>
<g>
<title>mark_buffer_dirty (3 samples, 0.04%)</title><rect x="337.9" y="355.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="340.9" y="366.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.03%)</title><rect x="338.4" y="371.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="341.4" y="382.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (8 samples, 0.10%)</title><rect x="339.0" y="403.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="342.0" y="414.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.04%)</title><rect x="339.7" y="387.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="342.7" y="398.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (2 samples, 0.03%)</title><rect x="340.1" y="403.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="343.1" y="414.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.03%)</title><rect x="340.4" y="419.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="343.4" y="430.0"></text>
</g>
<g>
<title>ext4_write_checks (7 samples, 0.09%)</title><rect x="341.0" y="435.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="344.0" y="446.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (4 samples, 0.05%)</title><rect x="341.2" y="419.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="344.2" y="430.0"></text>
</g>
<g>
<title>generic_write_checks (2 samples, 0.03%)</title><rect x="341.8" y="419.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.8" y="430.0"></text>
</g>
<g>
<title>fsnotify (6 samples, 0.08%)</title><rect x="342.2" y="483.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="345.2" y="494.0"></text>
</g>
<g>
<title>rw_verify_area (14 samples, 0.18%)</title><rect x="343.1" y="483.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="346.1" y="494.0"></text>
</g>
<g>
<title>security_file_permission (12 samples, 0.15%)</title><rect x="343.4" y="467.0" width="1.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="346.4" y="478.0"></text>
</g>
<g>
<title>apparmor_file_permission (11 samples, 0.14%)</title><rect x="343.4" y="451.0" width="1.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="346.4" y="462.0"></text>
</g>
<g>
<title>common_file_perm (11 samples, 0.14%)</title><rect x="343.4" y="435.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="346.4" y="446.0"></text>
</g>
<g>
<title>aa_file_perm (3 samples, 0.04%)</title><rect x="344.6" y="419.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="347.6" y="430.0"></text>
</g>
<g>
<title>aa_label_is_subset (2 samples, 0.03%)</title><rect x="344.7" y="403.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="347.7" y="414.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="345.2" y="531.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="348.2" y="542.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.05%)</title><rect x="345.2" y="515.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="348.2" y="526.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.05%)</title><rect x="345.2" y="499.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="348.2" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="345.5" y="483.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="348.5" y="494.0"></text>
</g>
<g>
<title>ksys_write (3 samples, 0.04%)</title><rect x="345.8" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="348.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.03%)</title><rect x="346.2" y="579.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="349.2" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="346.6" y="611.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="349.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (30 samples, 0.38%)</title><rect x="347.1" y="611.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="350.1" y="622.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="347.2" y="595.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="350.2" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="347.8" y="595.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="350.8" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="348.0" y="579.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="351.0" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="348.0" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="351.0" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="348.0" y="547.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="351.0" y="558.0"></text>
</g>
<g>
<title>memcpy (7 samples, 0.09%)</title><rect x="348.3" y="595.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="351.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (5 samples, 0.06%)</title><rect x="349.3" y="595.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="352.3" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (8 samples, 0.10%)</title><rect x="350.0" y="595.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="353.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::UpdateFileChecksum(rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="351.2" y="595.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="354.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (2 samples, 0.03%)</title><rect x="351.5" y="627.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Clear() (3 samples, 0.04%)</title><rect x="351.8" y="643.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="354.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (5 samples, 0.06%)</title><rect x="352.5" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="355.5" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="353.0" y="627.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="356.0" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="353.0" y="611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="356.0" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="353.0" y="595.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="356.0" y="606.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (3 samples, 0.04%)</title><rect x="353.3" y="643.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="356.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (6 samples, 0.08%)</title><rect x="354.2" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="357.2" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.05%)</title><rect x="354.3" y="643.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="357.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (3 samples, 0.04%)</title><rect x="355.3" y="659.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="358.3" y="670.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (2 samples, 0.03%)</title><rect x="355.8" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="358.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::ComputeContentFlags() const (2 samples, 0.03%)</title><rect x="356.1" y="659.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="359.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (3 samples, 0.04%)</title><rect x="356.4" y="659.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="359.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (442 samples, 5.53%)</title><rect x="356.8" y="659.0" width="65.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="359.8" y="670.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (429 samples, 5.37%)</title><rect x="357.9" y="643.0" width="63.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="360.9" y="654.0">rocksdb..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.05%)</title><rect x="358.0" y="627.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="361.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.03%)</title><rect x="358.6" y="627.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="361.6" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.05%)</title><rect x="358.9" y="627.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="361.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (418 samples, 5.23%)</title><rect x="359.5" y="627.0" width="61.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="362.5" y="638.0">rocksd..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (405 samples, 5.07%)</title><rect x="360.1" y="611.0" width="59.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="363.1" y="622.0">rocksd..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (3 samples, 0.04%)</title><rect x="360.1" y="595.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="363.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (4 samples, 0.05%)</title><rect x="360.5" y="595.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="363.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (397 samples, 4.97%)</title><rect x="361.3" y="595.0" width="58.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="364.3" y="606.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (6 samples, 0.08%)</title><rect x="362.6" y="579.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="365.6" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="363.5" y="579.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="366.5" y="590.0"></text>
</g>
<g>
<title>page_fault (2 samples, 0.03%)</title><rect x="363.6" y="563.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="366.6" y="574.0"></text>
</g>
<g>
<title>do_page_fault (2 samples, 0.03%)</title><rect x="363.6" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="366.6" y="558.0"></text>
</g>
<g>
<title>__do_page_fault (2 samples, 0.03%)</title><rect x="363.6" y="531.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="366.6" y="542.0"></text>
</g>
<g>
<title>do_user_addr_fault (2 samples, 0.03%)</title><rect x="363.6" y="515.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="366.6" y="526.0"></text>
</g>
<g>
<title>handle_mm_fault (2 samples, 0.03%)</title><rect x="363.6" y="499.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="366.6" y="510.0"></text>
</g>
<g>
<title>__handle_mm_fault (2 samples, 0.03%)</title><rect x="363.6" y="483.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="366.6" y="494.0"></text>
</g>
<g>
<title>do_anonymous_page (2 samples, 0.03%)</title><rect x="363.6" y="467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="366.6" y="478.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (3 samples, 0.04%)</title><rect x="363.9" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="366.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (3 samples, 0.04%)</title><rect x="364.5" y="579.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="367.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (367 samples, 4.59%)</title><rect x="365.1" y="579.0" width="54.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="368.1" y="590.0">rocks..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (32 samples, 0.40%)</title><rect x="367.3" y="563.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="370.3" y="574.0"></text>
</g>
<g>
<title>page_fault (3 samples, 0.04%)</title><rect x="368.9" y="547.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="371.9" y="558.0"></text>
</g>
<g>
<title>do_page_fault (3 samples, 0.04%)</title><rect x="368.9" y="531.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="371.9" y="542.0"></text>
</g>
<g>
<title>__do_page_fault (3 samples, 0.04%)</title><rect x="368.9" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="371.9" y="526.0"></text>
</g>
<g>
<title>do_user_addr_fault (3 samples, 0.04%)</title><rect x="368.9" y="499.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="371.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (11 samples, 0.14%)</title><rect x="369.4" y="547.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="372.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (7 samples, 0.09%)</title><rect x="371.0" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="374.0" y="558.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (308 samples, 3.85%)</title><rect x="372.0" y="563.0" width="45.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="375.0" y="574.0">bool..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (287 samples, 3.59%)</title><rect x="374.0" y="547.0" width="42.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="377.0" y="558.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (123 samples, 1.54%)</title><rect x="391.5" y="531.0" width="18.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="394.5" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (10 samples, 0.13%)</title><rect x="391.8" y="515.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="394.8" y="526.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (11 samples, 0.14%)</title><rect x="393.3" y="515.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="396.3" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (25 samples, 0.31%)</title><rect x="394.9" y="515.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="397.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (73 samples, 0.91%)</title><rect x="398.8" y="515.0" width="10.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="401.8" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (3 samples, 0.04%)</title><rect x="401.0" y="499.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="404.0" y="510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (34 samples, 0.43%)</title><rect x="401.4" y="499.0" width="5.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="404.4" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="406.1" y="483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="409.1" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="406.1" y="467.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="409.1" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="406.1" y="451.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="409.1" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr (15 samples, 0.19%)</title><rect x="406.6" y="499.0" width="2.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="409.6" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="408.4" y="483.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="411.4" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="408.4" y="467.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="411.4" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="408.4" y="451.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="411.4" y="462.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (4 samples, 0.05%)</title><rect x="408.8" y="499.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="411.8" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="409.7" y="531.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="412.7" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="410.1" y="531.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="413.1" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (25 samples, 0.31%)</title><rect x="410.7" y="531.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="413.7" y="542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="413.5" y="515.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="416.5" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="414.0" y="515.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="417.0" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (13 samples, 0.16%)</title><rect x="414.4" y="531.0" width="1.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="417.4" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (13 samples, 0.16%)</title><rect x="414.4" y="515.0" width="1.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="417.4" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (13 samples, 0.16%)</title><rect x="414.4" y="499.0" width="1.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="417.4" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="416.3" y="547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="419.3" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="416.6" y="547.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="419.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (3 samples, 0.04%)</title><rect x="416.9" y="547.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="419.9" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="417.7" y="563.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="420.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (5 samples, 0.06%)</title><rect x="418.2" y="563.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="421.2" y="574.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (3 samples, 0.04%)</title><rect x="418.2" y="547.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="421.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.03%)</title><rect x="418.7" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="421.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.03%)</title><rect x="419.0" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (3 samples, 0.04%)</title><rect x="419.4" y="579.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="422.4" y="590.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="419.9" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="422.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (7 samples, 0.09%)</title><rect x="420.2" y="611.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="423.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (6 samples, 0.08%)</title><rect x="421.2" y="643.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="424.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::Writer*, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, unsigned long, bool, bool) (163 samples, 2.04%)</title><rect x="422.1" y="659.0" width="24.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="425.1" y="670.0">r..</text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.04%)</title><rect x="422.5" y="643.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="425.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (3 samples, 0.04%)</title><rect x="423.0" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (3 samples, 0.04%)</title><rect x="423.0" y="627.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="426.0" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (153 samples, 1.91%)</title><rect x="423.4" y="643.0" width="22.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="426.4" y="654.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="423.4" y="627.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="426.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (2 samples, 0.03%)</title><rect x="423.7" y="627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="426.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (148 samples, 1.85%)</title><rect x="424.2" y="627.0" width="21.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="427.2" y="638.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (144 samples, 1.80%)</title><rect x="424.6" y="611.0" width="21.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="427.6" y="622.0">r..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (139 samples, 1.74%)</title><rect x="425.0" y="595.0" width="20.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="428.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (126 samples, 1.58%)</title><rect x="426.5" y="579.0" width="18.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="429.5" y="590.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (10 samples, 0.13%)</title><rect x="427.5" y="563.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="430.5" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.04%)</title><rect x="427.7" y="547.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="430.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="428.1" y="547.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="431.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.03%)</title><rect x="428.6" y="547.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="431.6" y="558.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.04%)</title><rect x="429.0" y="563.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="432.0" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::InsertConcurrently(char const*) (106 samples, 1.33%)</title><rect x="429.5" y="563.0" width="15.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="432.5" y="574.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;true&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (106 samples, 1.33%)</title><rect x="429.5" y="547.0" width="15.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="432.5" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (103 samples, 1.29%)</title><rect x="429.6" y="531.0" width="15.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="432.6" y="542.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (41 samples, 0.51%)</title><rect x="436.4" y="515.0" width="6.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="439.4" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (6 samples, 0.08%)</title><rect x="436.6" y="499.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="439.6" y="510.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="437.4" y="499.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="440.4" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (12 samples, 0.15%)</title><rect x="437.7" y="499.0" width="1.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="440.7" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="438.9" y="483.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="441.9" y="494.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="438.9" y="467.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="441.9" y="478.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="438.9" y="451.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="441.9" y="462.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (20 samples, 0.25%)</title><rect x="439.5" y="499.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="442.5" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni14285453745968608178.so (2 samples, 0.03%)</title><rect x="439.8" y="483.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="442.8" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.10%)</title><rect x="440.1" y="483.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="443.1" y="494.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.03%)</title><rect x="441.3" y="483.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="444.3" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.06%)</title><rect x="441.6" y="483.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="444.6" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (6 samples, 0.08%)</title><rect x="442.5" y="515.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="445.5" y="526.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="442.9" y="499.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="445.9" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="442.9" y="483.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="445.9" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="442.9" y="467.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="445.9" y="478.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (10 samples, 0.13%)</title><rect x="443.3" y="515.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="446.3" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (10 samples, 0.13%)</title><rect x="443.3" y="499.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="446.3" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (10 samples, 0.13%)</title><rect x="443.3" y="483.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="446.3" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (2 samples, 0.03%)</title><rect x="444.8" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="447.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (2 samples, 0.03%)</title><rect x="445.3" y="579.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="448.3" y="590.0"></text>
</g>
<g>
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (2 samples, 0.03%)</title><rect x="445.6" y="595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="448.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (2 samples, 0.03%)</title><rect x="446.2" y="659.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="449.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteController::IsStopped() const (2 samples, 0.03%)</title><rect x="446.4" y="659.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="449.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (138 samples, 1.73%)</title><rect x="446.7" y="659.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="449.7" y="670.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.04%)</title><rect x="461.2" y="643.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="464.2" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.09%)</title><rect x="461.8" y="643.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="464.8" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.09%)</title><rect x="461.8" y="627.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="464.8" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (6 samples, 0.08%)</title><rect x="461.9" y="611.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="464.9" y="622.0"></text>
</g>
<g>
<title>__x64_sys_futex (5 samples, 0.06%)</title><rect x="461.9" y="595.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="464.9" y="606.0"></text>
</g>
<g>
<title>do_futex (5 samples, 0.06%)</title><rect x="461.9" y="579.0" width="0.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="464.9" y="590.0"></text>
</g>
<g>
<title>futex_wake (5 samples, 0.06%)</title><rect x="461.9" y="563.0" width="0.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="464.9" y="574.0"></text>
</g>
<g>
<title>pthread_cond_wait (3 samples, 0.04%)</title><rect x="463.0" y="643.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="466.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (3 samples, 0.04%)</title><rect x="463.7" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="466.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.03%)</title><rect x="464.2" y="643.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.2" y="654.0"></text>
</g>
<g>
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;) (4 samples, 0.05%)</title><rect x="464.5" y="643.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="467.5" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="464.8" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="467.8" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="464.8" y="611.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="467.8" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="464.8" y="595.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="467.8" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (14 samples, 0.18%)</title><rect x="465.1" y="643.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="468.1" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (14 samples, 0.18%)</title><rect x="465.1" y="627.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="468.1" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (14 samples, 0.18%)</title><rect x="465.1" y="611.0" width="2.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="468.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::BlockingAwaitState(rocksdb::WriteThread::Writer*, unsigned char) (2 samples, 0.03%)</title><rect x="467.1" y="659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="470.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (105 samples, 1.31%)</title><rect x="467.4" y="659.0" width="15.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="470.4" y="670.0"></text>
</g>
<g>
<title>__sched_yield (33 samples, 0.41%)</title><rect x="467.4" y="643.0" width="4.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="470.4" y="654.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (29 samples, 0.36%)</title><rect x="468.0" y="627.0" width="4.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="471.0" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (28 samples, 0.35%)</title><rect x="468.2" y="611.0" width="4.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="471.2" y="622.0"></text>
</g>
<g>
<title>__x64_sys_sched_yield (23 samples, 0.29%)</title><rect x="468.7" y="595.0" width="3.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="471.7" y="606.0"></text>
</g>
<g>
<title>do_sched_yield (23 samples, 0.29%)</title><rect x="468.7" y="579.0" width="3.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="471.7" y="590.0"></text>
</g>
<g>
<title>schedule (23 samples, 0.29%)</title><rect x="468.7" y="563.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="471.7" y="574.0"></text>
</g>
<g>
<title>__sched_text_start (23 samples, 0.29%)</title><rect x="468.7" y="547.0" width="3.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="471.7" y="558.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.05%)</title><rect x="471.5" y="531.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="474.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::AwaitState(rocksdb::WriteThread::Writer*, unsigned char, rocksdb::WriteThread::AdaptationContext*) (71 samples, 0.89%)</title><rect x="472.3" y="643.0" width="10.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="475.3" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.08%)</title><rect x="481.9" y="627.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="484.9" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (6 samples, 0.08%)</title><rect x="481.9" y="611.0" width="0.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="484.9" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (6 samples, 0.08%)</title><rect x="481.9" y="595.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="484.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.03%)</title><rect x="483.1" y="659.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="486.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (6 samples, 0.08%)</title><rect x="483.4" y="659.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="486.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (3 samples, 0.04%)</title><rect x="483.7" y="643.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="486.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (5 samples, 0.06%)</title><rect x="484.2" y="659.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="487.2" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (4 samples, 0.05%)</title><rect x="485.0" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="488.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (4 samples, 0.05%)</title><rect x="485.0" y="643.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="488.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LaunchParallelMemTableWriters(rocksdb::WriteThread::WriteGroup*) (3 samples, 0.04%)</title><rect x="485.6" y="659.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="488.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (4 samples, 0.05%)</title><rect x="486.0" y="659.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="489.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (4 samples, 0.05%)</title><rect x="486.6" y="659.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="489.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (4 samples, 0.05%)</title><rect x="487.3" y="659.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="490.3" y="670.0"></text>
</g>
<g>
<title>std::chrono::_V2::steady_clock::now() (2 samples, 0.03%)</title><rect x="487.9" y="659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="490.9" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="488.2" y="659.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="491.2" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="488.2" y="643.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="491.2" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="488.2" y="627.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="491.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (2 samples, 0.03%)</title><rect x="488.8" y="675.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="491.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (4 samples, 0.05%)</title><rect x="489.1" y="675.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="492.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (3 samples, 0.04%)</title><rect x="489.7" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="492.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (2 samples, 0.03%)</title><rect x="490.2" y="675.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="493.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (4 samples, 0.05%)</title><rect x="490.6" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="493.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.04%)</title><rect x="491.2" y="675.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="494.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CompleteParallelMemTableWriter(rocksdb::WriteThread::Writer*) (3 samples, 0.04%)</title><rect x="491.9" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="494.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.04%)</title><rect x="492.4" y="675.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="495.4" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (6 samples, 0.08%)</title><rect x="492.8" y="675.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="495.8" y="686.0"></text>
</g>
<g>
<title>std::condition_variable::~condition_variable() (3 samples, 0.04%)</title><rect x="493.8" y="675.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="496.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (3 samples, 0.04%)</title><rect x="494.3" y="691.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="497.3" y="702.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (8 samples, 0.10%)</title><rect x="494.7" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="497.7" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="495.6" y="675.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="498.6" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="495.6" y="659.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="498.6" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="495.6" y="643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="498.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (24 samples, 0.30%)</title><rect x="495.9" y="691.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="498.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.03%)</title><rect x="495.9" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="498.9" y="686.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (4 samples, 0.05%)</title><rect x="496.2" y="675.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="499.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (4 samples, 0.05%)</title><rect x="496.8" y="675.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="499.8" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.08%)</title><rect x="497.5" y="675.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="500.5" y="686.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (4 samples, 0.05%)</title><rect x="497.8" y="659.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="500.8" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (4 samples, 0.05%)</title><rect x="498.4" y="675.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="501.4" y="686.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (3 samples, 0.04%)</title><rect x="499.0" y="675.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="502.0" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.03%)</title><rect x="499.6" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="502.6" y="702.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.08%)</title><rect x="499.9" y="691.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="502.9" y="702.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (10 samples, 0.13%)</title><rect x="500.9" y="691.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="503.9" y="702.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (5 samples, 0.06%)</title><rect x="502.4" y="691.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="505.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.03%)</title><rect x="503.1" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.1" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (6 samples, 0.08%)</title><rect x="503.4" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="506.4" y="718.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.03%)</title><rect x="504.3" y="707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.3" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (2 samples, 0.03%)</title><rect x="504.6" y="739.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="507.6" y="750.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.03%)</title><rect x="504.9" y="739.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="507.9" y="750.0"></text>
</g>
<g>
<title>[unknown] (95 samples, 1.19%)</title><rect x="505.4" y="771.0" width="14.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="508.4" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.06%)</title><rect x="505.4" y="755.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="508.4" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_wait (79 samples, 0.99%)</title><rect x="506.1" y="755.0" width="11.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="509.1" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (74 samples, 0.93%)</title><rect x="506.7" y="739.0" width="10.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="509.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (74 samples, 0.93%)</title><rect x="506.7" y="723.0" width="10.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="509.7" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (73 samples, 0.91%)</title><rect x="506.8" y="707.0" width="10.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="509.8" y="718.0"></text>
</g>
<g>
<title>do_futex (72 samples, 0.90%)</title><rect x="507.0" y="691.0" width="10.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="510.0" y="702.0"></text>
</g>
<g>
<title>futex_wait (72 samples, 0.90%)</title><rect x="507.0" y="675.0" width="10.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="510.0" y="686.0"></text>
</g>
<g>
<title>futex_wait_queue_me (62 samples, 0.78%)</title><rect x="507.0" y="659.0" width="9.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="510.0" y="670.0"></text>
</g>
<g>
<title>schedule (60 samples, 0.75%)</title><rect x="507.3" y="643.0" width="8.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="510.3" y="654.0"></text>
</g>
<g>
<title>__sched_text_start (60 samples, 0.75%)</title><rect x="507.3" y="627.0" width="8.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="510.3" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (57 samples, 0.71%)</title><rect x="507.7" y="611.0" width="8.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="510.7" y="622.0"></text>
</g>
<g>
<title>futex_wait_setup (10 samples, 0.13%)</title><rect x="516.1" y="659.0" width="1.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="519.1" y="670.0"></text>
</g>
<g>
<title>get_futex_value_locked (2 samples, 0.03%)</title><rect x="517.3" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="520.3" y="654.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.03%)</title><rect x="517.8" y="755.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="520.8" y="766.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.03%)</title><rect x="518.2" y="755.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="521.2" y="766.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (3 samples, 0.04%)</title><rect x="518.5" y="755.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="521.5" y="766.0"></text>
</g>
<g>
<title>__libc_malloc (29 samples, 0.36%)</title><rect x="519.4" y="771.0" width="4.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="522.4" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="523.4" y="755.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="526.4" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="523.4" y="739.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="526.4" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="523.4" y="723.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="526.4" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (263 samples, 3.29%)</title><rect x="523.7" y="771.0" width="38.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="526.7" y="782.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (262 samples, 3.28%)</title><rect x="523.8" y="755.0" width="38.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="526.8" y="766.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (262 samples, 3.28%)</title><rect x="523.8" y="739.0" width="38.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="526.8" y="750.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (259 samples, 3.24%)</title><rect x="524.1" y="723.0" width="38.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="527.1" y="734.0">__x..</text>
</g>
<g>
<title>do_futex (259 samples, 3.24%)</title><rect x="524.1" y="707.0" width="38.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="527.1" y="718.0">do_..</text>
</g>
<g>
<title>futex_wake (259 samples, 3.24%)</title><rect x="524.1" y="691.0" width="38.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="527.1" y="702.0">fut..</text>
</g>
<g>
<title>mark_wake_futex (5 samples, 0.06%)</title><rect x="525.0" y="675.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="528.0" y="686.0"></text>
</g>
<g>
<title>wake_up_q (247 samples, 3.09%)</title><rect x="525.9" y="675.0" width="36.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="528.9" y="686.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (247 samples, 3.09%)</title><rect x="525.9" y="659.0" width="36.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="528.9" y="670.0">try..</text>
</g>
<g>
<title>__lock_text_start (247 samples, 3.09%)</title><rect x="525.9" y="643.0" width="36.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="528.9" y="654.0">__l..</text>
</g>
<g>
<title>clock_gettime (9 samples, 0.11%)</title><rect x="562.5" y="771.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="565.5" y="782.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.10%)</title><rect x="562.6" y="755.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="565.6" y="766.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.10%)</title><rect x="562.6" y="739.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="565.6" y="750.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (2 samples, 0.03%)</title><rect x="564.0" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="567.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.unfoldToBytes (4 samples, 0.05%)</title><rect x="564.3" y="803.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="567.3" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (4 samples, 0.05%)</title><rect x="564.3" y="787.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.3" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="564.4" y="771.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="567.4" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="564.4" y="755.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="567.4" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.04%)</title><rect x="564.4" y="739.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="567.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="564.4" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.4" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.03%)</title><rect x="564.4" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="567.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (9 samples, 0.11%)</title><rect x="564.9" y="803.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (7 samples, 0.09%)</title><rect x="565.2" y="787.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.2" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6 samples, 0.08%)</title><rect x="565.3" y="771.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="568.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="565.5" y="755.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="568.5" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="565.5" y="739.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="568.5" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.06%)</title><rect x="565.5" y="723.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="568.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.06%)</title><rect x="565.5" y="707.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl$$Lambda$76/128399682.run (2,470 samples, 30.91%)</title><rect x="566.3" y="867.0" width="364.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.3" y="878.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceI..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.03%)</title><rect x="566.3" y="851.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="569.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.lambda$proxyForwarding$1 (2,468 samples, 30.88%)</title><rect x="566.6" y="851.0" width="364.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.6" y="862.0">ru/mail/polis/service/kovalkov/SharedAsyncServiceI..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,013 samples, 12.68%)</title><rect x="566.8" y="835.0" width="149.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.8" y="846.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.08%)</title><rect x="568.6" y="819.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="571.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.08%)</title><rect x="568.6" y="803.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="571.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.08%)</title><rect x="568.6" y="787.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.6" y="798.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.04%)</title><rect x="568.7" y="771.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="571.7" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="569.1" y="771.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="572.1" y="782.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="569.1" y="755.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="572.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="569.1" y="739.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="572.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (968 samples, 12.11%)</title><rect x="569.4" y="819.0" width="143.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="572.4" y="830.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (16 samples, 0.20%)</title><rect x="569.6" y="803.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="572.6" y="814.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (8 samples, 0.10%)</title><rect x="570.5" y="787.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="573.5" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.10%)</title><rect x="570.5" y="771.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="573.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.10%)</title><rect x="570.5" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="573.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (8 samples, 0.10%)</title><rect x="570.5" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.10%)</title><rect x="570.5" y="723.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.5" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.05%)</title><rect x="571.1" y="707.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="574.1" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.05%)</title><rect x="571.1" y="691.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="574.1" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="571.1" y="675.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="574.1" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="571.7" y="787.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="574.7" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="571.7" y="771.0" width="0.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="574.7" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="571.7" y="755.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="574.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (951 samples, 11.90%)</title><rect x="571.9" y="803.0" width="140.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="574.9" y="814.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>one/nio/net/Session.write (951 samples, 11.90%)</title><rect x="571.9" y="787.0" width="140.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="574.9" y="798.0">one/nio/net/Sessio..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)</title><rect x="572.4" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="575.4" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.0] (2 samples, 0.03%)</title><rect x="572.5" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="575.5" y="766.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (944 samples, 11.81%)</title><rect x="573.0" y="771.0" width="139.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.0" y="782.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (941 samples, 11.77%)</title><rect x="573.3" y="755.0" width="138.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="576.3" y="766.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="574.2" y="739.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="577.2" y="750.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (8 samples, 0.10%)</title><rect x="574.6" y="739.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="577.6" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="574.9" y="723.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="577.9" y="734.0"></text>
</g>
<g>
<title>send (923 samples, 11.55%)</title><rect x="575.8" y="739.0" width="136.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="578.8" y="750.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (915 samples, 11.45%)</title><rect x="576.2" y="723.0" width="135.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="579.2" y="734.0">entry_SYSCALL_64_..</text>
</g>
<g>
<title>do_syscall_64 (915 samples, 11.45%)</title><rect x="576.2" y="707.0" width="135.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="579.2" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (896 samples, 11.21%)</title><rect x="577.4" y="691.0" width="132.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="580.4" y="702.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (893 samples, 11.17%)</title><rect x="577.4" y="675.0" width="131.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="580.4" y="686.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.04%)</title><rect x="578.9" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="581.9" y="670.0"></text>
</g>
<g>
<title>sock_sendmsg (855 samples, 10.70%)</title><rect x="579.3" y="659.0" width="126.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="582.3" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (10 samples, 0.13%)</title><rect x="579.3" y="643.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="582.3" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (836 samples, 10.46%)</title><rect x="580.8" y="643.0" width="123.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="583.8" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (831 samples, 10.40%)</title><rect x="581.2" y="627.0" width="122.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="584.2" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="581.2" y="611.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="584.2" y="622.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.04%)</title><rect x="581.5" y="611.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="584.5" y="622.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.04%)</title><rect x="582.1" y="611.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="585.1" y="622.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (4 samples, 0.05%)</title><rect x="582.6" y="611.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="585.6" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (816 samples, 10.21%)</title><rect x="583.2" y="611.0" width="120.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="586.2" y="622.0">tcp_sendmsg_loc..</text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.06%)</title><rect x="584.5" y="595.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="587.5" y="606.0"></text>
</g>
<g>
<title>copy_user_generic_string (5 samples, 0.06%)</title><rect x="584.5" y="579.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="587.5" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (3 samples, 0.04%)</title><rect x="585.4" y="595.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="588.4" y="606.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.04%)</title><rect x="585.4" y="579.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="588.4" y="590.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (40 samples, 0.50%)</title><rect x="585.8" y="595.0" width="5.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="588.8" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (36 samples, 0.45%)</title><rect x="586.1" y="579.0" width="5.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="589.1" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (17 samples, 0.21%)</title><rect x="586.4" y="563.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="589.4" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (6 samples, 0.08%)</title><rect x="586.4" y="547.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="589.4" y="558.0"></text>
</g>
<g>
<title>memset (11 samples, 0.14%)</title><rect x="587.3" y="547.0" width="1.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="590.3" y="558.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (5 samples, 0.06%)</title><rect x="588.9" y="563.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="591.9" y="574.0"></text>
</g>
<g>
<title>ksize (4 samples, 0.05%)</title><rect x="589.7" y="563.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="592.7" y="574.0"></text>
</g>
<g>
<title>__ksize (4 samples, 0.05%)</title><rect x="589.7" y="547.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="592.7" y="558.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (3 samples, 0.04%)</title><rect x="590.3" y="563.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="593.3" y="574.0"></text>
</g>
<g>
<title>memset (4 samples, 0.05%)</title><rect x="590.7" y="563.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="593.7" y="574.0"></text>
</g>
<g>
<title>skb_entail (5 samples, 0.06%)</title><rect x="591.7" y="595.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="594.7" y="606.0"></text>
</g>
<g>
<title>tcp_push (743 samples, 9.30%)</title><rect x="592.5" y="595.0" width="109.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="595.5" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (743 samples, 9.30%)</title><rect x="592.5" y="579.0" width="109.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="595.5" y="590.0">__tcp_push_pe..</text>
</g>
<g>
<title>tcp_mtu_probe (2 samples, 0.03%)</title><rect x="592.9" y="563.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="595.9" y="574.0"></text>
</g>
<g>
<title>tcp_write_xmit (737 samples, 9.22%)</title><rect x="593.4" y="563.0" width="108.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="596.4" y="574.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (5 samples, 0.06%)</title><rect x="593.8" y="547.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="596.8" y="558.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (702 samples, 8.78%)</title><rect x="594.5" y="547.0" width="103.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="597.5" y="558.0">__tcp_transm..</text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.03%)</title><rect x="595.6" y="531.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="598.6" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (691 samples, 8.65%)</title><rect x="595.9" y="531.0" width="102.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="598.9" y="542.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (689 samples, 8.62%)</title><rect x="595.9" y="515.0" width="101.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="598.9" y="526.0">__ip_queue_x..</text>
</g>
<g>
<title>ip_local_out (684 samples, 8.56%)</title><rect x="596.3" y="499.0" width="101.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="599.3" y="510.0">ip_local_out</text>
</g>
<g>
<title>ip_output (681 samples, 8.52%)</title><rect x="596.8" y="483.0" width="100.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="599.8" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (680 samples, 8.51%)</title><rect x="596.9" y="467.0" width="100.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="599.9" y="478.0">ip_finish_ou..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (10 samples, 0.13%)</title><rect x="596.9" y="451.0" width="1.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="599.9" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (670 samples, 8.38%)</title><rect x="598.4" y="451.0" width="98.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="601.4" y="462.0">__ip_finish_..</text>
</g>
<g>
<title>ip_finish_output2 (668 samples, 8.36%)</title><rect x="598.7" y="435.0" width="98.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="601.7" y="446.0">ip_finish_ou..</text>
</g>
<g>
<title>__local_bh_enable_ip (633 samples, 7.92%)</title><rect x="600.6" y="419.0" width="93.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="603.6" y="430.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (633 samples, 7.92%)</title><rect x="600.6" y="403.0" width="93.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="603.6" y="414.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (630 samples, 7.88%)</title><rect x="601.0" y="387.0" width="93.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="604.0" y="398.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (628 samples, 7.86%)</title><rect x="601.0" y="371.0" width="92.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="604.0" y="382.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (620 samples, 7.76%)</title><rect x="602.2" y="355.0" width="91.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="605.2" y="366.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (618 samples, 7.73%)</title><rect x="602.5" y="339.0" width="91.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="605.5" y="350.0">process_bac..</text>
</g>
<g>
<title>__netif_receive_skb (615 samples, 7.70%)</title><rect x="602.8" y="323.0" width="90.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="605.8" y="334.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (612 samples, 7.66%)</title><rect x="603.1" y="307.0" width="90.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="606.1" y="318.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (6 samples, 0.08%)</title><rect x="603.1" y="291.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="606.1" y="302.0"></text>
</g>
<g>
<title>ip_rcv (606 samples, 7.58%)</title><rect x="604.0" y="291.0" width="89.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="607.0" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (602 samples, 7.53%)</title><rect x="604.4" y="275.0" width="88.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="607.4" y="286.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (600 samples, 7.51%)</title><rect x="604.6" y="259.0" width="88.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="607.6" y="270.0">ip_local_d..</text>
</g>
<g>
<title>ip_local_deliver_finish (600 samples, 7.51%)</title><rect x="604.6" y="243.0" width="88.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="607.6" y="254.0">ip_local_d..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (598 samples, 7.48%)</title><rect x="604.7" y="227.0" width="88.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="607.7" y="238.0">ip_protoco..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="605.0" y="211.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="608.0" y="222.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="605.3" y="211.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="608.3" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (592 samples, 7.41%)</title><rect x="605.6" y="211.0" width="87.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="608.6" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (27 samples, 0.34%)</title><rect x="607.7" y="195.0" width="4.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="610.7" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.08%)</title><rect x="612.0" y="195.0" width="0.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="615.0" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.06%)</title><rect x="612.0" y="179.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="615.0" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (541 samples, 6.77%)</title><rect x="613.0" y="195.0" width="79.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="616.0" y="206.0">tcp_v4_do..</text>
</g>
<g>
<title>tcp_check_space (13 samples, 0.16%)</title><rect x="613.1" y="179.0" width="2.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="616.1" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (526 samples, 6.58%)</title><rect x="615.2" y="179.0" width="77.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="618.2" y="190.0">tcp_rcv_e..</text>
</g>
<g>
<title>__tcp_ack_snd_check (10 samples, 0.13%)</title><rect x="615.8" y="163.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="618.8" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (10 samples, 0.13%)</title><rect x="615.8" y="147.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="618.8" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.13%)</title><rect x="615.8" y="131.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="618.8" y="142.0"></text>
</g>
<g>
<title>mod_timer (10 samples, 0.13%)</title><rect x="615.8" y="115.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="618.8" y="126.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.13%)</title><rect x="615.8" y="99.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="618.8" y="110.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.03%)</title><rect x="617.3" y="163.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="620.3" y="174.0"></text>
</g>
<g>
<title>tcp_ack (77 samples, 0.96%)</title><rect x="617.6" y="163.0" width="11.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="620.6" y="174.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (54 samples, 0.68%)</title><rect x="620.2" y="147.0" width="8.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="623.2" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (42 samples, 0.53%)</title><rect x="621.1" y="131.0" width="6.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="624.1" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (7 samples, 0.09%)</title><rect x="621.1" y="115.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="624.1" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (7 samples, 0.09%)</title><rect x="621.1" y="99.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="624.1" y="110.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.06%)</title><rect x="621.4" y="83.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="624.4" y="94.0"></text>
</g>
<g>
<title>skb_release_all (34 samples, 0.43%)</title><rect x="622.1" y="115.0" width="5.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="625.1" y="126.0"></text>
</g>
<g>
<title>skb_release_data (33 samples, 0.41%)</title><rect x="622.3" y="99.0" width="4.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="625.3" y="110.0"></text>
</g>
<g>
<title>skb_free_head (12 samples, 0.15%)</title><rect x="625.4" y="83.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="628.4" y="94.0"></text>
</g>
<g>
<title>kfree (11 samples, 0.14%)</title><rect x="625.5" y="67.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="628.5" y="78.0"></text>
</g>
<g>
<title>__slab_free (5 samples, 0.06%)</title><rect x="626.4" y="51.0" width="0.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="629.4" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (5 samples, 0.06%)</title><rect x="627.5" y="131.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="630.5" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.03%)</title><rect x="628.6" y="147.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="631.6" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (2 samples, 0.03%)</title><rect x="628.9" y="163.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="631.9" y="174.0"></text>
</g>
<g>
<title>tcp_data_ready (423 samples, 5.29%)</title><rect x="629.2" y="163.0" width="62.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="632.2" y="174.0">tcp_da..</text>
</g>
<g>
<title>sock_def_readable (423 samples, 5.29%)</title><rect x="629.2" y="147.0" width="62.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="632.2" y="158.0">sock_d..</text>
</g>
<g>
<title>__wake_up_sync_key (422 samples, 5.28%)</title><rect x="629.4" y="131.0" width="62.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="632.4" y="142.0">__wake..</text>
</g>
<g>
<title>__wake_up_common_lock (422 samples, 5.28%)</title><rect x="629.4" y="115.0" width="62.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="632.4" y="126.0">__wake..</text>
</g>
<g>
<title>__lock_text_start (421 samples, 5.27%)</title><rect x="629.4" y="99.0" width="62.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="632.4" y="110.0">__lock..</text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.05%)</title><rect x="691.7" y="163.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="694.7" y="174.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="691.8" y="147.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="694.8" y="158.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="692.4" y="163.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="695.4" y="174.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="693.8" y="371.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="696.8" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (22 samples, 0.28%)</title><rect x="694.1" y="419.0" width="3.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="697.1" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (21 samples, 0.26%)</title><rect x="694.1" y="403.0" width="3.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="697.1" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (14 samples, 0.18%)</title><rect x="694.6" y="387.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="697.6" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (11 samples, 0.14%)</title><rect x="694.9" y="371.0" width="1.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="697.9" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="695.5" y="355.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="698.5" y="366.0"></text>
</g>
<g>
<title>netif_rx (4 samples, 0.05%)</title><rect x="695.8" y="355.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="698.8" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (4 samples, 0.05%)</title><rect x="695.8" y="339.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="698.8" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (3 samples, 0.04%)</title><rect x="696.0" y="323.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="699.0" y="334.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="696.7" y="387.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="699.7" y="398.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="697.3" y="499.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="700.3" y="510.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.03%)</title><rect x="698.2" y="547.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="701.2" y="558.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="698.5" y="547.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="701.5" y="558.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="698.9" y="547.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="701.9" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (5 samples, 0.06%)</title><rect x="699.4" y="547.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="702.4" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (4 samples, 0.05%)</title><rect x="699.5" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="702.5" y="542.0"></text>
</g>
<g>
<title>sk_reset_timer (4 samples, 0.05%)</title><rect x="699.5" y="515.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="702.5" y="526.0"></text>
</g>
<g>
<title>mod_timer (4 samples, 0.05%)</title><rect x="699.5" y="499.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="702.5" y="510.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.05%)</title><rect x="699.5" y="483.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="702.5" y="494.0"></text>
</g>
<g>
<title>tcp_rbtree_insert (2 samples, 0.03%)</title><rect x="700.3" y="547.0" width="0.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="703.3" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="700.5" y="547.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="703.5" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (7 samples, 0.09%)</title><rect x="700.8" y="547.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="703.8" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (9 samples, 0.11%)</title><rect x="702.2" y="595.0" width="1.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="705.2" y="606.0"></text>
</g>
<g>
<title>ipv4_mtu (3 samples, 0.04%)</title><rect x="702.2" y="579.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="705.2" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.06%)</title><rect x="702.6" y="579.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="705.6" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (2 samples, 0.03%)</title><rect x="703.9" y="627.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="706.9" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (8 samples, 0.10%)</title><rect x="704.2" y="643.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="707.2" y="654.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (8 samples, 0.10%)</title><rect x="704.2" y="627.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="707.2" y="638.0"></text>
</g>
<g>
<title>aa_sk_perm (8 samples, 0.10%)</title><rect x="704.2" y="611.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="707.2" y="622.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (2 samples, 0.03%)</title><rect x="705.1" y="595.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="708.1" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (25 samples, 0.31%)</title><rect x="705.6" y="659.0" width="3.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="708.6" y="670.0"></text>
</g>
<g>
<title>__fdget (21 samples, 0.26%)</title><rect x="705.7" y="643.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="708.7" y="654.0"></text>
</g>
<g>
<title>__fget_light (21 samples, 0.26%)</title><rect x="705.7" y="627.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="708.7" y="638.0"></text>
</g>
<g>
<title>__fget (21 samples, 0.26%)</title><rect x="705.7" y="611.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="708.7" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.04%)</title><rect x="708.8" y="643.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="711.8" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (11 samples, 0.14%)</title><rect x="709.7" y="691.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="712.7" y="702.0"></text>
</g>
<g>
<title>schedule (10 samples, 0.13%)</title><rect x="709.8" y="675.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="712.8" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (10 samples, 0.13%)</title><rect x="709.8" y="659.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="712.8" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (9 samples, 0.11%)</title><rect x="710.0" y="643.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="713.0" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.06%)</title><rect x="711.3" y="723.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="714.3" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (5 samples, 0.06%)</title><rect x="711.3" y="707.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="714.3" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (5 samples, 0.06%)</title><rect x="711.3" y="691.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="714.3" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (15 samples, 0.19%)</title><rect x="712.4" y="819.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="715.4" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.14%)</title><rect x="713.0" y="803.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="716.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (11 samples, 0.14%)</title><rect x="713.0" y="787.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.0" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="714.1" y="771.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="717.1" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="714.1" y="755.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="717.1" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="714.1" y="739.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="717.1" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (12 samples, 0.15%)</title><rect x="714.6" y="819.0" width="1.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="717.6" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (12 samples, 0.15%)</title><rect x="714.6" y="803.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="717.6" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (12 samples, 0.15%)</title><rect x="714.6" y="787.0" width="1.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="717.6" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxy (1,453 samples, 18.18%)</title><rect x="716.3" y="835.0" width="214.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.3" y="846.0">ru/mail/polis/service/kovalk..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title><rect x="716.5" y="819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.5" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/377478451.invoke (2 samples, 0.03%)</title><rect x="716.5" y="803.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="719.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.05%)</title><rect x="716.8" y="819.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="719.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.04%)</title><rect x="716.9" y="803.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.04%)</title><rect x="716.9" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.9" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,436 samples, 17.97%)</title><rect x="717.4" y="819.0" width="212.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="720.4" y="830.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,436 samples, 17.97%)</title><rect x="717.4" y="803.0" width="212.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.4" y="814.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.10%)</title><rect x="718.7" y="787.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="721.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.10%)</title><rect x="718.7" y="771.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="721.7" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.10%)</title><rect x="718.7" y="755.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="721.7" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.04%)</title><rect x="719.4" y="739.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="722.4" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.04%)</title><rect x="719.4" y="723.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="722.4" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.04%)</title><rect x="719.4" y="707.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="722.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (300 samples, 3.75%)</title><rect x="719.9" y="787.0" width="44.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.9" y="798.0">one/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (12 samples, 0.15%)</title><rect x="724.3" y="771.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="727.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="724.3" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="727.3" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (10 samples, 0.13%)</title><rect x="724.6" y="755.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="727.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.11%)</title><rect x="724.6" y="739.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="727.6" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.10%)</title><rect x="724.8" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.8" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title><rect x="725.1" y="707.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.03%)</title><rect x="725.1" y="691.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="728.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title><rect x="725.4" y="691.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="728.4" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (2 samples, 0.03%)</title><rect x="725.5" y="675.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="728.5" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (252 samples, 3.15%)</title><rect x="726.1" y="771.0" width="37.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.1" y="782.0">one..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="726.1" y="755.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="729.1" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (24 samples, 0.30%)</title><rect x="726.5" y="755.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="729.5" y="766.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="727.3" y="739.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="730.3" y="750.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (16 samples, 0.20%)</title><rect x="727.7" y="739.0" width="2.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="730.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.04%)</title><rect x="728.9" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="731.9" y="734.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.04%)</title><rect x="729.3" y="723.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="732.3" y="734.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="729.8" y="723.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="732.8" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="729.8" y="707.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="732.8" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="729.8" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="732.8" y="702.0"></text>
</g>
<g>
<title>__recv (224 samples, 2.80%)</title><rect x="730.1" y="755.0" width="33.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="733.1" y="766.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (213 samples, 2.67%)</title><rect x="731.4" y="739.0" width="31.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="734.4" y="750.0">en..</text>
</g>
<g>
<title>do_syscall_64 (212 samples, 2.65%)</title><rect x="731.6" y="723.0" width="31.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="734.6" y="734.0">do..</text>
</g>
<g>
<title>__x64_sys_recvfrom (205 samples, 2.57%)</title><rect x="732.0" y="707.0" width="30.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="735.0" y="718.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (205 samples, 2.57%)</title><rect x="732.0" y="691.0" width="30.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="735.0" y="702.0">__..</text>
</g>
<g>
<title>fput_many (4 samples, 0.05%)</title><rect x="732.1" y="675.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="735.1" y="686.0"></text>
</g>
<g>
<title>sock_recvmsg (196 samples, 2.45%)</title><rect x="732.7" y="675.0" width="29.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="735.7" y="686.0">so..</text>
</g>
<g>
<title>inet6_recvmsg (187 samples, 2.34%)</title><rect x="733.2" y="659.0" width="27.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="736.2" y="670.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (186 samples, 2.33%)</title><rect x="733.3" y="643.0" width="27.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="736.3" y="654.0">t..</text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.08%)</title><rect x="733.8" y="627.0" width="0.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="736.8" y="638.0"></text>
</g>
<g>
<title>skb_release_all (6 samples, 0.08%)</title><rect x="733.8" y="611.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="736.8" y="622.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.05%)</title><rect x="733.9" y="595.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="736.9" y="606.0"></text>
</g>
<g>
<title>dst_release (4 samples, 0.05%)</title><rect x="733.9" y="579.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="736.9" y="590.0"></text>
</g>
<g>
<title>sk_wait_data (162 samples, 2.03%)</title><rect x="734.8" y="627.0" width="23.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="737.8" y="638.0">s..</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="734.9" y="611.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="737.9" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="734.9" y="595.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="737.9" y="606.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (2 samples, 0.03%)</title><rect x="734.9" y="579.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="737.9" y="590.0"></text>
</g>
<g>
<title>wait_woken (159 samples, 1.99%)</title><rect x="735.2" y="611.0" width="23.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="738.2" y="622.0">w..</text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="735.4" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="738.4" y="606.0"></text>
</g>
<g>
<title>schedule_timeout (156 samples, 1.95%)</title><rect x="735.7" y="595.0" width="23.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="738.7" y="606.0">s..</text>
</g>
<g>
<title>__mod_timer (17 samples, 0.21%)</title><rect x="735.7" y="579.0" width="2.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="738.7" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (13 samples, 0.16%)</title><rect x="736.0" y="563.0" width="1.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="739.0" y="574.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="737.9" y="563.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="740.9" y="574.0"></text>
</g>
<g>
<title>schedule (139 samples, 1.74%)</title><rect x="738.2" y="579.0" width="20.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="741.2" y="590.0"></text>
</g>
<g>
<title>__sched_text_start (139 samples, 1.74%)</title><rect x="738.2" y="563.0" width="20.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="741.2" y="574.0"></text>
</g>
<g>
<title>finish_task_switch (135 samples, 1.69%)</title><rect x="738.8" y="547.0" width="19.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="741.8" y="558.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (9 samples, 0.11%)</title><rect x="758.7" y="627.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="761.7" y="638.0"></text>
</g>
<g>
<title>__skb_datagram_iter (9 samples, 0.11%)</title><rect x="758.7" y="611.0" width="1.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="761.7" y="622.0"></text>
</g>
<g>
<title>simple_copy_to_iter (7 samples, 0.09%)</title><rect x="759.0" y="595.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="762.0" y="606.0"></text>
</g>
<g>
<title>_copy_to_iter (4 samples, 0.05%)</title><rect x="759.3" y="579.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="762.3" y="590.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.05%)</title><rect x="759.3" y="563.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="762.3" y="574.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="760.1" y="627.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="763.1" y="638.0"></text>
</g>
<g>
<title>tcp_send_ack (2 samples, 0.03%)</title><rect x="760.1" y="611.0" width="0.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="763.1" y="622.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (2 samples, 0.03%)</title><rect x="760.1" y="595.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="763.1" y="606.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (2 samples, 0.03%)</title><rect x="760.1" y="579.0" width="0.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="763.1" y="590.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="760.1" y="563.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="763.1" y="574.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.03%)</title><rect x="760.1" y="547.0" width="0.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="763.1" y="558.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.03%)</title><rect x="760.1" y="531.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="763.1" y="542.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.03%)</title><rect x="760.1" y="515.0" width="0.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="763.1" y="526.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.03%)</title><rect x="760.1" y="499.0" width="0.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="763.1" y="510.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.03%)</title><rect x="760.1" y="483.0" width="0.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="763.1" y="494.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.03%)</title><rect x="760.1" y="467.0" width="0.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="763.1" y="478.0"></text>
</g>
<g>
<title>dev_queue_xmit (2 samples, 0.03%)</title><rect x="760.1" y="451.0" width="0.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="763.1" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (2 samples, 0.03%)</title><rect x="760.1" y="435.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="763.1" y="446.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (2 samples, 0.03%)</title><rect x="760.5" y="627.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="763.5" y="638.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="760.5" y="611.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="763.5" y="622.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.03%)</title><rect x="760.5" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="763.5" y="606.0"></text>
</g>
<g>
<title>security_socket_recvmsg (6 samples, 0.08%)</title><rect x="760.8" y="659.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="763.8" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (6 samples, 0.08%)</title><rect x="760.8" y="643.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="763.8" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.08%)</title><rect x="760.8" y="627.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="763.8" y="638.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (6 samples, 0.08%)</title><rect x="760.8" y="611.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="763.8" y="622.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.03%)</title><rect x="761.4" y="595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="764.4" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.05%)</title><rect x="761.7" y="675.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="764.7" y="686.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="762.0" y="659.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="765.0" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="762.3" y="707.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="765.3" y="718.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.05%)</title><rect x="762.3" y="691.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="765.3" y="702.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.05%)</title><rect x="762.3" y="675.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="765.3" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (4 samples, 0.05%)</title><rect x="762.3" y="659.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="765.3" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="762.9" y="739.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="765.9" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="762.9" y="723.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="765.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="762.9" y="707.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="765.9" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (5 samples, 0.06%)</title><rect x="763.3" y="771.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (40 samples, 0.50%)</title><rect x="764.2" y="787.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="767.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.06%)</title><rect x="764.8" y="771.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.8" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (12 samples, 0.15%)</title><rect x="765.7" y="771.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.14%)</title><rect x="765.8" y="755.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="768.8" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.14%)</title><rect x="765.8" y="739.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.8" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.03%)</title><rect x="767.4" y="771.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="770.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.04%)</title><rect x="767.7" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="770.7" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="767.9" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="770.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (13 samples, 0.16%)</title><rect x="768.2" y="771.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="771.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.08%)</title><rect x="768.9" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="771.9" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.08%)</title><rect x="768.9" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="771.9" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="769.5" y="723.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="772.5" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="769.5" y="707.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="772.5" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="769.5" y="691.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="772.5" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="769.8" y="755.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="772.8" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="769.8" y="739.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="772.8" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="769.8" y="723.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="772.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (35 samples, 0.44%)</title><rect x="770.1" y="787.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="773.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (6 samples, 0.08%)</title><rect x="774.1" y="771.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="777.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="774.1" y="755.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="777.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="774.1" y="739.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (6 samples, 0.08%)</title><rect x="774.1" y="723.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="777.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.08%)</title><rect x="774.1" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.1" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="775.0" y="771.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="778.0" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="775.0" y="755.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="778.0" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="775.0" y="739.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="778.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (4 samples, 0.05%)</title><rect x="775.3" y="787.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.05%)</title><rect x="775.3" y="771.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.05%)</title><rect x="775.3" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.3" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (85 samples, 1.06%)</title><rect x="775.8" y="787.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="778.8" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.03%)</title><rect x="776.1" y="771.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="779.1" y="782.0"></text>
</g>
<g>
<title>setsockopt (80 samples, 1.00%)</title><rect x="776.4" y="771.0" width="11.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="779.4" y="782.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (75 samples, 0.94%)</title><rect x="777.2" y="755.0" width="11.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="780.2" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (75 samples, 0.94%)</title><rect x="777.2" y="739.0" width="11.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="780.2" y="750.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (64 samples, 0.80%)</title><rect x="778.2" y="723.0" width="9.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="781.2" y="734.0"></text>
</g>
<g>
<title>__sys_setsockopt (64 samples, 0.80%)</title><rect x="778.2" y="707.0" width="9.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="781.2" y="718.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (10 samples, 0.13%)</title><rect x="778.7" y="691.0" width="1.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="781.7" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (8 samples, 0.10%)</title><rect x="780.1" y="691.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="783.1" y="702.0"></text>
</g>
<g>
<title>bpf_prog_array_is_empty (2 samples, 0.03%)</title><rect x="781.3" y="691.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="784.3" y="702.0"></text>
</g>
<g>
<title>security_socket_setsockopt (14 samples, 0.18%)</title><rect x="781.6" y="691.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="784.6" y="702.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (13 samples, 0.16%)</title><rect x="781.8" y="675.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="784.8" y="686.0"></text>
</g>
<g>
<title>aa_sk_perm (13 samples, 0.16%)</title><rect x="781.8" y="659.0" width="1.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="784.8" y="670.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (8 samples, 0.10%)</title><rect x="782.5" y="643.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="785.5" y="654.0"></text>
</g>
<g>
<title>aa_profile_af_perm (4 samples, 0.05%)</title><rect x="783.1" y="627.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="786.1" y="638.0"></text>
</g>
<g>
<title>sock_setsockopt (19 samples, 0.24%)</title><rect x="783.7" y="691.0" width="2.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="786.7" y="702.0"></text>
</g>
<g>
<title>release_sock (5 samples, 0.06%)</title><rect x="784.9" y="675.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="787.9" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="785.3" y="659.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="788.3" y="670.0"></text>
</g>
<g>
<title>sock_set_timeout (5 samples, 0.06%)</title><rect x="785.6" y="675.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="788.6" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (8 samples, 0.10%)</title><rect x="786.5" y="691.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="789.5" y="702.0"></text>
</g>
<g>
<title>__fdget (7 samples, 0.09%)</title><rect x="786.5" y="675.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="789.5" y="686.0"></text>
</g>
<g>
<title>__fget_light (7 samples, 0.09%)</title><rect x="786.5" y="659.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="789.5" y="670.0"></text>
</g>
<g>
<title>__fget (7 samples, 0.09%)</title><rect x="786.5" y="643.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="789.5" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.05%)</title><rect x="787.7" y="723.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="790.7" y="734.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.05%)</title><rect x="787.7" y="707.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="790.7" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (4 samples, 0.05%)</title><rect x="787.7" y="691.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="790.7" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.03%)</title><rect x="788.0" y="675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="791.0" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (941 samples, 11.77%)</title><rect x="788.4" y="787.0" width="138.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.4" y="798.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (13 samples, 0.16%)</title><rect x="789.0" y="771.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="792.0" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="789.4" y="755.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="792.4" y="766.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.08%)</title><rect x="790.0" y="755.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="793.0" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="790.5" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.5" y="750.0"></text>
</g>
<g>
<title>send (924 samples, 11.56%)</title><rect x="790.9" y="771.0" width="136.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="793.9" y="782.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (921 samples, 11.52%)</title><rect x="791.4" y="755.0" width="135.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="794.4" y="766.0">entry_SYSCALL_64_..</text>
</g>
<g>
<title>do_syscall_64 (921 samples, 11.52%)</title><rect x="791.4" y="739.0" width="135.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="794.4" y="750.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (880 samples, 11.01%)</title><rect x="791.6" y="723.0" width="130.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="794.6" y="734.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (880 samples, 11.01%)</title><rect x="791.6" y="707.0" width="130.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="794.6" y="718.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.04%)</title><rect x="791.6" y="691.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="794.6" y="702.0"></text>
</g>
<g>
<title>sock_sendmsg (874 samples, 10.94%)</title><rect x="792.1" y="691.0" width="129.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="795.1" y="702.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (865 samples, 10.82%)</title><rect x="792.4" y="675.0" width="127.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="795.4" y="686.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (865 samples, 10.82%)</title><rect x="792.4" y="659.0" width="127.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="795.4" y="670.0">tcp_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="792.4" y="643.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="795.4" y="654.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (5 samples, 0.06%)</title><rect x="792.7" y="643.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="795.7" y="654.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (855 samples, 10.70%)</title><rect x="793.4" y="643.0" width="126.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="796.4" y="654.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="794.0" y="627.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="797.0" y="638.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="794.0" y="611.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="797.0" y="622.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.03%)</title><rect x="794.3" y="627.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="797.3" y="638.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (41 samples, 0.51%)</title><rect x="794.7" y="627.0" width="6.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="797.7" y="638.0"></text>
</g>
<g>
<title>__alloc_skb (39 samples, 0.49%)</title><rect x="795.0" y="611.0" width="5.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="798.0" y="622.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (21 samples, 0.26%)</title><rect x="795.3" y="595.0" width="3.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="798.3" y="606.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.06%)</title><rect x="795.3" y="579.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="798.3" y="590.0"></text>
</g>
<g>
<title>memset (15 samples, 0.19%)</title><rect x="796.2" y="579.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="799.2" y="590.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.08%)</title><rect x="798.4" y="595.0" width="0.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="801.4" y="606.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.03%)</title><rect x="799.3" y="595.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="802.3" y="606.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.03%)</title><rect x="799.3" y="579.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="802.3" y="590.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (2 samples, 0.03%)</title><rect x="799.6" y="595.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="802.6" y="606.0"></text>
</g>
<g>
<title>memset (6 samples, 0.08%)</title><rect x="799.9" y="595.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="802.9" y="606.0"></text>
</g>
<g>
<title>skb_entail (5 samples, 0.06%)</title><rect x="800.8" y="627.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="803.8" y="638.0"></text>
</g>
<g>
<title>tcp_push (791 samples, 9.90%)</title><rect x="801.5" y="627.0" width="116.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="804.5" y="638.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (791 samples, 9.90%)</title><rect x="801.5" y="611.0" width="116.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="804.5" y="622.0">__tcp_push_pen..</text>
</g>
<g>
<title>tcp_write_xmit (789 samples, 9.87%)</title><rect x="801.8" y="595.0" width="116.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="804.8" y="606.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (776 samples, 9.71%)</title><rect x="802.1" y="579.0" width="114.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="805.1" y="590.0">__tcp_transmit..</text>
</g>
<g>
<title>ip_queue_xmit (770 samples, 9.63%)</title><rect x="802.7" y="563.0" width="113.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="805.7" y="574.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (770 samples, 9.63%)</title><rect x="802.7" y="547.0" width="113.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="805.7" y="558.0">__ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (767 samples, 9.60%)</title><rect x="803.0" y="531.0" width="113.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="806.0" y="542.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (7 samples, 0.09%)</title><rect x="803.2" y="515.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="806.2" y="526.0"></text>
</g>
<g>
<title>ip_send_check (7 samples, 0.09%)</title><rect x="803.2" y="499.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="806.2" y="510.0"></text>
</g>
<g>
<title>ip_output (759 samples, 9.50%)</title><rect x="804.2" y="515.0" width="112.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="807.2" y="526.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (758 samples, 9.48%)</title><rect x="804.3" y="499.0" width="112.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="807.3" y="510.0">ip_finish_out..</text>
</g>
<g>
<title>__ip_finish_output (758 samples, 9.48%)</title><rect x="804.3" y="483.0" width="112.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="807.3" y="494.0">__ip_finish_o..</text>
</g>
<g>
<title>ip_finish_output2 (757 samples, 9.47%)</title><rect x="804.5" y="467.0" width="111.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="807.5" y="478.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (744 samples, 9.31%)</title><rect x="804.9" y="451.0" width="109.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="807.9" y="462.0">__local_bh_en..</text>
</g>
<g>
<title>do_softirq.part.0 (744 samples, 9.31%)</title><rect x="804.9" y="435.0" width="109.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="807.9" y="446.0">do_softirq.pa..</text>
</g>
<g>
<title>do_softirq_own_stack (741 samples, 9.27%)</title><rect x="805.4" y="419.0" width="109.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="808.4" y="430.0">do_softirq_ow..</text>
</g>
<g>
<title>__softirqentry_text_start (739 samples, 9.25%)</title><rect x="805.4" y="403.0" width="109.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="808.4" y="414.0">__softirqentr..</text>
</g>
<g>
<title>net_rx_action (738 samples, 9.23%)</title><rect x="805.5" y="387.0" width="109.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="808.5" y="398.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (736 samples, 9.21%)</title><rect x="805.8" y="371.0" width="108.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="808.8" y="382.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (733 samples, 9.17%)</title><rect x="806.3" y="355.0" width="108.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="809.3" y="366.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (733 samples, 9.17%)</title><rect x="806.3" y="339.0" width="108.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="809.3" y="350.0">__netif_recei..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.04%)</title><rect x="806.3" y="323.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="809.3" y="334.0"></text>
</g>
<g>
<title>ip_rcv (730 samples, 9.13%)</title><rect x="806.7" y="323.0" width="107.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="809.7" y="334.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (2 samples, 0.03%)</title><rect x="806.9" y="307.0" width="0.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="809.9" y="318.0"></text>
</g>
<g>
<title>ip_rcv_finish (726 samples, 9.08%)</title><rect x="807.1" y="307.0" width="107.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="810.1" y="318.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (725 samples, 9.07%)</title><rect x="807.3" y="291.0" width="107.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="810.3" y="302.0">ip_local_deli..</text>
</g>
<g>
<title>ip_local_deliver_finish (724 samples, 9.06%)</title><rect x="807.4" y="275.0" width="106.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="810.4" y="286.0">ip_local_deli..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (724 samples, 9.06%)</title><rect x="807.4" y="259.0" width="106.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="810.4" y="270.0">ip_protocol_d..</text>
</g>
<g>
<title>tcp_v4_rcv (722 samples, 9.03%)</title><rect x="807.7" y="243.0" width="106.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="810.7" y="254.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (24 samples, 0.30%)</title><rect x="808.9" y="227.0" width="3.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="811.9" y="238.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (688 samples, 8.61%)</title><rect x="812.8" y="227.0" width="101.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="815.8" y="238.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (6 samples, 0.08%)</title><rect x="812.9" y="211.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="815.9" y="222.0"></text>
</g>
<g>
<title>tcp_rcv_established (681 samples, 8.52%)</title><rect x="813.8" y="211.0" width="100.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="816.8" y="222.0">tcp_rcv_esta..</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.04%)</title><rect x="814.2" y="195.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.2" y="206.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.04%)</title><rect x="814.2" y="179.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.2" y="190.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="814.4" y="163.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="817.4" y="174.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.03%)</title><rect x="814.4" y="147.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="817.4" y="158.0"></text>
</g>
<g>
<title>tcp_ack (46 samples, 0.58%)</title><rect x="815.0" y="195.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="818.0" y="206.0"></text>
</g>
<g>
<title>rb_first (2 samples, 0.03%)</title><rect x="816.9" y="179.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="819.9" y="190.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (30 samples, 0.38%)</title><rect x="817.2" y="179.0" width="4.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="820.2" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (25 samples, 0.31%)</title><rect x="817.6" y="163.0" width="3.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="820.6" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.06%)</title><rect x="817.6" y="147.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="820.6" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (5 samples, 0.06%)</title><rect x="817.6" y="131.0" width="0.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="820.6" y="142.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="818.1" y="115.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="821.1" y="126.0"></text>
</g>
<g>
<title>skb_release_all (20 samples, 0.25%)</title><rect x="818.4" y="147.0" width="2.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="821.4" y="158.0"></text>
</g>
<g>
<title>skb_release_data (20 samples, 0.25%)</title><rect x="818.4" y="131.0" width="2.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="821.4" y="142.0"></text>
</g>
<g>
<title>skb_free_head (3 samples, 0.04%)</title><rect x="820.9" y="115.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="823.9" y="126.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.04%)</title><rect x="820.9" y="99.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="823.9" y="110.0"></text>
</g>
<g>
<title>tcp_data_ready (611 samples, 7.65%)</title><rect x="821.8" y="195.0" width="90.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="824.8" y="206.0">tcp_data_r..</text>
</g>
<g>
<title>sock_def_readable (611 samples, 7.65%)</title><rect x="821.8" y="179.0" width="90.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="824.8" y="190.0">sock_def_r..</text>
</g>
<g>
<title>__wake_up_sync_key (607 samples, 7.60%)</title><rect x="822.4" y="163.0" width="89.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="825.4" y="174.0">__wake_up_..</text>
</g>
<g>
<title>__wake_up_common_lock (607 samples, 7.60%)</title><rect x="822.4" y="147.0" width="89.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="825.4" y="158.0">__wake_up_..</text>
</g>
<g>
<title>__lock_text_start (607 samples, 7.60%)</title><rect x="822.4" y="131.0" width="89.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="825.4" y="142.0">__lock_tex..</text>
</g>
<g>
<title>tcp_event_data_recv (5 samples, 0.06%)</title><rect x="912.0" y="195.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="915.0" y="206.0"></text>
</g>
<g>
<title>tcp_grow_window.isra.0 (4 samples, 0.05%)</title><rect x="912.1" y="179.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="915.1" y="190.0"></text>
</g>
<g>
<title>tcp_grow_window.isra.0 (3 samples, 0.04%)</title><rect x="912.7" y="195.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="915.7" y="206.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.06%)</title><rect x="913.2" y="195.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="916.2" y="206.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.05%)</title><rect x="913.3" y="179.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="916.3" y="190.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.03%)</title><rect x="913.9" y="195.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="916.9" y="206.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="914.5" y="403.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="917.5" y="414.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.13%)</title><rect x="914.8" y="451.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="917.8" y="462.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.13%)</title><rect x="914.8" y="435.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="917.8" y="446.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (4 samples, 0.05%)</title><rect x="915.4" y="419.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="918.4" y="430.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.04%)</title><rect x="915.4" y="403.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="918.4" y="414.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="915.5" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="918.5" y="398.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="916.9" y="579.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="919.9" y="590.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (4 samples, 0.05%)</title><rect x="917.4" y="579.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="920.4" y="590.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.04%)</title><rect x="917.6" y="563.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="920.6" y="574.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.03%)</title><rect x="918.3" y="627.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="921.3" y="638.0"></text>
</g>
<g>
<title>tcp_send_mss (7 samples, 0.09%)</title><rect x="918.6" y="627.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="921.6" y="638.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.03%)</title><rect x="918.6" y="611.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="921.6" y="622.0"></text>
</g>
<g>
<title>tcp_current_mss (5 samples, 0.06%)</title><rect x="918.9" y="611.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="921.9" y="622.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.05%)</title><rect x="919.1" y="595.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="922.1" y="606.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="919.7" y="643.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="922.7" y="654.0"></text>
</g>
<g>
<title>security_socket_sendmsg (7 samples, 0.09%)</title><rect x="920.1" y="675.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="923.1" y="686.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.08%)</title><rect x="920.2" y="659.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="923.2" y="670.0"></text>
</g>
<g>
<title>aa_sk_perm (6 samples, 0.08%)</title><rect x="920.2" y="643.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="923.2" y="654.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (4 samples, 0.05%)</title><rect x="920.5" y="627.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="923.5" y="638.0"></text>
</g>
<g>
<title>aa_profile_af_perm (2 samples, 0.03%)</title><rect x="920.8" y="611.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="923.8" y="622.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.04%)</title><rect x="921.1" y="691.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="924.1" y="702.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="921.3" y="675.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="924.3" y="686.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="921.3" y="659.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="924.3" y="670.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.03%)</title><rect x="921.3" y="643.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="924.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (39 samples, 0.49%)</title><rect x="921.6" y="723.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="924.6" y="734.0"></text>
</g>
<g>
<title>schedule (37 samples, 0.46%)</title><rect x="921.9" y="707.0" width="5.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="924.9" y="718.0"></text>
</g>
<g>
<title>__sched_text_start (37 samples, 0.46%)</title><rect x="921.9" y="691.0" width="5.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="924.9" y="702.0"></text>
</g>
<g>
<title>finish_task_switch (36 samples, 0.45%)</title><rect x="922.0" y="675.0" width="5.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="925.0" y="686.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (4 samples, 0.05%)</title><rect x="927.3" y="787.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="930.3" y="798.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (8 samples, 0.10%)</title><rect x="927.9" y="787.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="930.9" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="928.8" y="771.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="931.8" y="782.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="928.8" y="755.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="931.8" y="766.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="928.8" y="739.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="931.8" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.03%)</title><rect x="929.1" y="787.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="932.1" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.03%)</title><rect x="929.1" y="771.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="932.1" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="929.1" y="755.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="932.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (10 samples, 0.13%)</title><rect x="929.4" y="819.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="932.4" y="830.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,731 samples, 21.66%)</title><rect x="931.2" y="915.0" width="255.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="934.2" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="932.7" y="899.0" width="0.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="935.7" y="910.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (5 samples, 0.06%)</title><rect x="932.9" y="899.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="935.9" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (13 samples, 0.16%)</title><rect x="933.7" y="899.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="936.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (13 samples, 0.16%)</title><rect x="933.7" y="883.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="936.7" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (13 samples, 0.16%)</title><rect x="933.7" y="867.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="936.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (610 samples, 7.63%)</title><rect x="935.6" y="899.0" width="90.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="938.6" y="910.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (598 samples, 7.48%)</title><rect x="937.4" y="883.0" width="88.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="940.4" y="894.0">one/nio/ne..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="940.6" y="867.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="943.6" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.08%)</title><rect x="941.2" y="867.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="944.2" y="878.0"></text>
</g>
<g>
<title>clock_gettime (19 samples, 0.24%)</title><rect x="942.2" y="867.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="945.2" y="878.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.06%)</title><rect x="944.3" y="851.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="947.3" y="862.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.06%)</title><rect x="944.3" y="835.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="947.3" y="846.0"></text>
</g>
<g>
<title>epoll_wait (546 samples, 6.83%)</title><rect x="945.1" y="867.0" width="80.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="948.1" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (506 samples, 6.33%)</title><rect x="950.8" y="851.0" width="74.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="953.8" y="862.0">entry_SY..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.04%)</title><rect x="950.8" y="835.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="953.8" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (503 samples, 6.29%)</title><rect x="951.3" y="835.0" width="74.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="954.3" y="846.0">do_sysca..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (501 samples, 6.27%)</title><rect x="951.5" y="819.0" width="74.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="954.5" y="830.0">__x64_sy..</text>
</g>
<g>
<title>do_epoll_wait (500 samples, 6.26%)</title><rect x="951.5" y="803.0" width="73.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="954.5" y="814.0">do_epoll..</text>
</g>
<g>
<title>__fdget (10 samples, 0.13%)</title><rect x="952.7" y="787.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="955.7" y="798.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.13%)</title><rect x="952.7" y="771.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="955.7" y="782.0"></text>
</g>
<g>
<title>__fget (10 samples, 0.13%)</title><rect x="952.7" y="755.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="955.7" y="766.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.03%)</title><rect x="954.2" y="787.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="957.2" y="798.0"></text>
</g>
<g>
<title>ep_poll (468 samples, 5.86%)</title><rect x="954.5" y="787.0" width="69.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="957.5" y="798.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (44 samples, 0.55%)</title><rect x="956.0" y="771.0" width="6.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="959.0" y="782.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.03%)</title><rect x="957.0" y="755.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="960.0" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (34 samples, 0.43%)</title><rect x="957.3" y="755.0" width="5.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="960.3" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (29 samples, 0.36%)</title><rect x="958.0" y="739.0" width="4.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="961.0" y="750.0"></text>
</g>
<g>
<title>sock_poll (23 samples, 0.29%)</title><rect x="958.5" y="723.0" width="3.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="961.5" y="734.0"></text>
</g>
<g>
<title>tcp_poll (4 samples, 0.05%)</title><rect x="960.3" y="707.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="963.3" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (7 samples, 0.09%)</title><rect x="960.9" y="707.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="963.9" y="718.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.04%)</title><rect x="961.9" y="723.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="964.9" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (413 samples, 5.17%)</title><rect x="962.6" y="771.0" width="61.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="965.6" y="782.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (412 samples, 5.16%)</title><rect x="962.8" y="755.0" width="60.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="965.8" y="766.0">schedu..</text>
</g>
<g>
<title>schedule (412 samples, 5.16%)</title><rect x="962.8" y="739.0" width="60.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="965.8" y="750.0">schedule</text>
</g>
<g>
<title>__sched_text_start (410 samples, 5.13%)</title><rect x="963.1" y="723.0" width="60.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="966.1" y="734.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (387 samples, 4.84%)</title><rect x="966.5" y="707.0" width="57.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="969.5" y="718.0">finish..</text>
</g>
<g>
<title>fput_many (9 samples, 0.11%)</title><rect x="1023.7" y="787.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1026.7" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (2 samples, 0.03%)</title><rect x="1025.1" y="787.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1028.1" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,075 samples, 13.45%)</title><rect x="1025.7" y="899.0" width="158.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1028.7" y="910.0">one/nio/net/Session...</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,040 samples, 13.01%)</title><rect x="1030.7" y="883.0" width="153.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1033.7" y="894.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (768 samples, 9.61%)</title><rect x="1030.8" y="867.0" width="113.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1033.8" y="878.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (17 samples, 0.21%)</title><rect x="1034.5" y="851.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1037.5" y="862.0"></text>
</g>
<g>
<title>itable stub (11 samples, 0.14%)</title><rect x="1037.0" y="851.0" width="1.7" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1040.0" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.03%)</title><rect x="1038.7" y="851.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1041.7" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1039.0" y="851.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1042.0" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="1039.3" y="851.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1042.3" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (539 samples, 6.74%)</title><rect x="1039.8" y="851.0" width="79.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1042.8" y="862.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (539 samples, 6.74%)</title><rect x="1039.8" y="835.0" width="79.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.8" y="846.0">one/nio/h..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (503 samples, 6.29%)</title><rect x="1040.0" y="819.0" width="74.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1043.0" y="830.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (29 samples, 0.36%)</title><rect x="1040.0" y="803.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1043.0" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (29 samples, 0.36%)</title><rect x="1040.0" y="787.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1043.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (13 samples, 0.16%)</title><rect x="1041.3" y="771.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (13 samples, 0.16%)</title><rect x="1041.3" y="755.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (4 samples, 0.05%)</title><rect x="1042.6" y="739.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1045.6" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title><rect x="1043.2" y="771.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1046.2" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.04%)</title><rect x="1043.8" y="771.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1046.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1044.0" y="755.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1047.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.03%)</title><rect x="1044.0" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1047.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title><rect x="1044.0" y="723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1047.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.entity (474 samples, 5.93%)</title><rect x="1044.3" y="803.0" width="70.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1047.3" y="814.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1045.0" y="787.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1048.0" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.03%)</title><rect x="1045.0" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1048.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1045.0" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1048.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1045.0" y="739.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1048.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1045.0" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1048.0" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.asyncPut (345 samples, 4.32%)</title><rect x="1045.3" y="787.0" width="50.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1048.3" y="798.0">ru/ma..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (329 samples, 4.12%)</title><rect x="1047.4" y="771.0" width="48.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1050.4" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (328 samples, 4.10%)</title><rect x="1047.5" y="755.0" width="48.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1050.5" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (12 samples, 0.15%)</title><rect x="1048.4" y="739.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1051.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (12 samples, 0.15%)</title><rect x="1048.4" y="723.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1051.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (12 samples, 0.15%)</title><rect x="1048.4" y="707.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1051.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (12 samples, 0.15%)</title><rect x="1048.4" y="691.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1051.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.15%)</title><rect x="1048.4" y="675.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1051.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="1050.2" y="739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1053.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="1050.2" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1053.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="1050.2" y="707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1053.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="1050.2" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1053.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="1050.2" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.2" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="1050.2" y="659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1053.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (308 samples, 3.85%)</title><rect x="1050.5" y="739.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1053.5" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (308 samples, 3.85%)</title><rect x="1050.5" y="723.0" width="45.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1053.5" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (308 samples, 3.85%)</title><rect x="1050.5" y="707.0" width="45.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1053.5" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (308 samples, 3.85%)</title><rect x="1050.5" y="691.0" width="45.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1053.5" y="702.0">java..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (304 samples, 3.80%)</title><rect x="1051.1" y="675.0" width="44.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1054.1" y="686.0">jdk/..</text>
</g>
<g>
<title>Unsafe_Unpark (21 samples, 0.26%)</title><rect x="1051.2" y="659.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1054.2" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.06%)</title><rect x="1052.4" y="643.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.4" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.03%)</title><rect x="1053.3" y="643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.3" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.06%)</title><rect x="1053.6" y="643.0" width="0.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1056.6" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (279 samples, 3.49%)</title><rect x="1054.3" y="659.0" width="41.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1057.3" y="670.0">__p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (276 samples, 3.45%)</title><rect x="1054.8" y="643.0" width="40.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1057.8" y="654.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (276 samples, 3.45%)</title><rect x="1054.8" y="627.0" width="40.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1057.8" y="638.0">do_..</text>
</g>
<g>
<title>__x64_sys_futex (275 samples, 3.44%)</title><rect x="1054.9" y="611.0" width="40.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1057.9" y="622.0">__x..</text>
</g>
<g>
<title>do_futex (275 samples, 3.44%)</title><rect x="1054.9" y="595.0" width="40.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1057.9" y="606.0">do_..</text>
</g>
<g>
<title>futex_wake (273 samples, 3.42%)</title><rect x="1055.1" y="579.0" width="40.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1058.1" y="590.0">fut..</text>
</g>
<g>
<title>mark_wake_futex (7 samples, 0.09%)</title><rect x="1056.2" y="563.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1059.2" y="574.0"></text>
</g>
<g>
<title>wake_up_q (257 samples, 3.22%)</title><rect x="1057.4" y="563.0" width="38.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1060.4" y="574.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (256 samples, 3.20%)</title><rect x="1057.6" y="547.0" width="37.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1060.6" y="558.0">try..</text>
</g>
<g>
<title>__lock_text_start (256 samples, 3.20%)</title><rect x="1057.6" y="531.0" width="37.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1060.6" y="542.0">__l..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="1095.5" y="659.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1098.5" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="1095.9" y="771.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1098.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.checkIdAndReturnTargetNode (94 samples, 1.18%)</title><rect x="1096.2" y="787.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1099.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.03%)</title><rect x="1096.2" y="771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1099.2" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.03%)</title><rect x="1096.2" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.2" y="766.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.03%)</title><rect x="1096.2" y="739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1099.2" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="1096.2" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1099.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.identifyByKey (92 samples, 1.15%)</title><rect x="1096.5" y="771.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/RendezvousHashingImpl.identifyByKey (88 samples, 1.10%)</title><rect x="1097.1" y="755.0" width="13.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1100.1" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1099.3" y="739.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1099.3" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1099.3" y="707.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.3" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1099.3" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1099.3" y="675.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.3" y="686.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHasher.putBytes (18 samples, 0.23%)</title><rect x="1099.6" y="739.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1102.6" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction$Murmur3_32Hasher.putBytes (18 samples, 0.23%)</title><rect x="1099.6" y="723.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1102.6" y="734.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction.access$200 (2 samples, 0.03%)</title><rect x="1102.0" y="707.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1105.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_32HashFunction.getIntLittleEndian (2 samples, 0.03%)</title><rect x="1102.0" y="691.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1105.0" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (14 samples, 0.18%)</title><rect x="1102.3" y="739.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1105.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1104.1" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1107.1" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1104.1" y="707.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1104.1" y="691.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.1" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.firstEntry (10 samples, 0.13%)</title><rect x="1104.4" y="739.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1107.4" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (10 samples, 0.13%)</title><rect x="1104.4" y="723.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (5 samples, 0.06%)</title><rect x="1105.1" y="707.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1108.1" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (29 samples, 0.36%)</title><rect x="1105.8" y="739.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1108.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="1107.9" y="723.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1108.1" y="707.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1111.1" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1108.1" y="691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1111.1" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1108.1" y="675.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.1" y="686.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (6 samples, 0.08%)</title><rect x="1108.4" y="723.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1111.4" y="734.0"></text>
</g>
<g>
<title>java/lang/String$CaseInsensitiveComparator.compare (6 samples, 0.08%)</title><rect x="1108.4" y="707.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1111.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.compareToCI (6 samples, 0.08%)</title><rect x="1108.4" y="691.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1111.4" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (6 samples, 0.08%)</title><rect x="1109.2" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1112.2" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/SharedAsyncServiceImpl.proxyForwarding (28 samples, 0.35%)</title><rect x="1110.1" y="787.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1113.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (24 samples, 0.30%)</title><rect x="1110.7" y="771.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1113.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (12 samples, 0.15%)</title><rect x="1112.5" y="755.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1115.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title><rect x="1114.0" y="739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1117.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title><rect x="1114.0" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1117.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title><rect x="1114.0" y="707.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1117.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.03%)</title><rect x="1114.0" y="691.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (35 samples, 0.44%)</title><rect x="1114.3" y="819.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1117.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (35 samples, 0.44%)</title><rect x="1114.3" y="803.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (22 samples, 0.28%)</title><rect x="1114.3" y="787.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1117.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (13 samples, 0.16%)</title><rect x="1117.5" y="787.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1120.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (13 samples, 0.16%)</title><rect x="1117.5" y="771.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1120.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (13 samples, 0.16%)</title><rect x="1117.5" y="755.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1120.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (58 samples, 0.73%)</title><rect x="1119.4" y="851.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1122.4" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8 samples, 0.10%)</title><rect x="1120.5" y="835.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1123.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.09%)</title><rect x="1120.6" y="819.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1123.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.09%)</title><rect x="1120.6" y="803.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1123.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (7 samples, 0.09%)</title><rect x="1120.6" y="787.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.30%)</title><rect x="1121.6" y="835.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1124.6" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (23 samples, 0.29%)</title><rect x="1121.8" y="819.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1124.8" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (19 samples, 0.24%)</title><rect x="1125.2" y="835.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1128.2" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (30 samples, 0.38%)</title><rect x="1128.0" y="851.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1131.0" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (14 samples, 0.18%)</title><rect x="1129.9" y="835.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1132.9" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.18%)</title><rect x="1129.9" y="819.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1132.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.04%)</title><rect x="1132.0" y="835.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1135.0" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title><rect x="1132.0" y="819.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1135.0" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.04%)</title><rect x="1132.0" y="803.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1132.1" y="787.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1132.1" y="771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.1" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (80 samples, 1.00%)</title><rect x="1132.4" y="851.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1135.4" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (27 samples, 0.34%)</title><rect x="1140.2" y="835.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1143.2" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (6 samples, 0.08%)</title><rect x="1142.6" y="819.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.06%)</title><rect x="1142.8" y="803.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.8" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.06%)</title><rect x="1142.8" y="787.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.8" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.05%)</title><rect x="1142.9" y="771.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.9" y="782.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="1142.9" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.9" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1143.2" y="755.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1143.2" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1143.9" y="819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1146.9" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1143.9" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1146.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1143.9" y="787.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1146.9" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1143.9" y="771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.9" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1143.9" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1143.9" y="739.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.9" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1143.9" y="723.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1143.9" y="707.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1143.9" y="691.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="1143.9" y="675.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="1143.9" y="659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.9" y="670.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (270 samples, 3.38%)</title><rect x="1144.4" y="867.0" width="39.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1147.4" y="878.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (264 samples, 3.30%)</title><rect x="1145.3" y="851.0" width="38.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1148.3" y="862.0">one..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.04%)</title><rect x="1147.2" y="835.0" width="0.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1150.2" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (63 samples, 0.79%)</title><rect x="1147.6" y="835.0" width="9.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1150.6" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.05%)</title><rect x="1148.2" y="819.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1151.2" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1148.8" y="819.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.8" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (5 samples, 0.06%)</title><rect x="1149.2" y="819.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.2" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (47 samples, 0.59%)</title><rect x="1150.0" y="819.0" width="6.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1153.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.05%)</title><rect x="1151.9" y="803.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (30 samples, 0.38%)</title><rect x="1152.5" y="803.0" width="4.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1155.5" y="814.0"></text>
</g>
<g>
<title>__recv (183 samples, 2.29%)</title><rect x="1156.9" y="835.0" width="27.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1159.9" y="846.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (172 samples, 2.15%)</title><rect x="1158.6" y="819.0" width="25.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1161.6" y="830.0">e..</text>
</g>
<g>
<title>do_syscall_64 (171 samples, 2.14%)</title><rect x="1158.7" y="803.0" width="25.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1161.7" y="814.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (162 samples, 2.03%)</title><rect x="1160.0" y="787.0" width="23.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1163.0" y="798.0">_..</text>
</g>
<g>
<title>__sys_recvfrom (157 samples, 1.96%)</title><rect x="1160.0" y="771.0" width="23.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1163.0" y="782.0">_..</text>
</g>
<g>
<title>sock_recvmsg (133 samples, 1.66%)</title><rect x="1160.8" y="755.0" width="19.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1163.8" y="766.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.04%)</title><rect x="1160.8" y="739.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1163.8" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (105 samples, 1.31%)</title><rect x="1161.2" y="739.0" width="15.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1164.2" y="750.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="1161.7" y="723.0" width="0.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1164.7" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (100 samples, 1.25%)</title><rect x="1161.9" y="723.0" width="14.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1164.9" y="734.0"></text>
</g>
<g>
<title>__kfree_skb (19 samples, 0.24%)</title><rect x="1165.5" y="707.0" width="2.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1168.5" y="718.0"></text>
</g>
<g>
<title>skb_release_all (16 samples, 0.20%)</title><rect x="1165.6" y="691.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1168.6" y="702.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.05%)</title><rect x="1165.8" y="675.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (9 samples, 0.11%)</title><rect x="1166.4" y="675.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1169.4" y="686.0"></text>
</g>
<g>
<title>dst_release (9 samples, 0.11%)</title><rect x="1166.4" y="659.0" width="1.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1169.4" y="670.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.03%)</title><rect x="1167.7" y="675.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1170.7" y="686.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.03%)</title><rect x="1168.4" y="707.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.4" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (4 samples, 0.05%)</title><rect x="1168.7" y="707.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1171.7" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.05%)</title><rect x="1168.7" y="691.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1171.7" y="702.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (4 samples, 0.05%)</title><rect x="1168.7" y="675.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1171.7" y="686.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="1169.3" y="707.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1172.3" y="718.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (35 samples, 0.44%)</title><rect x="1169.6" y="707.0" width="5.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (35 samples, 0.44%)</title><rect x="1169.6" y="691.0" width="5.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (21 samples, 0.26%)</title><rect x="1171.7" y="675.0" width="3.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1174.7" y="686.0"></text>
</g>
<g>
<title>__check_object_size (14 samples, 0.18%)</title><rect x="1171.8" y="659.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.06%)</title><rect x="1173.2" y="643.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1176.2" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (4 samples, 0.05%)</title><rect x="1174.1" y="659.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1177.1" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (4 samples, 0.05%)</title><rect x="1174.1" y="643.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1177.1" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.04%)</title><rect x="1174.9" y="707.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (5 samples, 0.06%)</title><rect x="1175.5" y="707.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.05%)</title><rect x="1175.7" y="691.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.04%)</title><rect x="1175.8" y="675.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.04%)</title><rect x="1176.3" y="707.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.3" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (25 samples, 0.31%)</title><rect x="1176.7" y="739.0" width="3.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (24 samples, 0.30%)</title><rect x="1176.9" y="723.0" width="3.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1179.9" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (23 samples, 0.29%)</title><rect x="1177.0" y="707.0" width="3.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1180.0" y="718.0"></text>
</g>
<g>
<title>aa_label_sk_perm.part.0 (12 samples, 0.15%)</title><rect x="1178.6" y="691.0" width="1.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1181.6" y="702.0"></text>
</g>
<g>
<title>aa_profile_af_perm (9 samples, 0.11%)</title><rect x="1179.1" y="675.0" width="1.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1182.1" y="686.0"></text>
</g>
<g>
<title>sockfd_lookup_light (19 samples, 0.24%)</title><rect x="1180.4" y="755.0" width="2.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1183.4" y="766.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.11%)</title><rect x="1180.4" y="739.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1183.4" y="750.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.11%)</title><rect x="1180.4" y="723.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1183.4" y="734.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.11%)</title><rect x="1180.4" y="707.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1183.4" y="718.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.13%)</title><rect x="1181.7" y="739.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.05%)</title><rect x="1183.4" y="771.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="1183.9" y="835.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1186.9" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (16 samples, 0.20%)</title><rect x="1184.4" y="899.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="910.0"></text>
</g>
<g>
<title>gettimeofday (13 samples, 0.16%)</title><rect x="1184.8" y="883.0" width="2.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1187.8" y="894.0"></text>
</g>
<g>
<title>[vdso] (11 samples, 0.14%)</title><rect x="1185.1" y="867.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1188.1" y="878.0"></text>
</g>
<g>
<title>start_thread (22 samples, 0.28%)</title><rect x="1186.8" y="915.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1189.8" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (22 samples, 0.28%)</title><rect x="1186.8" y="899.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1189.8" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (22 samples, 0.28%)</title><rect x="1186.8" y="883.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="894.0"></text>
</g>
<g>
<title>GangWorker::loop() (20 samples, 0.25%)</title><rect x="1186.8" y="867.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="878.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 0.15%)</title><rect x="1186.9" y="851.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.9" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.09%)</title><rect x="1187.0" y="835.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="846.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.06%)</title><rect x="1187.3" y="819.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.3" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.04%)</title><rect x="1188.2" y="835.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.2" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.04%)</title><rect x="1188.2" y="819.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.2" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (3 samples, 0.04%)</title><rect x="1188.2" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.2" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.04%)</title><rect x="1188.2" y="787.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.2" y="798.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (2 samples, 0.03%)</title><rect x="1188.4" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (4 samples, 0.05%)</title><rect x="1188.7" y="851.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (4 samples, 0.05%)</title><rect x="1188.7" y="835.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (3 samples, 0.04%)</title><rect x="1189.3" y="851.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.3" y="862.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.04%)</title><rect x="1189.3" y="835.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1192.3" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.04%)</title><rect x="1189.3" y="819.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1192.3" y="830.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.04%)</title><rect x="1189.3" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1192.3" y="814.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.04%)</title><rect x="1189.3" y="787.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1192.3" y="798.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.04%)</title><rect x="1189.3" y="771.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1192.3" y="782.0"></text>
</g>
<g>
<title>wake_up_q (3 samples, 0.04%)</title><rect x="1189.3" y="755.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1192.3" y="766.0"></text>
</g>
<g>
<title>try_to_wake_up (3 samples, 0.04%)</title><rect x="1189.3" y="739.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1192.3" y="750.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.04%)</title><rect x="1189.3" y="723.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1192.3" y="734.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.03%)</title><rect x="1189.7" y="867.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.7" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.03%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (2 samples, 0.03%)</title><rect x="1189.7" y="835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.7" y="846.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.03%)</title><rect x="1189.7" y="819.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.7" y="830.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.03%)</title><rect x="1189.7" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.03%)</title><rect x="1189.7" y="787.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.7" y="798.0"></text>
</g>
</g>
</svg>
