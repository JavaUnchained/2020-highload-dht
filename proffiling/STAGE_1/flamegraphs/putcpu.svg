<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="965"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="965"> </text>
<g id="frames">
<g>
<title>all (2,316 samples, 100.00%)</title><rect x="10.0" y="931.0" width="1180.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="942.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.04%)</title><rect x="10.0" y="915.0" width="0.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="10.0" y="899.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="10.0" y="883.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="10.0" y="867.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.04%)</title><rect x="10.0" y="851.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.04%)</title><rect x="10.0" y="835.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.04%)</title><rect x="10.0" y="819.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.04%)</title><rect x="10.0" y="803.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="10.0" y="787.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.04%)</title><rect x="10.0" y="771.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="10.0" y="755.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (2,314 samples, 99.91%)</title><rect x="10.5" y="915.0" width="1179.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.5" y="926.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (212 samples, 9.15%)</title><rect x="12.5" y="899.0" width="108.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="15.5" y="910.0">one/nio/net/N..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (198 samples, 8.55%)</title><rect x="19.7" y="883.0" width="100.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="22.7" y="894.0">one/nio/net/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="21.7" y="867.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="24.7" y="878.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.04%)</title><rect x="22.2" y="867.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.2" y="878.0"></text>
</g>
<g>
<title>clock_gettime (12 samples, 0.52%)</title><rect x="22.7" y="867.0" width="6.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="25.7" y="878.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.17%)</title><rect x="26.8" y="851.0" width="2.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="29.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.17%)</title><rect x="26.8" y="835.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="29.8" y="846.0"></text>
</g>
<g>
<title>clock_gettime@plt (1 samples, 0.04%)</title><rect x="28.9" y="867.0" width="0.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="31.9" y="878.0"></text>
</g>
<g>
<title>epoll_wait (175 samples, 7.56%)</title><rect x="29.4" y="867.0" width="89.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="32.4" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (169 samples, 7.30%)</title><rect x="32.4" y="851.0" width="86.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="35.4" y="862.0">entry_SYSC..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (3 samples, 0.13%)</title><rect x="32.4" y="835.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="35.4" y="846.0"></text>
</g>
<g>
<title>do_syscall_64 (166 samples, 7.17%)</title><rect x="33.9" y="835.0" width="84.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="36.9" y="846.0">do_syscall..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (158 samples, 6.82%)</title><rect x="38.0" y="819.0" width="80.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="41.0" y="830.0">__x64_sys..</text>
</g>
<g>
<title>__fdget (1 samples, 0.04%)</title><rect x="38.0" y="803.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="41.0" y="814.0"></text>
</g>
<g>
<title>do_epoll_wait (157 samples, 6.78%)</title><rect x="38.5" y="803.0" width="80.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="41.5" y="814.0">do_epoll_..</text>
</g>
<g>
<title>__fdget (8 samples, 0.35%)</title><rect x="39.0" y="787.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="42.0" y="798.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.35%)</title><rect x="39.0" y="771.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="42.0" y="782.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.35%)</title><rect x="39.0" y="755.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="42.0" y="766.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.22%)</title><rect x="43.1" y="787.0" width="2.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="46.1" y="798.0"></text>
</g>
<g>
<title>ep_poll (143 samples, 6.17%)</title><rect x="45.7" y="787.0" width="72.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="48.7" y="798.0">ep_poll</text>
</g>
<g>
<title>_raw_write_lock_irq (1 samples, 0.04%)</title><rect x="48.7" y="771.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="51.7" y="782.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (18 samples, 0.78%)</title><rect x="49.2" y="771.0" width="9.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.2" y="782.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="49.7" y="755.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="52.7" y="766.0"></text>
</g>
<g>
<title>ep_send_events_proc (16 samples, 0.69%)</title><rect x="50.3" y="755.0" width="8.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="53.3" y="766.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (13 samples, 0.56%)</title><rect x="51.8" y="739.0" width="6.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="54.8" y="750.0"></text>
</g>
<g>
<title>sock_poll (8 samples, 0.35%)</title><rect x="53.3" y="723.0" width="4.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="56.3" y="734.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.13%)</title><rect x="55.3" y="707.0" width="1.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="58.3" y="718.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.04%)</title><rect x="56.9" y="707.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="59.9" y="718.0"></text>
</g>
<g>
<title>tcp_poll (2 samples, 0.09%)</title><rect x="57.4" y="723.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="60.4" y="734.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.04%)</title><rect x="58.4" y="771.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="61.4" y="782.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.04%)</title><rect x="58.9" y="771.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="61.9" y="782.0"></text>
</g>
<g>
<title>mutex_unlock (1 samples, 0.04%)</title><rect x="59.4" y="771.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="62.4" y="782.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (115 samples, 4.97%)</title><rect x="59.9" y="771.0" width="58.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="62.9" y="782.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (115 samples, 4.97%)</title><rect x="59.9" y="755.0" width="58.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="62.9" y="766.0">schedu..</text>
</g>
<g>
<title>__schedule (1 samples, 0.04%)</title><rect x="59.9" y="739.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="62.9" y="750.0"></text>
</g>
<g>
<title>schedule (114 samples, 4.92%)</title><rect x="60.4" y="739.0" width="58.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="63.4" y="750.0">schedule</text>
</g>
<g>
<title>__schedule (114 samples, 4.92%)</title><rect x="60.4" y="723.0" width="58.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="63.4" y="734.0">__sche..</text>
</g>
<g>
<title>finish_task_switch (114 samples, 4.92%)</title><rect x="60.4" y="707.0" width="58.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="63.4" y="718.0">finish..</text>
</g>
<g>
<title>ret_from_intr (1 samples, 0.04%)</title><rect x="118.0" y="691.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="121.0" y="702.0"></text>
</g>
<g>
<title>do_IRQ (1 samples, 0.04%)</title><rect x="118.0" y="675.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="121.0" y="686.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="118.0" y="659.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="121.0" y="670.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="118.0" y="643.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="121.0" y="654.0"></text>
</g>
<g>
<title>epoll_wait@plt (4 samples, 0.17%)</title><rect x="118.5" y="867.0" width="2.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="121.5" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (2,097 samples, 90.54%)</title><rect x="120.6" y="899.0" width="1068.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="123.6" y="910.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (2,096 samples, 90.50%)</title><rect x="121.1" y="883.0" width="1067.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="124.1" y="894.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,951 samples, 84.24%)</title><rect x="124.1" y="867.0" width="994.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.1" y="878.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,878 samples, 81.09%)</title><rect x="133.3" y="851.0" width="956.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="136.3" y="862.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,876 samples, 81.00%)</title><rect x="134.3" y="835.0" width="955.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="137.3" y="846.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (1,854 samples, 80.05%)</title><rect x="135.3" y="819.0" width="944.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="138.3" y="830.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (979 samples, 42.27%)</title><rect x="136.9" y="803.0" width="498.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.9" y="814.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (962 samples, 41.54%)</title><rect x="141.5" y="787.0" width="490.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.5" y="798.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (24 samples, 1.04%)</title><rect x="141.5" y="771.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.5" y="782.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (11 samples, 0.47%)</title><rect x="148.1" y="755.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.47%)</title><rect x="148.1" y="739.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.47%)</title><rect x="148.1" y="723.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.47%)</title><rect x="148.1" y="707.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="151.1" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (11 samples, 0.47%)</title><rect x="148.1" y="691.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.1" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="153.2" y="675.0" width="0.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="156.2" y="686.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (938 samples, 40.50%)</title><rect x="153.7" y="771.0" width="477.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (938 samples, 40.50%)</title><rect x="153.7" y="755.0" width="477.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (938 samples, 40.50%)</title><rect x="153.7" y="739.0" width="477.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.7" y="750.0">one/nio/net/Session$ArrayQueueItem.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (938 samples, 40.50%)</title><rect x="153.7" y="723.0" width="477.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.7" y="734.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (8 samples, 0.35%)</title><rect x="159.8" y="707.0" width="4.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="162.8" y="718.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.56%)</title><rect x="163.9" y="707.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="166.9" y="718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="166.4" y="691.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="169.4" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;CardTableBarrierSet::AccessBarrier&lt;1097844ul, CardTableBarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.04%)</title><rect x="166.9" y="691.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="169.9" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.26%)</title><rect x="167.4" y="691.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="170.4" y="702.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="169.5" y="675.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="172.5" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.04%)</title><rect x="170.0" y="675.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="173.0" y="686.0"></text>
</g>
<g>
<title>send (905 samples, 39.08%)</title><rect x="170.5" y="707.0" width="461.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="173.5" y="718.0">send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (878 samples, 37.91%)</title><rect x="184.2" y="691.0" width="447.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="187.2" y="702.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__x64_sys_sendto (3 samples, 0.13%)</title><rect x="184.2" y="675.0" width="1.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="187.2" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (875 samples, 37.78%)</title><rect x="185.8" y="675.0" width="445.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="188.8" y="686.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (567 samples, 24.48%)</title><rect x="192.4" y="659.0" width="288.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="195.4" y="670.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (563 samples, 24.31%)</title><rect x="193.4" y="643.0" width="286.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="196.4" y="654.0">__sys_sendto</text>
</g>
<g>
<title>sock_sendmsg (557 samples, 24.05%)</title><rect x="194.9" y="627.0" width="283.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="197.9" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (5 samples, 0.22%)</title><rect x="195.5" y="611.0" width="2.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="198.5" y="622.0"></text>
</g>
<g>
<title>inet6_sendmsg (547 samples, 23.62%)</title><rect x="198.0" y="611.0" width="278.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="201.0" y="622.0">inet6_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.09%)</title><rect x="198.5" y="595.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="201.5" y="606.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.04%)</title><rect x="199.5" y="595.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="202.5" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg (543 samples, 23.45%)</title><rect x="200.0" y="595.0" width="276.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="203.0" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.09%)</title><rect x="200.0" y="579.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="203.0" y="590.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.04%)</title><rect x="201.1" y="579.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="204.1" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.04%)</title><rect x="201.6" y="579.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="204.6" y="590.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.13%)</title><rect x="202.1" y="579.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="205.1" y="590.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (2 samples, 0.09%)</title><rect x="203.6" y="579.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="206.6" y="590.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (533 samples, 23.01%)</title><rect x="204.6" y="579.0" width="271.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="207.6" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (3 samples, 0.13%)</title><rect x="207.7" y="563.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="210.7" y="574.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.13%)</title><rect x="207.7" y="547.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="210.7" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (3 samples, 0.13%)</title><rect x="209.2" y="563.0" width="1.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="212.2" y="574.0"></text>
</g>
<g>
<title>copy_user_generic_string (3 samples, 0.13%)</title><rect x="209.2" y="547.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="212.2" y="558.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.04%)</title><rect x="210.7" y="563.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="213.7" y="574.0"></text>
</g>
<g>
<title>sk_page_frag_refill (1 samples, 0.04%)</title><rect x="211.3" y="563.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="214.3" y="574.0"></text>
</g>
<g>
<title>skb_page_frag_refill (1 samples, 0.04%)</title><rect x="211.3" y="547.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="214.3" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (44 samples, 1.90%)</title><rect x="211.8" y="563.0" width="22.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="214.8" y="574.0">s..</text>
</g>
<g>
<title>__alloc_skb (41 samples, 1.77%)</title><rect x="213.3" y="547.0" width="20.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="216.3" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (1 samples, 0.04%)</title><rect x="216.9" y="531.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="219.9" y="542.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (24 samples, 1.04%)</title><rect x="217.4" y="531.0" width="12.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="220.4" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (9 samples, 0.39%)</title><rect x="217.4" y="515.0" width="4.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="220.4" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (2 samples, 0.09%)</title><rect x="220.9" y="499.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="223.9" y="510.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.09%)</title><rect x="222.0" y="515.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="225.0" y="526.0"></text>
</g>
<g>
<title>kmalloc_slab (4 samples, 0.17%)</title><rect x="223.0" y="515.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="226.0" y="526.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.04%)</title><rect x="225.0" y="515.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="228.0" y="526.0"></text>
</g>
<g>
<title>memset (8 samples, 0.35%)</title><rect x="225.5" y="515.0" width="4.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="228.5" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (5 samples, 0.22%)</title><rect x="229.6" y="531.0" width="2.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="232.6" y="542.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.04%)</title><rect x="232.1" y="531.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="235.1" y="542.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.04%)</title><rect x="232.1" y="515.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="235.1" y="526.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.04%)</title><rect x="232.7" y="531.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="235.7" y="542.0"></text>
</g>
<g>
<title>memset (2 samples, 0.09%)</title><rect x="233.2" y="531.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="236.2" y="542.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.04%)</title><rect x="234.2" y="563.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="237.2" y="574.0"></text>
</g>
<g>
<title>tcp_push (462 samples, 19.95%)</title><rect x="234.7" y="563.0" width="235.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="237.7" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (462 samples, 19.95%)</title><rect x="234.7" y="547.0" width="235.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="237.7" y="558.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>ktime_get (2 samples, 0.09%)</title><rect x="235.2" y="531.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="238.2" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.09%)</title><rect x="236.2" y="531.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="239.2" y="542.0"></text>
</g>
<g>
<title>tcp_mtu_probe (1 samples, 0.04%)</title><rect x="237.2" y="531.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="240.2" y="542.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.04%)</title><rect x="237.7" y="531.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="240.7" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (455 samples, 19.65%)</title><rect x="238.3" y="531.0" width="231.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="241.3" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (426 samples, 18.39%)</title><rect x="241.3" y="515.0" width="217.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="244.3" y="526.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__ip_queue_xmit (3 samples, 0.13%)</title><rect x="244.9" y="499.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="247.9" y="510.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (1 samples, 0.04%)</title><rect x="246.4" y="499.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="249.4" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.04%)</title><rect x="246.9" y="499.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="249.9" y="510.0"></text>
</g>
<g>
<title>ip_queue_xmit (408 samples, 17.62%)</title><rect x="247.4" y="499.0" width="207.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="250.4" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (404 samples, 17.44%)</title><rect x="247.4" y="483.0" width="205.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="250.4" y="494.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.04%)</title><rect x="247.9" y="467.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="250.9" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.04%)</title><rect x="248.4" y="467.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="251.4" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.04%)</title><rect x="248.4" y="451.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="251.4" y="462.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="249.0" y="467.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="252.0" y="478.0"></text>
</g>
<g>
<title>ip_local_out (394 samples, 17.01%)</title><rect x="249.5" y="467.0" width="200.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="252.5" y="478.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.09%)</title><rect x="251.0" y="451.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="254.0" y="462.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.04%)</title><rect x="251.5" y="435.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="254.5" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.04%)</title><rect x="252.0" y="451.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="255.0" y="462.0"></text>
</g>
<g>
<title>ip_output (388 samples, 16.75%)</title><rect x="252.5" y="451.0" width="197.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="255.5" y="462.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.04%)</title><rect x="254.1" y="435.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="257.1" y="446.0"></text>
</g>
<g>
<title>ip_finish_output (384 samples, 16.58%)</title><rect x="254.6" y="435.0" width="195.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="257.6" y="446.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (10 samples, 0.43%)</title><rect x="255.1" y="419.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="258.1" y="430.0"></text>
</g>
<g>
<title>__ip_finish_output (372 samples, 16.06%)</title><rect x="260.2" y="419.0" width="189.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="263.2" y="430.0">__ip_finish_output</text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="261.7" y="403.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="264.7" y="414.0"></text>
</g>
<g>
<title>ip_finish_output2 (368 samples, 15.89%)</title><rect x="262.2" y="403.0" width="187.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="265.2" y="414.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (317 samples, 13.69%)</title><rect x="268.8" y="387.0" width="161.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="271.8" y="398.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.0 (315 samples, 13.60%)</title><rect x="269.8" y="371.0" width="160.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="272.8" y="382.0">do_softirq.part.0</text>
</g>
<g>
<title>do_softirq_own_stack (311 samples, 13.43%)</title><rect x="271.9" y="355.0" width="158.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="274.9" y="366.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (308 samples, 13.30%)</title><rect x="271.9" y="339.0" width="156.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="274.9" y="350.0">__softirqentry_text_..</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.04%)</title><rect x="276.5" y="323.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="279.5" y="334.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.04%)</title><rect x="277.0" y="323.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="280.0" y="334.0"></text>
</g>
<g>
<title>net_rx_action (296 samples, 12.78%)</title><rect x="277.5" y="323.0" width="150.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="280.5" y="334.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (294 samples, 12.69%)</title><rect x="278.5" y="307.0" width="149.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="281.5" y="318.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (287 samples, 12.39%)</title><rect x="281.6" y="291.0" width="146.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="284.6" y="302.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_one_core (285 samples, 12.31%)</title><rect x="282.1" y="275.0" width="145.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="285.1" y="286.0">__netif_receive_sk..</text>
</g>
<g>
<title>__netif_receive_skb_core (9 samples, 0.39%)</title><rect x="284.6" y="259.0" width="4.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="287.6" y="270.0"></text>
</g>
<g>
<title>ip_rcv (270 samples, 11.66%)</title><rect x="289.2" y="259.0" width="137.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="292.2" y="270.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.04%)</title><rect x="289.7" y="243.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="292.7" y="254.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.13%)</title><rect x="290.2" y="243.0" width="1.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="293.2" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish (265 samples, 11.44%)</title><rect x="291.8" y="243.0" width="135.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="294.8" y="254.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (264 samples, 11.40%)</title><rect x="291.8" y="227.0" width="134.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="294.8" y="238.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (260 samples, 11.23%)</title><rect x="292.8" y="211.0" width="132.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="295.8" y="222.0">ip_local_deliver..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (258 samples, 11.14%)</title><rect x="292.8" y="195.0" width="131.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="295.8" y="206.0">ip_protocol_deli..</text>
</g>
<g>
<title>__inet_lookup_established (2 samples, 0.09%)</title><rect x="294.3" y="179.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="297.3" y="190.0"></text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.13%)</title><rect x="295.3" y="179.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="298.3" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.04%)</title><rect x="296.8" y="179.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="299.8" y="190.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.09%)</title><rect x="297.4" y="179.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="300.4" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (247 samples, 10.66%)</title><rect x="298.4" y="179.0" width="125.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="301.4" y="190.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.17%)</title><rect x="300.9" y="163.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="303.9" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (2 samples, 0.09%)</title><rect x="301.9" y="147.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="304.9" y="158.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.04%)</title><rect x="303.0" y="163.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="306.0" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (1 samples, 0.04%)</title><rect x="303.5" y="163.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="306.5" y="174.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (7 samples, 0.30%)</title><rect x="304.0" y="163.0" width="3.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="307.0" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (5 samples, 0.22%)</title><rect x="305.0" y="147.0" width="2.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="308.0" y="158.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.04%)</title><rect x="307.5" y="163.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="310.5" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (227 samples, 9.80%)</title><rect x="308.1" y="163.0" width="115.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="311.1" y="174.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.04%)</title><rect x="309.6" y="147.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="312.6" y="158.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.04%)</title><rect x="310.1" y="147.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="313.1" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (2 samples, 0.09%)</title><rect x="310.6" y="147.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="313.6" y="158.0"></text>
</g>
<g>
<title>tcp_rcv_established (220 samples, 9.50%)</title><rect x="311.6" y="147.0" width="112.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="314.6" y="158.0">tcp_rcv_establ..</text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.17%)</title><rect x="314.2" y="131.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="317.2" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="314.2" y="115.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="317.2" y="126.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.13%)</title><rect x="314.7" y="115.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="317.7" y="126.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.13%)</title><rect x="314.7" y="99.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="317.7" y="110.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="316.2" y="131.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="319.2" y="142.0"></text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.04%)</title><rect x="316.7" y="131.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="319.7" y="142.0"></text>
</g>
<g>
<title>tcp_ack (49 samples, 2.12%)</title><rect x="317.2" y="131.0" width="25.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="320.2" y="142.0">t..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.04%)</title><rect x="322.8" y="115.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="325.8" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.04%)</title><rect x="323.3" y="115.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="326.3" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (2 samples, 0.09%)</title><rect x="323.9" y="115.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="326.9" y="126.0"></text>
</g>
<g>
<title>tcp_chrono_stop (1 samples, 0.04%)</title><rect x="324.9" y="115.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="327.9" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (26 samples, 1.12%)</title><rect x="325.4" y="115.0" width="13.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="328.4" y="126.0"></text>
</g>
<g>
<title>__kfree_skb (12 samples, 0.52%)</title><rect x="330.5" y="99.0" width="6.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="333.5" y="110.0"></text>
</g>
<g>
<title>kfree_skbmem (3 samples, 0.13%)</title><rect x="330.5" y="83.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="333.5" y="94.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.13%)</title><rect x="330.5" y="67.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="333.5" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.04%)</title><rect x="332.0" y="83.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="335.0" y="94.0"></text>
</g>
<g>
<title>skb_release_all (8 samples, 0.35%)</title><rect x="332.5" y="83.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="335.5" y="94.0"></text>
</g>
<g>
<title>skb_release_data (8 samples, 0.35%)</title><rect x="332.5" y="67.0" width="4.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="335.5" y="78.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.09%)</title><rect x="335.6" y="51.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="338.6" y="62.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.04%)</title><rect x="336.1" y="35.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="339.1" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.09%)</title><rect x="336.6" y="99.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="339.6" y="110.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.04%)</title><rect x="337.6" y="99.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="340.6" y="110.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (1 samples, 0.04%)</title><rect x="338.1" y="99.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="341.1" y="110.0"></text>
</g>
<g>
<title>tcp_newly_delivered (1 samples, 0.04%)</title><rect x="338.6" y="115.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="341.6" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.04%)</title><rect x="339.1" y="115.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="342.1" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.09%)</title><rect x="339.6" y="115.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="342.6" y="126.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.09%)</title><rect x="340.7" y="115.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="343.7" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.04%)</title><rect x="341.7" y="115.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="344.7" y="126.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (1 samples, 0.04%)</title><rect x="342.2" y="131.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="345.2" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (153 samples, 6.61%)</title><rect x="342.7" y="131.0" width="78.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="345.7" y="142.0">tcp_data_..</text>
</g>
<g>
<title>sock_def_readable (153 samples, 6.61%)</title><rect x="342.7" y="115.0" width="78.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="345.7" y="126.0">sock_def_..</text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.04%)</title><rect x="343.2" y="99.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="346.2" y="110.0"></text>
</g>
<g>
<title>__wake_up_sync_key (151 samples, 6.52%)</title><rect x="343.7" y="99.0" width="77.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="346.7" y="110.0">__wake_u..</text>
</g>
<g>
<title>__wake_up_common_lock (151 samples, 6.52%)</title><rect x="343.7" y="83.0" width="77.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="346.7" y="94.0">__wake_u..</text>
</g>
<g>
<title>__lock_text_start (151 samples, 6.52%)</title><rect x="343.7" y="67.0" width="77.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="346.7" y="78.0">__lock_t..</text>
</g>
<g>
<title>tcp_event_data_recv (2 samples, 0.09%)</title><rect x="420.7" y="131.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="423.7" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.09%)</title><rect x="421.7" y="131.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="424.7" y="142.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="421.7" y="115.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="424.7" y="126.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.04%)</title><rect x="422.2" y="115.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="425.2" y="126.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.09%)</title><rect x="422.7" y="131.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="425.7" y="142.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.04%)</title><rect x="423.7" y="163.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="426.7" y="174.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.04%)</title><rect x="423.7" y="147.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="426.7" y="158.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.09%)</title><rect x="424.2" y="195.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="427.2" y="206.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (2 samples, 0.09%)</title><rect x="425.2" y="211.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="428.2" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.04%)</title><rect x="426.3" y="227.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="429.3" y="238.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (1 samples, 0.04%)</title><rect x="426.8" y="259.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="429.8" y="270.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.04%)</title><rect x="427.3" y="275.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="430.3" y="286.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.04%)</title><rect x="427.8" y="291.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="430.8" y="302.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.04%)</title><rect x="428.3" y="323.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="431.3" y="334.0"></text>
</g>
<g>
<title>net_rx_action (3 samples, 0.13%)</title><rect x="428.8" y="339.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="431.8" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (38 samples, 1.64%)</title><rect x="430.3" y="387.0" width="19.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="433.3" y="398.0"></text>
</g>
<g>
<title>__dev_queue_xmit (37 samples, 1.60%)</title><rect x="430.3" y="371.0" width="18.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="433.3" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (23 samples, 0.99%)</title><rect x="433.9" y="355.0" width="11.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="436.9" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (15 samples, 0.65%)</title><rect x="434.9" y="339.0" width="7.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="437.9" y="350.0"></text>
</g>
<g>
<title>eth_type_trans (5 samples, 0.22%)</title><rect x="434.9" y="323.0" width="2.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="437.9" y="334.0"></text>
</g>
<g>
<title>netif_rx (7 samples, 0.30%)</title><rect x="437.5" y="323.0" width="3.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="440.5" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.26%)</title><rect x="438.0" y="307.0" width="3.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="441.0" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.22%)</title><rect x="438.5" y="291.0" width="2.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="441.5" y="302.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.04%)</title><rect x="441.0" y="323.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="444.0" y="334.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.09%)</title><rect x="441.5" y="323.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="444.5" y="334.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.04%)</title><rect x="442.6" y="339.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="445.6" y="350.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.09%)</title><rect x="443.1" y="339.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="446.1" y="350.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.13%)</title><rect x="444.1" y="339.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="447.1" y="350.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.09%)</title><rect x="445.6" y="355.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="448.6" y="366.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.04%)</title><rect x="446.6" y="355.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="449.6" y="366.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.17%)</title><rect x="447.2" y="355.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="450.2" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.13%)</title><rect x="447.2" y="339.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="450.2" y="350.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.04%)</title><rect x="448.7" y="339.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="451.7" y="350.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.04%)</title><rect x="449.2" y="371.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="452.2" y="382.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.04%)</title><rect x="449.7" y="419.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="452.7" y="430.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.09%)</title><rect x="450.2" y="467.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="453.2" y="478.0"></text>
</g>
<g>
<title>ipv4_dst_check (4 samples, 0.17%)</title><rect x="451.2" y="467.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="454.2" y="478.0"></text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.13%)</title><rect x="453.3" y="483.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="456.3" y="494.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.04%)</title><rect x="454.8" y="483.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="457.8" y="494.0"></text>
</g>
<g>
<title>skb_clone (5 samples, 0.22%)</title><rect x="455.3" y="499.0" width="2.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="458.3" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.04%)</title><rect x="456.8" y="483.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="459.8" y="494.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.04%)</title><rect x="457.3" y="483.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="460.3" y="494.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.04%)</title><rect x="457.8" y="499.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="460.8" y="510.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.04%)</title><rect x="458.4" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="461.4" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.04%)</title><rect x="458.9" y="515.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="461.9" y="526.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="459.4" y="515.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="462.4" y="526.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.04%)</title><rect x="459.9" y="515.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="462.9" y="526.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.09%)</title><rect x="460.4" y="515.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="463.4" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.04%)</title><rect x="461.4" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="464.4" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (3 samples, 0.13%)</title><rect x="461.9" y="515.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="464.9" y="526.0"></text>
</g>
<g>
<title>tcp_mtu_probe (1 samples, 0.04%)</title><rect x="463.5" y="515.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="466.5" y="526.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (2 samples, 0.09%)</title><rect x="464.0" y="515.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="467.0" y="526.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (6 samples, 0.26%)</title><rect x="465.0" y="515.0" width="3.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="468.0" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (4 samples, 0.17%)</title><rect x="468.0" y="515.0" width="2.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="471.0" y="526.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.04%)</title><rect x="470.1" y="563.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="473.1" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (11 samples, 0.47%)</title><rect x="470.6" y="563.0" width="5.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="473.6" y="574.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.09%)</title><rect x="471.1" y="547.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="474.1" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (8 samples, 0.35%)</title><rect x="472.1" y="547.0" width="4.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="475.1" y="558.0"></text>
</g>
<g>
<title>ipv4_mtu (7 samples, 0.30%)</title><rect x="472.6" y="531.0" width="3.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="475.6" y="542.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.04%)</title><rect x="476.2" y="579.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="479.2" y="590.0"></text>
</g>
<g>
<title>inet_send_prepare (1 samples, 0.04%)</title><rect x="476.7" y="611.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="479.7" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (3 samples, 0.13%)</title><rect x="477.2" y="611.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="480.2" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.13%)</title><rect x="477.2" y="595.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="480.2" y="606.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.13%)</title><rect x="477.2" y="579.0" width="1.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="480.2" y="590.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.04%)</title><rect x="478.2" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="481.2" y="574.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.13%)</title><rect x="478.7" y="627.0" width="1.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="481.7" y="638.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.13%)</title><rect x="478.7" y="611.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="481.7" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.13%)</title><rect x="478.7" y="595.0" width="1.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="481.7" y="606.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.13%)</title><rect x="478.7" y="579.0" width="1.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="481.7" y="590.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="480.3" y="643.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="483.3" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.04%)</title><rect x="480.8" y="643.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="483.8" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (294 samples, 12.69%)</title><rect x="481.3" y="659.0" width="149.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="484.3" y="670.0">exit_to_usermode_loop</text>
</g>
<g>
<title>schedule (291 samples, 12.56%)</title><rect x="482.8" y="643.0" width="148.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="485.8" y="654.0">schedule</text>
</g>
<g>
<title>__schedule (289 samples, 12.48%)</title><rect x="483.8" y="627.0" width="147.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="486.8" y="638.0">__schedule</text>
</g>
<g>
<title>finish_task_switch (286 samples, 12.35%)</title><rect x="485.4" y="611.0" width="145.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="488.4" y="622.0">finish_task_switch</text>
</g>
<g>
<title>ret_from_intr (2 samples, 0.09%)</title><rect x="630.1" y="595.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="633.1" y="606.0"></text>
</g>
<g>
<title>do_IRQ (2 samples, 0.09%)</title><rect x="630.1" y="579.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="633.1" y="590.0"></text>
</g>
<g>
<title>irq_exit (2 samples, 0.09%)</title><rect x="630.1" y="563.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="633.1" y="574.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.09%)</title><rect x="630.1" y="547.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="633.1" y="558.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="631.1" y="659.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="634.1" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (7 samples, 0.30%)</title><rect x="631.6" y="787.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="634.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.17%)</title><rect x="632.1" y="771.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.09%)</title><rect x="634.1" y="771.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.09%)</title><rect x="634.1" y="755.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.1" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="634.6" y="739.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.04%)</title><rect x="634.6" y="723.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.6" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterData.of (1 samples, 0.04%)</title><rect x="634.6" y="707.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.6" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.04%)</title><rect x="635.2" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.52%)</title><rect x="635.7" y="803.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.7" y="814.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (3 samples, 0.13%)</title><rect x="636.2" y="787.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.2" y="798.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.04%)</title><rect x="637.2" y="771.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (8 samples, 0.35%)</title><rect x="637.7" y="787.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.7" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.30%)</title><rect x="637.7" y="771.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.7" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.30%)</title><rect x="637.7" y="755.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.7" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.09%)</title><rect x="640.3" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="643.3" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.04%)</title><rect x="641.3" y="771.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.3" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/kovalkov/ServiceImpl.put (860 samples, 37.13%)</title><rect x="641.8" y="803.0" width="438.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.8" y="814.0">ru/mail/polis/service/kovalkov/ServiceImpl.put</text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.09%)</title><rect x="642.3" y="787.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="645.3" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.09%)</title><rect x="642.3" y="771.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="645.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.09%)</title><rect x="642.3" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="645.3" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.09%)</title><rect x="642.3" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.3" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.69%)</title><rect x="643.3" y="787.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.3" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (16 samples, 0.69%)</title><rect x="643.3" y="771.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="646.3" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (15 samples, 0.65%)</title><rect x="643.3" y="755.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.3" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (15 samples, 0.65%)</title><rect x="643.3" y="739.0" width="7.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="646.3" y="750.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (15 samples, 0.65%)</title><rect x="643.3" y="723.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.09%)</title><rect x="643.8" y="707.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="646.8" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.09%)</title><rect x="643.8" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="646.8" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.13%)</title><rect x="644.8" y="707.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="647.8" y="718.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.17%)</title><rect x="646.4" y="707.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="649.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (4 samples, 0.17%)</title><rect x="646.4" y="691.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="649.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="648.4" y="707.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="651.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="648.4" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.4" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.09%)</title><rect x="648.4" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="651.4" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.13%)</title><rect x="649.4" y="707.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="652.4" y="718.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.13%)</title><rect x="649.4" y="691.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="652.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.13%)</title><rect x="649.4" y="675.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="652.4" y="686.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.04%)</title><rect x="650.9" y="755.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="653.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.22%)</title><rect x="651.5" y="787.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.5" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.13%)</title><rect x="652.5" y="771.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="655.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.upsert (836 samples, 36.10%)</title><rect x="654.0" y="787.0" width="425.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.0" y="798.0">ru/mail/polis/dao/kovalkov/DAOImpl.upsert</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (831 samples, 35.88%)</title><rect x="654.0" y="771.0" width="423.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="657.0" y="782.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (831 samples, 35.88%)</title><rect x="654.0" y="755.0" width="423.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="657.0" y="766.0">org/rocksdb/RocksDB.put</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="656.0" y="739.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="659.0" y="750.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_put__J_3BII_3BII (803 samples, 34.67%)</title><rect x="656.6" y="739.0" width="409.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="659.6" y="750.0">Java_org_rocksdb_RocksDB_put__J_3BII_3BII</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.09%)</title><rect x="660.1" y="723.0" width="1.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="663.1" y="734.0"></text>
</g>
<g>
<title>__libc_malloc (1 samples, 0.04%)</title><rect x="661.1" y="723.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="664.1" y="734.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (4 samples, 0.17%)</title><rect x="661.6" y="723.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="664.6" y="734.0"></text>
</g>
<g>
<title>operator new(unsigned long) (2 samples, 0.09%)</title><rect x="663.7" y="723.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="666.7" y="734.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (6 samples, 0.26%)</title><rect x="664.7" y="723.0" width="3.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="667.7" y="734.0"></text>
</g>
<g>
<title>operator new[](unsigned long) [clone .plt] (2 samples, 0.09%)</title><rect x="667.8" y="723.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="670.8" y="734.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (2 samples, 0.09%)</title><rect x="668.8" y="723.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="671.8" y="734.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) (777 samples, 33.55%)</title><rect x="669.8" y="723.0" width="395.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="672.8" y="734.0">rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::Wr..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (3 samples, 0.13%)</title><rect x="670.8" y="707.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="673.8" y="718.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (2 samples, 0.09%)</title><rect x="672.3" y="707.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="675.3" y="718.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.04%)</title><rect x="672.9" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="675.9" y="702.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.09%)</title><rect x="673.4" y="707.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="676.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.04%)</title><rect x="673.9" y="691.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="676.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (766 samples, 33.07%)</title><rect x="674.4" y="707.0" width="390.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="677.4" y="718.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksd..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (3 samples, 0.13%)</title><rect x="674.4" y="691.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="677.4" y="702.0"></text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (2 samples, 0.09%)</title><rect x="675.9" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="678.9" y="702.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (761 samples, 32.86%)</title><rect x="676.9" y="691.0" width="387.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="679.9" y="702.0">rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, ro..</text>
</g>
<g>
<title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (751 samples, 32.43%)</title><rect x="678.0" y="675.0" width="382.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="681.0" y="686.0">rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocks..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.09%)</title><rect x="679.0" y="659.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="682.0" y="670.0"></text>
</g>
<g>
<title>cfree (7 samples, 0.30%)</title><rect x="680.0" y="659.0" width="3.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="683.0" y="670.0"></text>
</g>
<g>
<title>operator delete(void*) (3 samples, 0.13%)</title><rect x="683.6" y="659.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="686.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::GetID() const (7 samples, 0.30%)</title><rect x="685.1" y="659.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="688.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (666 samples, 28.76%)</title><rect x="688.7" y="659.0" width="339.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="691.7" y="670.0">rocksdb::DBImpl::Write(rocksdb::WriteOptions c..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.13%)</title><rect x="689.2" y="643.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="692.2" y="654.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context [clone .plt] (2 samples, 0.09%)</title><rect x="690.7" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="693.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) (2 samples, 0.09%)</title><rect x="691.7" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="694.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MemTableInsertStatusCheck(rocksdb::Status const&amp;) [clone .plt] (1 samples, 0.04%)</title><rect x="692.7" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="695.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (2 samples, 0.09%)</title><rect x="693.2" y="643.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="696.2" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) [clone .plt] (1 samples, 0.04%)</title><rect x="694.3" y="643.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="697.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (2 samples, 0.09%)</title><rect x="694.8" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="697.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() [clone .plt] (2 samples, 0.09%)</title><rect x="695.8" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="698.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (626 samples, 27.03%)</title><rect x="696.8" y="643.0" width="319.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="699.8" y="654.0">rocksdb::DBImpl::WriteImpl(rocksdb::WriteOp..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (3 samples, 0.13%)</title><rect x="716.2" y="627.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="719.2" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.13%)</title><rect x="717.7" y="627.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="720.7" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.26%)</title><rect x="719.2" y="627.0" width="3.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="722.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.04%)</title><rect x="722.3" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="725.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, bool*, rocksdb::DBImpl::WriteContext*) (8 samples, 0.35%)</title><rect x="722.8" y="627.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="725.8" y="638.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="726.4" y="611.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteContext::~WriteContext() (3 samples, 0.13%)</title><rect x="726.9" y="627.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="729.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.04%)</title><rect x="727.9" y="611.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.9" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (1 samples, 0.04%)</title><rect x="728.4" y="627.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="731.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (353 samples, 15.24%)</title><rect x="728.9" y="627.0" width="179.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="731.9" y="638.0">rocksdb::DBImpl::WriteT..</text>
</g>
<g>
<title>rocksdb::DBImpl::MergeBatch(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::WriteBatch*, unsigned long*, rocksdb::WriteBatch**) (1 samples, 0.04%)</title><rect x="729.4" y="611.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="732.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteBatch const&amp;, rocksdb::log::Writer*, unsigned long*, unsigned long*) (342 samples, 14.77%)</title><rect x="729.9" y="611.0" width="174.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="732.9" y="622.0">rocksdb::DBImpl::Write..</text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (3 samples, 0.13%)</title><rect x="732.0" y="595.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="735.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (333 samples, 14.38%)</title><rect x="733.5" y="595.0" width="169.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="736.5" y="606.0">rocksdb::log::Writer::..</text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (15 samples, 0.65%)</title><rect x="733.5" y="579.0" width="7.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="736.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Flush(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.04%)</title><rect x="741.1" y="579.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="744.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Flush() (296 samples, 12.78%)</title><rect x="741.6" y="579.0" width="150.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="744.6" y="590.0">rocksdb::WritableFi..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="743.2" y="563.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="746.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.04%)</title><rect x="744.2" y="563.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="747.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::GetFileSize(rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (1 samples, 0.04%)</title><rect x="744.7" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="747.7" y="574.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.09%)</title><rect x="745.2" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="748.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) [clone .plt] (1 samples, 0.04%)</title><rect x="746.2" y="563.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.2" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (286 samples, 12.35%)</title><rect x="746.7" y="563.0" width="145.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.7" y="574.0">rocksdb::WritableF..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.13%)</title><rect x="751.3" y="547.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="754.3" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.04%)</title><rect x="752.8" y="547.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="755.8" y="558.0"></text>
</g>
<g>
<title>__write (267 samples, 11.53%)</title><rect x="753.4" y="547.0" width="136.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="756.4" y="558.0">__write</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (256 samples, 11.05%)</title><rect x="759.0" y="531.0" width="130.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="762.0" y="542.0">entry_SYSCALL_64..</text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.13%)</title><rect x="759.0" y="515.0" width="1.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="762.0" y="526.0"></text>
</g>
<g>
<title>do_syscall_64 (253 samples, 10.92%)</title><rect x="760.5" y="515.0" width="128.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="763.5" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_write (238 samples, 10.28%)</title><rect x="766.6" y="499.0" width="121.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="769.6" y="510.0">__x64_sys_write</text>
</g>
<g>
<title>__f_unlock_pos (2 samples, 0.09%)</title><rect x="766.6" y="483.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="769.6" y="494.0"></text>
</g>
<g>
<title>__fdget_pos (1 samples, 0.04%)</title><rect x="767.6" y="483.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="770.6" y="494.0"></text>
</g>
<g>
<title>ksys_write (235 samples, 10.15%)</title><rect x="768.1" y="483.0" width="119.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="771.1" y="494.0">ksys_write</text>
</g>
<g>
<title>__fdget_pos (5 samples, 0.22%)</title><rect x="768.6" y="467.0" width="2.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="771.6" y="478.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.22%)</title><rect x="768.6" y="451.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="771.6" y="462.0"></text>
</g>
<g>
<title>__fget (5 samples, 0.22%)</title><rect x="768.6" y="435.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="771.6" y="446.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.04%)</title><rect x="771.2" y="467.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="774.2" y="478.0"></text>
</g>
<g>
<title>__sb_end_write (1 samples, 0.04%)</title><rect x="771.7" y="467.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="774.7" y="478.0"></text>
</g>
<g>
<title>__sb_start_write (2 samples, 0.09%)</title><rect x="772.2" y="467.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="775.2" y="478.0"></text>
</g>
<g>
<title>__vfs_write (3 samples, 0.13%)</title><rect x="773.2" y="467.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="776.2" y="478.0"></text>
</g>
<g>
<title>mutex_unlock (2 samples, 0.09%)</title><rect x="774.8" y="467.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="777.8" y="478.0"></text>
</g>
<g>
<title>vfs_write (220 samples, 9.50%)</title><rect x="775.8" y="467.0" width="112.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="778.8" y="478.0">vfs_write</text>
</g>
<g>
<title>__fsnotify_parent (2 samples, 0.09%)</title><rect x="776.3" y="451.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="779.3" y="462.0"></text>
</g>
<g>
<title>__sb_start_write (4 samples, 0.17%)</title><rect x="777.3" y="451.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="780.3" y="462.0"></text>
</g>
<g>
<title>__vfs_write (203 samples, 8.77%)</title><rect x="779.3" y="451.0" width="103.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="782.3" y="462.0">__vfs_write</text>
</g>
<g>
<title>ext4_file_write_iter (3 samples, 0.13%)</title><rect x="779.3" y="435.0" width="1.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="782.3" y="446.0"></text>
</g>
<g>
<title>iov_iter_init (1 samples, 0.04%)</title><rect x="780.9" y="435.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="783.9" y="446.0"></text>
</g>
<g>
<title>new_sync_write (199 samples, 8.59%)</title><rect x="781.4" y="435.0" width="101.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="784.4" y="446.0">new_sync_write</text>
</g>
<g>
<title>ext4_file_write_iter (191 samples, 8.25%)</title><rect x="783.9" y="419.0" width="97.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="786.9" y="430.0">ext4_file_w..</text>
</g>
<g>
<title>__generic_file_write_iter (183 samples, 7.90%)</title><rect x="784.9" y="403.0" width="93.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="787.9" y="414.0">__generic_f..</text>
</g>
<g>
<title>ext4_da_write_end (1 samples, 0.04%)</title><rect x="786.5" y="387.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="789.5" y="398.0"></text>
</g>
<g>
<title>file_update_time (5 samples, 0.22%)</title><rect x="787.0" y="387.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="790.0" y="398.0"></text>
</g>
<g>
<title>current_time (1 samples, 0.04%)</title><rect x="787.5" y="371.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="790.5" y="382.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.04%)</title><rect x="787.5" y="355.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="790.5" y="366.0"></text>
</g>
<g>
<title>generic_update_time (2 samples, 0.09%)</title><rect x="788.0" y="371.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="791.0" y="382.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.09%)</title><rect x="788.0" y="355.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="791.0" y="366.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.09%)</title><rect x="788.0" y="339.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="791.0" y="350.0"></text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.09%)</title><rect x="788.0" y="323.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="791.0" y="334.0"></text>
</g>
<g>
<title>jbd2__journal_start (1 samples, 0.04%)</title><rect x="788.0" y="307.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="791.0" y="318.0"></text>
</g>
<g>
<title>should_failslab (1 samples, 0.04%)</title><rect x="788.0" y="291.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="791.0" y="302.0"></text>
</g>
<g>
<title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="788.5" y="307.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="791.5" y="318.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.04%)</title><rect x="789.0" y="371.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="792.0" y="382.0"></text>
</g>
<g>
<title>generic_perform_write (171 samples, 7.38%)</title><rect x="789.5" y="387.0" width="87.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="792.5" y="398.0">generic_pe..</text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.09%)</title><rect x="790.6" y="371.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="793.6" y="382.0"></text>
</g>
<g>
<title>ext4_block_write_begin (1 samples, 0.04%)</title><rect x="791.6" y="371.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="794.6" y="382.0"></text>
</g>
<g>
<title>ext4_da_write_begin (55 samples, 2.37%)</title><rect x="792.1" y="371.0" width="28.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="795.1" y="382.0">ex..</text>
</g>
<g>
<title>__ext4_journal_start_sb (21 samples, 0.91%)</title><rect x="793.6" y="355.0" width="10.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="796.6" y="366.0"></text>
</g>
<g>
<title>jbd2__journal_start (18 samples, 0.78%)</title><rect x="794.1" y="339.0" width="9.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="797.1" y="350.0"></text>
</g>
<g>
<title>kmem_cache_alloc (5 samples, 0.22%)</title><rect x="795.1" y="323.0" width="2.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="798.1" y="334.0"></text>
</g>
<g>
<title>_cond_resched (2 samples, 0.09%)</title><rect x="796.7" y="307.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="799.7" y="318.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (5 samples, 0.22%)</title><rect x="797.7" y="323.0" width="2.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.7" y="334.0"></text>
</g>
<g>
<title>start_this_handle (6 samples, 0.26%)</title><rect x="800.2" y="323.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="803.2" y="334.0"></text>
</g>
<g>
<title>add_transaction_credits (2 samples, 0.09%)</title><rect x="802.3" y="307.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="805.3" y="318.0"></text>
</g>
<g>
<title>kmem_cache_alloc (2 samples, 0.09%)</title><rect x="803.3" y="339.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="806.3" y="350.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.04%)</title><rect x="804.3" y="355.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="807.3" y="366.0"></text>
</g>
<g>
<title>ext4_block_write_begin (3 samples, 0.13%)</title><rect x="804.8" y="355.0" width="1.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="807.8" y="366.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.04%)</title><rect x="806.3" y="355.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="809.3" y="366.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (23 samples, 0.99%)</title><rect x="806.9" y="355.0" width="11.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="809.9" y="366.0"></text>
</g>
<g>
<title>find_get_entry (1 samples, 0.04%)</title><rect x="806.9" y="339.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="809.9" y="350.0"></text>
</g>
<g>
<title>pagecache_get_page (20 samples, 0.86%)</title><rect x="807.4" y="339.0" width="10.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="810.4" y="350.0"></text>
</g>
<g>
<title>__page_cache_alloc (1 samples, 0.04%)</title><rect x="807.4" y="323.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="810.4" y="334.0"></text>
</g>
<g>
<title>alloc_pages_current (1 samples, 0.04%)</title><rect x="807.4" y="307.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="810.4" y="318.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.04%)</title><rect x="807.4" y="291.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="810.4" y="302.0"></text>
</g>
<g>
<title>node_dirty_ok (1 samples, 0.04%)</title><rect x="807.4" y="275.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="810.4" y="286.0"></text>
</g>
<g>
<title>add_to_page_cache_lru (1 samples, 0.04%)</title><rect x="807.9" y="323.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="810.9" y="334.0"></text>
</g>
<g>
<title>mem_cgroup_commit_charge (1 samples, 0.04%)</title><rect x="807.9" y="307.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="810.9" y="318.0"></text>
</g>
<g>
<title>find_get_entry (18 samples, 0.78%)</title><rect x="808.4" y="323.0" width="9.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="811.4" y="334.0"></text>
</g>
<g>
<title>xas_load (4 samples, 0.17%)</title><rect x="811.4" y="307.0" width="2.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="814.4" y="318.0"></text>
</g>
<g>
<title>xas_start (8 samples, 0.35%)</title><rect x="813.5" y="307.0" width="4.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="816.5" y="318.0"></text>
</g>
<g>
<title>wait_for_stable_page (2 samples, 0.09%)</title><rect x="817.6" y="339.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="820.6" y="350.0"></text>
</g>
<g>
<title>pagecache_get_page (1 samples, 0.04%)</title><rect x="818.6" y="355.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="821.6" y="366.0"></text>
</g>
<g>
<title>wait_for_stable_page (2 samples, 0.09%)</title><rect x="819.1" y="355.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="822.1" y="366.0"></text>
</g>
<g>
<title>ext4_da_write_end (102 samples, 4.40%)</title><rect x="820.1" y="371.0" width="52.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="823.1" y="382.0">ext4_..</text>
</g>
<g>
<title>__ext4_journal_stop (15 samples, 0.65%)</title><rect x="820.6" y="355.0" width="7.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="823.6" y="366.0"></text>
</g>
<g>
<title>__wake_up (2 samples, 0.09%)</title><rect x="820.6" y="339.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="823.6" y="350.0"></text>
</g>
<g>
<title>jbd2_journal_stop (10 samples, 0.43%)</title><rect x="821.6" y="339.0" width="5.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="824.6" y="350.0"></text>
</g>
<g>
<title>__wake_up (6 samples, 0.26%)</title><rect x="822.1" y="323.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="825.1" y="334.0"></text>
</g>
<g>
<title>__wake_up_common_lock (5 samples, 0.22%)</title><rect x="822.1" y="307.0" width="2.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="825.1" y="318.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.17%)</title><rect x="822.1" y="291.0" width="2.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="825.1" y="302.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="824.2" y="291.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="827.2" y="302.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="824.7" y="307.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="827.7" y="318.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.13%)</title><rect x="825.2" y="323.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="828.2" y="334.0"></text>
</g>
<g>
<title>kmem_cache_free (3 samples, 0.13%)</title><rect x="826.7" y="339.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="829.7" y="350.0"></text>
</g>
<g>
<title>__mark_inode_dirty (3 samples, 0.13%)</title><rect x="828.3" y="355.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="831.3" y="366.0"></text>
</g>
<g>
<title>generic_write_end (83 samples, 3.58%)</title><rect x="829.8" y="355.0" width="42.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="832.8" y="366.0">gene..</text>
</g>
<g>
<title>__block_commit_write.isra.0 (3 samples, 0.13%)</title><rect x="830.8" y="339.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="833.8" y="350.0"></text>
</g>
<g>
<title>__mark_inode_dirty (73 samples, 3.15%)</title><rect x="832.3" y="339.0" width="37.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="835.3" y="350.0">__m..</text>
</g>
<g>
<title>ext4_dirty_inode (65 samples, 2.81%)</title><rect x="835.4" y="323.0" width="33.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="838.4" y="334.0">ex..</text>
</g>
<g>
<title>__ext4_journal_start_sb (2 samples, 0.09%)</title><rect x="835.4" y="307.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="838.4" y="318.0"></text>
</g>
<g>
<title>__ext4_journal_stop (2 samples, 0.09%)</title><rect x="836.4" y="307.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="839.4" y="318.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (60 samples, 2.59%)</title><rect x="837.4" y="307.0" width="30.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="840.4" y="318.0">ex..</text>
</g>
<g>
<title>ext4_mark_iloc_dirty (41 samples, 1.77%)</title><rect x="837.4" y="291.0" width="20.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="840.4" y="302.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.04%)</title><rect x="837.9" y="275.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="840.9" y="286.0"></text>
</g>
<g>
<title>ext4_do_update_inode (38 samples, 1.64%)</title><rect x="838.4" y="275.0" width="19.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="841.4" y="286.0"></text>
</g>
<g>
<title>__ext4_handle_dirty_metadata (1 samples, 0.04%)</title><rect x="846.1" y="259.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="849.1" y="270.0"></text>
</g>
<g>
<title>jbd2_journal_dirty_metadata (1 samples, 0.04%)</title><rect x="846.1" y="243.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="849.1" y="254.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.04%)</title><rect x="846.6" y="259.0" width="0.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="849.6" y="270.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (14 samples, 0.60%)</title><rect x="847.1" y="259.0" width="7.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="850.1" y="270.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (14 samples, 0.60%)</title><rect x="847.1" y="243.0" width="7.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="850.1" y="254.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (3 samples, 0.13%)</title><rect x="850.2" y="227.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="853.2" y="238.0"></text>
</g>
<g>
<title>crypto_shash_update (5 samples, 0.22%)</title><rect x="851.7" y="227.0" width="2.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="854.7" y="238.0"></text>
</g>
<g>
<title>crc32c_pcl_intel_update (4 samples, 0.17%)</title><rect x="852.2" y="211.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="855.2" y="222.0"></text>
</g>
<g>
<title>from_kuid (7 samples, 0.30%)</title><rect x="854.2" y="259.0" width="3.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="857.2" y="270.0"></text>
</g>
<g>
<title>map_id_up (7 samples, 0.30%)</title><rect x="854.2" y="243.0" width="3.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="857.2" y="254.0"></text>
</g>
<g>
<title>from_kuid (1 samples, 0.04%)</title><rect x="857.8" y="275.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="860.8" y="286.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (19 samples, 0.82%)</title><rect x="858.3" y="291.0" width="9.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="861.3" y="302.0"></text>
</g>
<g>
<title>__ext4_get_inode_loc (12 samples, 0.52%)</title><rect x="858.3" y="275.0" width="6.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="861.3" y="286.0"></text>
</g>
<g>
<title>__getblk_gfp (7 samples, 0.30%)</title><rect x="859.3" y="259.0" width="3.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="862.3" y="270.0"></text>
</g>
<g>
<title>__find_get_block (6 samples, 0.26%)</title><rect x="859.8" y="243.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="862.8" y="254.0"></text>
</g>
<g>
<title>mark_page_accessed (3 samples, 0.13%)</title><rect x="861.4" y="227.0" width="1.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="864.4" y="238.0"></text>
</g>
<g>
<title>ext4_get_group_desc (3 samples, 0.13%)</title><rect x="862.9" y="259.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="865.9" y="270.0"></text>
</g>
<g>
<title>__ext4_journal_get_write_access (3 samples, 0.13%)</title><rect x="864.4" y="275.0" width="1.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="867.4" y="286.0"></text>
</g>
<g>
<title>jbd2_journal_get_write_access (3 samples, 0.13%)</title><rect x="864.4" y="259.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="867.4" y="270.0"></text>
</g>
<g>
<title>jbd2_write_access_granted (3 samples, 0.13%)</title><rect x="864.4" y="243.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="867.4" y="254.0"></text>
</g>
<g>
<title>ext4_get_group_desc (1 samples, 0.04%)</title><rect x="866.0" y="275.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="869.0" y="286.0"></text>
</g>
<g>
<title>ext4_inode_table (3 samples, 0.13%)</title><rect x="866.5" y="275.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="869.5" y="286.0"></text>
</g>
<g>
<title>ext4_reserve_inode_write (1 samples, 0.04%)</title><rect x="868.0" y="307.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="871.0" y="318.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.09%)</title><rect x="868.5" y="323.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="871.5" y="334.0"></text>
</g>
<g>
<title>block_write_end (3 samples, 0.13%)</title><rect x="869.5" y="339.0" width="1.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="872.5" y="350.0"></text>
</g>
<g>
<title>__block_commit_write.isra.0 (3 samples, 0.13%)</title><rect x="869.5" y="323.0" width="1.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="872.5" y="334.0"></text>
</g>
<g>
<title>mark_buffer_dirty (3 samples, 0.13%)</title><rect x="869.5" y="307.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="872.5" y="318.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.09%)</title><rect x="871.1" y="339.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="874.1" y="350.0"></text>
</g>
<g>
<title>ext4_nonda_switch (1 samples, 0.04%)</title><rect x="872.1" y="371.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="875.1" y="382.0"></text>
</g>
<g>
<title>generic_write_end (3 samples, 0.13%)</title><rect x="872.6" y="371.0" width="1.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="875.6" y="382.0"></text>
</g>
<g>
<title>grab_cache_page_write_begin (1 samples, 0.04%)</title><rect x="874.1" y="371.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="877.1" y="382.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (2 samples, 0.09%)</title><rect x="874.6" y="371.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="877.6" y="382.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.04%)</title><rect x="875.1" y="355.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="878.1" y="366.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (2 samples, 0.09%)</title><rect x="875.6" y="371.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="878.6" y="382.0"></text>
</g>
<g>
<title>iov_iter_copy_from_user_atomic (1 samples, 0.04%)</title><rect x="876.7" y="387.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="879.7" y="398.0"></text>
</g>
<g>
<title>iov_iter_fault_in_readable (2 samples, 0.09%)</title><rect x="877.2" y="387.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="880.2" y="398.0"></text>
</g>
<g>
<title>ext4_write_checks (2 samples, 0.09%)</title><rect x="878.2" y="403.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="881.2" y="414.0"></text>
</g>
<g>
<title>generic_write_check_limits.isra.0 (2 samples, 0.09%)</title><rect x="878.2" y="387.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="881.2" y="398.0"></text>
</g>
<g>
<title>file_remove_privs (2 samples, 0.09%)</title><rect x="879.2" y="403.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="882.2" y="414.0"></text>
</g>
<g>
<title>file_update_time (1 samples, 0.04%)</title><rect x="880.2" y="403.0" width="0.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="883.2" y="414.0"></text>
</g>
<g>
<title>generic_perform_write (1 samples, 0.04%)</title><rect x="880.7" y="403.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="883.7" y="414.0"></text>
</g>
<g>
<title>ext4_write_checks (1 samples, 0.04%)</title><rect x="881.2" y="419.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="884.2" y="430.0"></text>
</g>
<g>
<title>up_write (2 samples, 0.09%)</title><rect x="881.8" y="419.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="884.8" y="430.0"></text>
</g>
<g>
<title>fsnotify (2 samples, 0.09%)</title><rect x="882.8" y="451.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="885.8" y="462.0"></text>
</g>
<g>
<title>rw_verify_area (8 samples, 0.35%)</title><rect x="883.8" y="451.0" width="4.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="886.8" y="462.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.04%)</title><rect x="884.3" y="435.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="887.3" y="446.0"></text>
</g>
<g>
<title>security_file_permission (6 samples, 0.26%)</title><rect x="884.8" y="435.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="887.8" y="446.0"></text>
</g>
<g>
<title>apparmor_file_permission (3 samples, 0.13%)</title><rect x="884.8" y="419.0" width="1.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="887.8" y="430.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.04%)</title><rect x="884.8" y="403.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="887.8" y="414.0"></text>
</g>
<g>
<title>common_file_perm (2 samples, 0.09%)</title><rect x="885.3" y="403.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="888.3" y="414.0"></text>
</g>
<g>
<title>aa_file_perm (2 samples, 0.09%)</title><rect x="885.3" y="387.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="888.3" y="398.0"></text>
</g>
<g>
<title>common_file_perm (3 samples, 0.13%)</title><rect x="886.3" y="419.0" width="1.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="889.3" y="430.0"></text>
</g>
<g>
<title>ksys_write (3 samples, 0.13%)</title><rect x="887.9" y="499.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="890.9" y="510.0"></text>
</g>
<g>
<title>rocksdb::PosixWritableFile::Append(rocksdb::Slice const&amp;, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (4 samples, 0.17%)</title><rect x="889.4" y="547.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::SetPerfLevel(rocksdb::PerfLevel) (2 samples, 0.09%)</title><rect x="891.4" y="547.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.4" y="558.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::WriteBuffered(char const*, unsigned long) (6 samples, 0.26%)</title><rect x="892.5" y="579.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="895.5" y="590.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="895.0" y="563.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="898.0" y="574.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="895.0" y="547.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="898.0" y="558.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.04%)</title><rect x="895.0" y="531.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="898.0" y="542.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="895.0" y="515.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="898.0" y="526.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) (3 samples, 0.13%)</title><rect x="895.5" y="579.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="898.5" y="590.0"></text>
</g>
<g>
<title>rocksdb::crc32c::Extend(unsigned int, char const*, unsigned long) [clone .plt] (2 samples, 0.09%)</title><rect x="897.0" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="900.0" y="590.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (10 samples, 0.43%)</title><rect x="898.1" y="579.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="901.1" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.09%)</title><rect x="899.1" y="563.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="902.1" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.09%)</title><rect x="900.1" y="563.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="903.1" y="574.0"></text>
</g>
<g>
<title>memcpy (1 samples, 0.04%)</title><rect x="901.1" y="563.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="904.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::WritableFileWriter::Append(rocksdb::Slice const&amp;) (3 samples, 0.13%)</title><rect x="901.6" y="563.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="904.6" y="574.0"></text>
</g>
<g>
<title>rocksdb::FSWritableFile::PrepareWrite(unsigned long, unsigned long, rocksdb::IOOptions const&amp;, rocksdb::IODebugContext*) (2 samples, 0.09%)</title><rect x="902.1" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="905.1" y="558.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) (1 samples, 0.04%)</title><rect x="903.2" y="595.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="906.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::EmitPhysicalRecord(rocksdb::log::RecordType, char const*, unsigned long) [clone .plt] (1 samples, 0.04%)</title><rect x="903.7" y="595.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="906.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) (1 samples, 0.04%)</title><rect x="904.2" y="611.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="907.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::IsLatestPersistentState(rocksdb::WriteBatch const*) [clone .plt] (2 samples, 0.09%)</title><rect x="904.7" y="611.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="907.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.04%)</title><rect x="905.7" y="611.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="908.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) (4 samples, 0.17%)</title><rect x="906.2" y="611.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="909.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::log::Writer::AddRecord(rocksdb::Slice const&amp;) [clone .plt] (1 samples, 0.04%)</title><rect x="908.2" y="611.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() (3 samples, 0.13%)</title><rect x="908.8" y="627.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="911.8" y="638.0"></text>
</g>
<g>
<title>rocksdb::FlushScheduler::Empty() [clone .plt] (2 samples, 0.09%)</title><rect x="910.3" y="627.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="913.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (11 samples, 0.47%)</title><rect x="911.3" y="627.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="914.3" y="638.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.39%)</title><rect x="912.3" y="611.0" width="4.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="915.3" y="622.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::Clean() (1 samples, 0.04%)</title><rect x="916.9" y="627.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="919.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() (1 samples, 0.04%)</title><rect x="917.4" y="627.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.04%)</title><rect x="917.9" y="627.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="920.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Handler::~Handler() (1 samples, 0.04%)</title><rect x="918.4" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="921.4" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const [clone .plt] (1 samples, 0.04%)</title><rect x="918.9" y="627.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="921.9" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (178 samples, 7.69%)</title><rect x="919.5" y="627.0" width="90.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.5" y="638.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (171 samples, 7.38%)</title><rect x="921.5" y="611.0" width="87.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="924.5" y="622.0">rocksdb::W..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (4 samples, 0.17%)</title><rect x="921.5" y="595.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="924.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.04%)</title><rect x="923.5" y="595.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) [clone .plt] (1 samples, 0.04%)</title><rect x="924.0" y="595.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="927.0" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (1 samples, 0.04%)</title><rect x="924.6" y="595.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="927.6" y="606.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (164 samples, 7.08%)</title><rect x="925.1" y="595.0" width="83.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="928.1" y="606.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (153 samples, 6.61%)</title><rect x="927.1" y="579.0" width="78.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="930.1" y="590.0">rocksdb::..</text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (1 samples, 0.04%)</title><rect x="927.1" y="563.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="930.1" y="574.0"></text>
</g>
<g>
<title>rocksdb::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType) (152 samples, 6.56%)</title><rect x="927.6" y="563.0" width="77.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="930.6" y="574.0">rocksdb::..</text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (6 samples, 0.26%)</title><rect x="930.7" y="547.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="933.7" y="558.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="933.7" y="547.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="936.7" y="558.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.04%)</title><rect x="933.7" y="531.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="936.7" y="542.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="933.7" y="515.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="936.7" y="526.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="933.7" y="499.0" width="0.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="936.7" y="510.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="933.7" y="483.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="936.7" y="494.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="933.7" y="467.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="936.7" y="478.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (1 samples, 0.04%)</title><rect x="934.2" y="547.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (2 samples, 0.09%)</title><rect x="934.7" y="547.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.7" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const (5 samples, 0.22%)</title><rect x="935.8" y="547.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="938.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilySet::GetDefault() const [clone .plt] (1 samples, 0.04%)</title><rect x="938.3" y="547.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="941.3" y="558.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.04%)</title><rect x="938.8" y="547.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="941.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, bool, rocksdb::MemTablePostProcessInfo*, void**) (121 samples, 5.22%)</title><rect x="939.3" y="547.0" width="61.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.3" y="558.0">rocksd..</text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (13 samples, 0.56%)</title><rect x="941.9" y="531.0" width="6.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="944.9" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.13%)</title><rect x="945.4" y="515.0" width="1.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="948.4" y="526.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.04%)</title><rect x="947.0" y="515.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="950.0" y="526.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.04%)</title><rect x="947.0" y="499.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="950.0" y="510.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="947.0" y="483.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="950.0" y="494.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="947.0" y="467.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="950.0" y="478.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="947.0" y="451.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="950.0" y="462.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="947.0" y="435.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="950.0" y="446.0"></text>
</g>
<g>
<title>native_set_pte_at (1 samples, 0.04%)</title><rect x="947.0" y="419.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="950.0" y="430.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (2 samples, 0.09%)</title><rect x="947.5" y="515.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="950.5" y="526.0"></text>
</g>
<g>
<title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (93 samples, 4.02%)</title><rect x="948.5" y="531.0" width="47.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.5" y="542.0">bool..</text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (85 samples, 3.67%)</title><rect x="950.5" y="515.0" width="43.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="953.5" y="526.0">/tmp..</text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (22 samples, 0.95%)</title><rect x="972.4" y="499.0" width="11.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="975.4" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="974.0" y="483.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="977.0" y="494.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (18 samples, 0.78%)</title><rect x="974.5" y="483.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="977.5" y="494.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (2 samples, 0.09%)</title><rect x="978.6" y="467.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="981.6" y="478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (6 samples, 0.26%)</title><rect x="979.6" y="467.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="982.6" y="478.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.04%)</title><rect x="982.6" y="467.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.6" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="983.1" y="467.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="986.1" y="478.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (19 samples, 0.82%)</title><rect x="983.7" y="499.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.7" y="510.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (1 samples, 0.04%)</title><rect x="989.3" y="483.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="992.3" y="494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.17%)</title><rect x="989.8" y="483.0" width="2.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="992.8" y="494.0"></text>
</g>
<g>
<title>memcmp@plt (3 samples, 0.13%)</title><rect x="991.8" y="483.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="994.8" y="494.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="993.3" y="499.0" width="0.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="996.3" y="510.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="993.3" y="483.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="996.3" y="494.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="993.3" y="467.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="996.3" y="478.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.04%)</title><rect x="993.8" y="515.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="996.8" y="526.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (1 samples, 0.04%)</title><rect x="994.4" y="515.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.4" y="526.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni15761288266948979791.so (1 samples, 0.04%)</title><rect x="994.4" y="499.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="997.4" y="510.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (2 samples, 0.09%)</title><rect x="994.9" y="515.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.9" y="526.0"></text>
</g>
<g>
<title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (3 samples, 0.13%)</title><rect x="995.9" y="531.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="998.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() (3 samples, 0.13%)</title><rect x="997.4" y="531.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::ShouldFlushNow() [clone .plt] (1 samples, 0.04%)</title><rect x="998.9" y="531.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1001.9" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateFlushState() (1 samples, 0.04%)</title><rect x="999.4" y="531.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1002.4" y="542.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() (1 samples, 0.04%)</title><rect x="1000.0" y="531.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1003.0" y="542.0"></text>
</g>
<g>
<title>rocksdb::Random::GetTLSInstance() [clone .plt] (1 samples, 0.04%)</title><rect x="1000.5" y="531.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.5" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.09%)</title><rect x="1001.0" y="547.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (6 samples, 0.26%)</title><rect x="1002.0" y="547.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1005.0" y="558.0"></text>
</g>
<g>
<title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (6 samples, 0.26%)</title><rect x="1005.1" y="579.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1008.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.04%)</title><rect x="1008.1" y="579.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.1" y="590.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) (1 samples, 0.04%)</title><rect x="1008.6" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch::Handler*, unsigned long, unsigned long) [clone .plt] (1 samples, 0.04%)</title><rect x="1009.1" y="611.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.04%)</title><rect x="1009.6" y="611.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1012.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetSequence(rocksdb::WriteBatch*, unsigned long) (1 samples, 0.04%)</title><rect x="1010.1" y="627.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1013.1" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::CreateMissingNewerLinks(rocksdb::WriteThread::Writer*) [clone .plt] (1 samples, 0.04%)</title><rect x="1010.7" y="627.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.04%)</title><rect x="1011.2" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.09%)</title><rect x="1011.7" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.04%)</title><rect x="1012.2" y="611.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.2" y="622.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.04%)</title><rect x="1012.7" y="627.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1015.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) [clone .plt] (1 samples, 0.04%)</title><rect x="1013.2" y="627.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::AssertHeld() (1 samples, 0.04%)</title><rect x="1013.7" y="627.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1016.7" y="638.0"></text>
</g>
<g>
<title>rocksdb::port::Mutex::Lock() (3 samples, 0.13%)</title><rect x="1014.2" y="627.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1017.2" y="638.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteStatusCheck(rocksdb::Status const&amp;) (3 samples, 0.13%)</title><rect x="1015.8" y="643.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) (1 samples, 0.04%)</title><rect x="1017.3" y="643.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteToWAL(rocksdb::WriteThread::WriteGroup const&amp;, rocksdb::log::Writer*, unsigned long*, bool, bool, unsigned long) [clone .plt] (1 samples, 0.04%)</title><rect x="1017.8" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1020.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() (4 samples, 0.17%)</title><rect x="1018.3" y="643.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::InstrumentedMutex::Lock() [clone .plt] (1 samples, 0.04%)</title><rect x="1020.3" y="643.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1023.3" y="654.0"></text>
</g>
<g>
<title>rocksdb::SuperVersionContext::~SuperVersionContext() [clone .plt] (1 samples, 0.04%)</title><rect x="1020.8" y="643.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1023.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1021.4" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1024.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (2 samples, 0.09%)</title><rect x="1022.4" y="643.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) [clone .plt] (3 samples, 0.13%)</title><rect x="1023.4" y="643.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (1 samples, 0.04%)</title><rect x="1024.9" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1027.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) (1 samples, 0.04%)</title><rect x="1025.4" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.4" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status) [clone .plt] (1 samples, 0.04%)</title><rect x="1025.9" y="643.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1028.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (2 samples, 0.09%)</title><rect x="1026.5" y="643.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteThread::SetState(rocksdb::WriteThread::Writer*, unsigned char) (1 samples, 0.04%)</title><rect x="1027.5" y="643.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1030.5" y="654.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (2 samples, 0.09%)</title><rect x="1028.0" y="659.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) [clone .plt] (1 samples, 0.04%)</title><rect x="1029.0" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1032.0" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) (10 samples, 0.43%)</title><rect x="1029.5" y="659.0" width="5.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.5" y="670.0"></text>
</g>
<g>
<title>rocksdb::GetColumnFamilyID(rocksdb::ColumnFamilyHandle*) [clone .plt] (1 samples, 0.04%)</title><rect x="1034.6" y="659.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1037.6" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (30 samples, 1.30%)</title><rect x="1035.1" y="659.0" width="15.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (1 samples, 0.04%)</title><rect x="1035.1" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.1" y="654.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) [clone .plt] (2 samples, 0.09%)</title><rect x="1035.6" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Count() const (2 samples, 0.09%)</title><rect x="1036.6" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1039.6" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Count(rocksdb::WriteBatch const*) (3 samples, 0.13%)</title><rect x="1037.7" y="643.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.7" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (9 samples, 0.39%)</title><rect x="1039.2" y="643.0" width="4.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.2" y="654.0"></text>
</g>
<g>
<title>std::string::_M_leak_hard() (1 samples, 0.04%)</title><rect x="1043.3" y="627.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.3" y="638.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) (3 samples, 0.13%)</title><rect x="1043.8" y="643.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1046.8" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::SetCount(rocksdb::WriteBatch*, unsigned int) [clone .plt] (2 samples, 0.09%)</title><rect x="1045.3" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.3" y="654.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (5 samples, 0.22%)</title><rect x="1046.3" y="643.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.3" y="654.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) [clone .plt] (3 samples, 0.13%)</title><rect x="1048.9" y="643.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1051.9" y="654.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1050.4" y="659.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::~WriteBatch() (2 samples, 0.09%)</title><rect x="1051.4" y="659.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.4" y="670.0"></text>
</g>
<g>
<title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (5 samples, 0.22%)</title><rect x="1052.4" y="659.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1055.4" y="670.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.04%)</title><rect x="1055.0" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.0" y="670.0"></text>
</g>
<g>
<title>std::string::append(unsigned long, char) (1 samples, 0.04%)</title><rect x="1055.5" y="659.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1058.5" y="670.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (4 samples, 0.17%)</title><rect x="1056.0" y="659.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1059.0" y="670.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) [clone .plt] (1 samples, 0.04%)</title><rect x="1058.0" y="659.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.0" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="1058.0" y="643.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1061.0" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1058.0" y="627.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1061.0" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1058.0" y="611.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1061.0" y="622.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) (3 samples, 0.13%)</title><rect x="1058.5" y="659.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.5" y="670.0"></text>
</g>
<g>
<title>std::string::resize(unsigned long, char) [clone .plt] (1 samples, 0.04%)</title><rect x="1060.1" y="659.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.1" y="670.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (2 samples, 0.09%)</title><rect x="1060.6" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1063.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.04%)</title><rect x="1061.6" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1064.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) [clone .plt] (2 samples, 0.09%)</title><rect x="1062.1" y="675.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) (2 samples, 0.09%)</title><rect x="1063.1" y="675.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1066.1" y="686.0"></text>
</g>
<g>
<title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long) [clone .plt] (1 samples, 0.04%)</title><rect x="1064.2" y="675.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.2" y="686.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::DefaultColumnFamily() const (1 samples, 0.04%)</title><rect x="1064.7" y="707.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.7" y="718.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (1 samples, 0.04%)</title><rect x="1065.2" y="707.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.69%)</title><rect x="1065.7" y="739.0" width="8.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1068.7" y="750.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.09%)</title><rect x="1065.7" y="723.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1068.7" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28 (2 samples, 0.09%)</title><rect x="1066.7" y="723.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1069.7" y="734.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (4 samples, 0.17%)</title><rect x="1067.7" y="723.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.7" y="734.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (6 samples, 0.26%)</title><rect x="1069.8" y="723.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1072.8" y="734.0"></text>
</g>
<g>
<title>std::string::reserve(unsigned long) (2 samples, 0.09%)</title><rect x="1072.8" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.8" y="734.0"></text>
</g>
<g>
<title>std::string::append(char const*, unsigned long) (2 samples, 0.09%)</title><rect x="1072.8" y="707.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.8" y="718.0"></text>
</g>
<g>
<title>__libc_malloc (6 samples, 0.26%)</title><rect x="1073.8" y="739.0" width="3.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1076.8" y="750.0"></text>
</g>
<g>
<title>rocksdb_put_helper(JNIEnv_*, rocksdb::DB*, rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int, _jbyteArray*, int, int) [clone .plt] (1 samples, 0.04%)</title><rect x="1076.9" y="739.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/DAOImpl.unfoldToBytes (2 samples, 0.09%)</title><rect x="1077.4" y="771.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1080.4" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.09%)</title><rect x="1077.4" y="755.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1080.4" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1077.4" y="739.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1080.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1077.4" y="723.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1080.4" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1077.4" y="707.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1080.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.convertBytes (3 samples, 0.13%)</title><rect x="1078.4" y="771.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1081.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/kovalkov/utils/BufferConverter.unfoldToBytes (1 samples, 0.04%)</title><rect x="1079.4" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1082.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.04%)</title><rect x="1079.4" y="739.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1082.4" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.04%)</title><rect x="1079.4" y="723.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1082.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (5 samples, 0.22%)</title><rect x="1079.9" y="819.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1082.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.56%)</title><rect x="1082.5" y="819.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.56%)</title><rect x="1082.5" y="803.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.47%)</title><rect x="1083.0" y="787.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1086.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equals (8 samples, 0.35%)</title><rect x="1084.5" y="771.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1087.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.04%)</title><rect x="1088.6" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1091.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.04%)</title><rect x="1088.6" y="771.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1091.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.04%)</title><rect x="1088.6" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1091.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2 samples, 0.09%)</title><rect x="1089.1" y="819.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1092.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.09%)</title><rect x="1089.1" y="803.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1092.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.09%)</title><rect x="1089.1" y="787.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1092.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1089.1" y="771.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1092.1" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.04%)</title><rect x="1089.6" y="771.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1092.6" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1089.6" y="755.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1092.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (29 samples, 1.25%)</title><rect x="1090.1" y="851.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1093.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.04%)</title><rect x="1095.7" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.7" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.04%)</title><rect x="1095.7" y="819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.7" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.04%)</title><rect x="1095.7" y="803.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.7" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1095.7" y="787.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.7" y="798.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1095.7" y="771.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.7" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1095.7" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.7" y="766.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.04%)</title><rect x="1095.7" y="739.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.7" y="750.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.04%)</title><rect x="1095.7" y="723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1098.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.04%)</title><rect x="1096.3" y="835.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1099.3" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.69%)</title><rect x="1096.8" y="835.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1099.8" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (16 samples, 0.69%)</title><rect x="1096.8" y="819.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1099.8" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1103.9" y="803.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1106.9" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.09%)</title><rect x="1103.9" y="787.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1106.9" y="798.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.09%)</title><rect x="1103.9" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1106.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1104.4" y="755.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.4" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1104.4" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.4" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1104.4" y="723.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1104.4" y="707.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1104.4" y="691.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1107.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1104.4" y="675.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="686.0"></text>
</g>
<g>
<title>GenCollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.04%)</title><rect x="1104.4" y="659.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.4" y="670.0"></text>
</g>
<g>
<title>GenCollectedHeap::mem_allocate_work(unsigned long, bool, bool*) (1 samples, 0.04%)</title><rect x="1104.4" y="643.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (8 samples, 0.35%)</title><rect x="1104.9" y="851.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1107.9" y="862.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.26%)</title><rect x="1104.9" y="835.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1107.9" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (6 samples, 0.26%)</title><rect x="1104.9" y="819.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1107.9" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.22%)</title><rect x="1104.9" y="803.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1107.9" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.digit (5 samples, 0.22%)</title><rect x="1104.9" y="787.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1107.9" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.digit (5 samples, 0.22%)</title><rect x="1104.9" y="771.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1107.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.04%)</title><rect x="1107.5" y="803.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1110.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.04%)</title><rect x="1107.5" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1110.5" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.04%)</title><rect x="1108.0" y="835.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1111.0" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.setBody (1 samples, 0.04%)</title><rect x="1108.5" y="835.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1111.5" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (1 samples, 0.04%)</title><rect x="1109.0" y="851.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1112.0" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.43%)</title><rect x="1109.5" y="851.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1112.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.13%)</title><rect x="1110.0" y="835.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1113.0" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.09%)</title><rect x="1110.5" y="819.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1113.5" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="1111.0" y="803.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1114.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (1 samples, 0.04%)</title><rect x="1111.0" y="787.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1114.0" y="798.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (1 samples, 0.04%)</title><rect x="1111.0" y="771.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1114.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.26%)</title><rect x="1111.5" y="835.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1114.5" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.26%)</title><rect x="1111.5" y="819.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1114.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (5 samples, 0.22%)</title><rect x="1112.0" y="803.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.13%)</title><rect x="1112.0" y="787.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1115.0" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="1113.6" y="787.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1116.6" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.30%)</title><rect x="1114.6" y="851.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1117.6" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (7 samples, 0.30%)</title><rect x="1114.6" y="835.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1117.6" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (139 samples, 6.00%)</title><rect x="1118.2" y="867.0" width="70.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1121.2" y="878.0">one/nio/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (139 samples, 6.00%)</title><rect x="1118.2" y="851.0" width="70.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1121.2" y="862.0">one/nio/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.04%)</title><rect x="1119.7" y="835.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1122.7" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (33 samples, 1.42%)</title><rect x="1120.2" y="835.0" width="16.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1123.2" y="846.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.17%)</title><rect x="1120.7" y="819.0" width="2.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1123.7" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.04%)</title><rect x="1122.7" y="819.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.7" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.09%)</title><rect x="1123.3" y="819.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1126.3" y="830.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (25 samples, 1.08%)</title><rect x="1124.3" y="819.0" width="12.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1127.3" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (3 samples, 0.13%)</title><rect x="1128.4" y="803.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.4" y="814.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (14 samples, 0.60%)</title><rect x="1129.9" y="803.0" width="7.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1132.9" y="814.0"></text>
</g>
<g>
<title>__recv (97 samples, 4.19%)</title><rect x="1137.0" y="835.0" width="49.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1140.0" y="846.0">__recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (92 samples, 3.97%)</title><rect x="1139.6" y="819.0" width="46.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1142.6" y="830.0">entr..</text>
</g>
<g>
<title>__x64_sys_recvfrom (4 samples, 0.17%)</title><rect x="1139.6" y="803.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1142.6" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (88 samples, 3.80%)</title><rect x="1141.6" y="803.0" width="44.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1144.6" y="814.0">do_s..</text>
</g>
<g>
<title>__sys_recvfrom (3 samples, 0.13%)</title><rect x="1145.2" y="787.0" width="1.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1148.2" y="798.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (78 samples, 3.37%)</title><rect x="1146.7" y="787.0" width="39.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1149.7" y="798.0">__x..</text>
</g>
<g>
<title>__sys_recvfrom (70 samples, 3.02%)</title><rect x="1146.7" y="771.0" width="35.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1149.7" y="782.0">__s..</text>
</g>
<g>
<title>inet6_recvmsg (1 samples, 0.04%)</title><rect x="1146.7" y="755.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1149.7" y="766.0"></text>
</g>
<g>
<title>sock_recvmsg (65 samples, 2.81%)</title><rect x="1147.2" y="755.0" width="33.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1150.2" y="766.0">so..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.13%)</title><rect x="1147.2" y="739.0" width="1.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>inet6_recvmsg (47 samples, 2.03%)</title><rect x="1148.7" y="739.0" width="24.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1151.7" y="750.0">i..</text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.04%)</title><rect x="1148.7" y="723.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1151.7" y="734.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.09%)</title><rect x="1149.2" y="723.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1152.2" y="734.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.04%)</title><rect x="1150.3" y="723.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1153.3" y="734.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.04%)</title><rect x="1150.8" y="723.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>tcp_recvmsg (42 samples, 1.81%)</title><rect x="1151.3" y="723.0" width="21.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1154.3" y="734.0">t..</text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.26%)</title><rect x="1155.9" y="707.0" width="3.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1158.9" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.09%)</title><rect x="1155.9" y="691.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1158.9" y="702.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.17%)</title><rect x="1156.9" y="691.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1159.9" y="702.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.13%)</title><rect x="1156.9" y="675.0" width="1.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1159.9" y="686.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.04%)</title><rect x="1158.4" y="675.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1161.4" y="686.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.04%)</title><rect x="1158.4" y="659.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1161.4" y="670.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="1158.9" y="707.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1161.9" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.04%)</title><rect x="1159.4" y="707.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1162.4" y="718.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.04%)</title><rect x="1159.9" y="707.0" width="0.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1162.9" y="718.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.04%)</title><rect x="1160.4" y="707.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1163.4" y="718.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.04%)</title><rect x="1161.0" y="707.0" width="0.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1164.0" y="718.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.04%)</title><rect x="1161.0" y="691.0" width="0.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1164.0" y="702.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.04%)</title><rect x="1161.0" y="675.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1164.0" y="686.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (14 samples, 0.60%)</title><rect x="1161.5" y="707.0" width="7.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1164.5" y="718.0"></text>
</g>
<g>
<title>__skb_datagram_iter (14 samples, 0.60%)</title><rect x="1161.5" y="691.0" width="7.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1164.5" y="702.0"></text>
</g>
<g>
<title>simple_copy_to_iter (10 samples, 0.43%)</title><rect x="1163.5" y="675.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1166.5" y="686.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.09%)</title><rect x="1163.5" y="659.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1166.5" y="670.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.09%)</title><rect x="1163.5" y="643.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1166.5" y="654.0"></text>
</g>
<g>
<title>_copy_to_iter (8 samples, 0.35%)</title><rect x="1164.5" y="659.0" width="4.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1167.5" y="670.0"></text>
</g>
<g>
<title>copy_user_generic_string (8 samples, 0.35%)</title><rect x="1164.5" y="643.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1167.5" y="654.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.04%)</title><rect x="1168.6" y="707.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1171.6" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (1 samples, 0.04%)</title><rect x="1169.1" y="707.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1172.1" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (4 samples, 0.17%)</title><rect x="1169.6" y="707.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1172.6" y="718.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (4 samples, 0.17%)</title><rect x="1169.6" y="691.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1172.6" y="702.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.04%)</title><rect x="1169.6" y="675.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1172.6" y="686.0"></text>
</g>
<g>
<title>read_tsc (3 samples, 0.13%)</title><rect x="1170.1" y="675.0" width="1.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1173.1" y="686.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.09%)</title><rect x="1171.7" y="707.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1174.7" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (14 samples, 0.60%)</title><rect x="1172.7" y="739.0" width="7.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1175.7" y="750.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.09%)</title><rect x="1174.2" y="723.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (9 samples, 0.39%)</title><rect x="1175.2" y="723.0" width="4.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1178.2" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (9 samples, 0.39%)</title><rect x="1175.2" y="707.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1178.2" y="718.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.04%)</title><rect x="1179.8" y="739.0" width="0.5" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1182.8" y="750.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.17%)</title><rect x="1180.3" y="755.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>__fdget (3 samples, 0.13%)</title><rect x="1180.3" y="739.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.13%)</title><rect x="1180.3" y="723.0" width="1.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.13%)</title><rect x="1180.3" y="707.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.04%)</title><rect x="1181.8" y="739.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>fput (1 samples, 0.04%)</title><rect x="1182.4" y="771.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1185.4" y="782.0"></text>
</g>
<g>
<title>import_single_range (6 samples, 0.26%)</title><rect x="1182.9" y="771.0" width="3.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1185.9" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (1 samples, 0.04%)</title><rect x="1185.9" y="771.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1188.9" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.22%)</title><rect x="1186.4" y="835.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1189.4" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="1188.5" y="819.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1191.5" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1188.5" y="803.0" width="0.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1191.5" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1188.5" y="787.0" width="0.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1191.5" y="798.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.04%)</title><rect x="1188.5" y="771.0" width="0.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1191.5" y="782.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.04%)</title><rect x="1188.5" y="755.0" width="0.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1191.5" y="766.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="1188.5" y="739.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1191.5" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.04%)</title><rect x="1189.0" y="899.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1192.0" y="910.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.04%)</title><rect x="1189.0" y="883.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1192.0" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.04%)</title><rect x="1189.0" y="867.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1192.0" y="878.0"></text>
</g>
<g>
<title>start_thread (1 samples, 0.04%)</title><rect x="1189.5" y="915.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1192.5" y="926.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1189.5" y="899.0" width="0.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.5" y="910.0"></text>
</g>
<g>
<title>Thread::call_run() (1 samples, 0.04%)</title><rect x="1189.5" y="883.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.5" y="894.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.04%)</title><rect x="1189.5" y="867.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.5" y="878.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.04%)</title><rect x="1189.5" y="851.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.5" y="862.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.04%)</title><rect x="1189.5" y="835.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.04%)</title><rect x="1189.5" y="819.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.04%)</title><rect x="1189.5" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.04%)</title><rect x="1189.5" y="787.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="798.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.0] (1 samples, 0.04%)</title><rect x="1189.5" y="771.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1192.5" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.04%)</title><rect x="1189.5" y="755.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.5" y="766.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.04%)</title><rect x="1189.5" y="739.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1192.5" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.04%)</title><rect x="1189.5" y="723.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.5" y="734.0"></text>
</g>
</g>
</svg>
